!function(e){var a={};function t(i){if(a[i])return a[i].exports;var o=a[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=a,t.d=function(e,a,i){t.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,a){if(1&a&&(e=t(e)),8&a)return e;if(4&a&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var o in e)t.d(i,o,function(a){return e[a]}.bind(null,o));return i},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p="",t(t.s=286)}([function(e,a,t){var i=t(20),o=t(19).Stream,n=t(1),r=/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;function s(e){return e.charAt(0).toUpperCase()+e.slice(1)}function c(e,a,t,o,r){throw new i.AssertionError({message:n.format("%s (%s) is required",e,a),actual:void 0===r?typeof o:r(o),expected:a,operator:t||"===",stackStartFunction:c.caller})}function p(e){return Object.prototype.toString.call(e).slice(8,-1)}function u(){}var l={bool:{check:function(e){return"boolean"==typeof e}},func:{check:function(e){return"function"==typeof e}},string:{check:function(e){return"string"==typeof e}},object:{check:function(e){return"object"==typeof e&&null!==e}},number:{check:function(e){return"number"==typeof e&&!isNaN(e)}},finite:{check:function(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}},buffer:{check:function(e){return Buffer.isBuffer(e)},operator:"Buffer.isBuffer"},array:{check:function(e){return Array.isArray(e)},operator:"Array.isArray"},stream:{check:function(e){return e instanceof o},operator:"instanceof",actual:p},date:{check:function(e){return e instanceof Date},operator:"instanceof",actual:p},regexp:{check:function(e){return e instanceof RegExp},operator:"instanceof",actual:p},uuid:{check:function(e){return"string"==typeof e&&r.test(e)},operator:"isUUID"}};e.exports=function e(a){var t,o=Object.keys(l);return t=process.env.NODE_NDEBUG?u:function(e,a){e||c(a,"true",e)},o.forEach(function(e){if(a)t[e]=u;else{var i=l[e];t[e]=function(a,t){i.check(a)||c(t,e,i.operator,a,i.actual)}}}),o.forEach(function(e){var i="optional"+s(e);if(a)t[i]=u;else{var o=l[e];t[i]=function(a,t){null!=a&&(o.check(a)||c(t,e,o.operator,a,o.actual))}}}),o.forEach(function(e){var i="arrayOf"+s(e);if(a)t[i]=u;else{var o=l[e],n="["+e+"]";t[i]=function(e,a){var t;for(Array.isArray(e)||c(a,n,o.operator,e,o.actual),t=0;t<e.length;t++)o.check(e[t])||c(a,n,o.operator,e,o.actual)}}}),o.forEach(function(e){var i="optionalArrayOf"+s(e);if(a)t[i]=u;else{var o=l[e],n="["+e+"]";t[i]=function(e,a){var t;if(null!=e)for(Array.isArray(e)||c(a,n,o.operator,e,o.actual),t=0;t<e.length;t++)o.check(e[t])||c(a,n,o.operator,e,o.actual)}}}),Object.keys(i).forEach(function(e){t[e]="AssertionError"!==e&&a?u:i[e]}),t._setExports=e,t}(process.env.NODE_NDEBUG)},function(e,a){e.exports=require("util")},function(e,a){e.exports=require("crypto")},function(e,a,t){"use strict";var i,o=t(59),n=o.Buffer,r={};for(i in o)o.hasOwnProperty(i)&&"SlowBuffer"!==i&&"Buffer"!==i&&(r[i]=o[i]);var s=r.Buffer={};for(i in n)n.hasOwnProperty(i)&&"allocUnsafe"!==i&&"allocUnsafeSlow"!==i&&(s[i]=n[i]);if(r.Buffer.prototype=n.prototype,s.from&&s.from!==Uint8Array.from||(s.from=function(e,a,t){if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&void 0===e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return n(e,a,t)}),s.alloc||(s.alloc=function(e,a,t){if("number"!=typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var i=n(e);return a&&0!==a.length?"string"==typeof t?i.fill(a,t):i.fill(a):i.fill(0),i}),!r.kStringMaxLength)try{r.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(e){}r.constants||(r.constants={MAX_LENGTH:r.kMaxLength},r.kStringMaxLength&&(r.constants.MAX_STRING_LENGTH=r.kStringMaxLength)),e.exports=r},function(e,a,t){e.exports=v;var i,o=t(0),n=t(7),r=t(2),s=t(24),c=t(13),p=t(44).DiffieHellman,u=t(10),l=t(5),m=t(6);try{i=t(60)}catch(e){}var d=u.InvalidAlgorithmError,h=u.KeyParseError,f={};function v(e){o.object(e,"options"),o.arrayOfObject(e.parts,"options.parts"),o.string(e.type,"options.type"),o.optionalString(e.comment,"options.comment");var a=n.info[e.type];if("object"!=typeof a)throw new d(e.type);for(var t,i={},r=0;r<e.parts.length;++r){var s=e.parts[r];i[s.name]=s}if(this.type=e.type,this.parts=e.parts,this.part=i,this.comment=void 0,this.source=e.source,this._rfc4253Cache=e._rfc4253Cache,this._hashCache={},this.curve=void 0,"ecdsa"===this.type){var c=this.part.curve.data.toString();this.curve=c,t=n.curves[c].size}else if("ed25519"===this.type||"curve25519"===this.type)t=256,this.curve="curve25519";else{var p=this.part[a.sizePart];t=8*(t=p.data.length)-l.countZeros(p.data)}this.size=t}f.auto=t(61),f.pem=t(15),f.pkcs1=t(45),f.pkcs8=t(28),f.rfc4253=t(16),f.ssh=t(63),f["ssh-private"]=t(35),f.openssh=f["ssh-private"],f.dnssec=t(46),f.putty=t(64),f.ppk=f.putty,v.formats=f,v.prototype.toBuffer=function(e,a){return void 0===e&&(e="ssh"),o.string(e,"format"),o.object(f[e],"formats[format]"),o.optionalObject(a,"options"),"rfc4253"===e?(void 0===this._rfc4253Cache&&(this._rfc4253Cache=f.rfc4253.write(this)),this._rfc4253Cache):f[e].write(this,a)},v.prototype.toString=function(e,a){return this.toBuffer(e,a).toString()},v.prototype.hash=function(e,a){if(o.string(e,"algorithm"),o.optionalString(a,"type"),void 0===a&&(a="ssh"),e=e.toLowerCase(),void 0===n.hashAlgs[e])throw new d(e);var t,i=e+"||"+a;if(this._hashCache[i])return this._hashCache[i];if("ssh"===a)t=this.toBuffer("rfc4253");else{if("spki"!==a)throw new Error("Hash type "+a+" not supported");t=f.pkcs8.pkcs8ToBuffer(this)}var s=r.createHash(e).update(t).digest();return this._hashCache[i]=s,s},v.prototype.fingerprint=function(e,a){void 0===e&&(e="sha256"),void 0===a&&(a="ssh"),o.string(e,"algorithm"),o.string(a,"type");var t={type:"key",hash:this.hash(e,a),algorithm:e,hashType:a};return new s(t)},v.prototype.defaultHashAlgorithm=function(){var e="sha1";return"rsa"===this.type&&(e="sha256"),"dsa"===this.type&&this.size>1024&&(e="sha256"),"ed25519"===this.type&&(e="sha512"),"ecdsa"===this.type&&(e=this.size<=256?"sha256":this.size<=384?"sha384":"sha512"),e},v.prototype.createVerify=function(e){if(void 0===e&&(e=this.defaultHashAlgorithm()),o.string(e,"hash algorithm"),"ed25519"===this.type&&void 0!==i)return new i.Verifier(this,e);if("curve25519"===this.type)throw new Error("Curve25519 keys are not suitable for signing or verification");var a,t,n;try{t=e.toUpperCase(),a=r.createVerify(t)}catch(e){n=e}(void 0===a||n instanceof Error&&n.message.match(/Unknown message digest/))&&(t="RSA-",t+=e.toUpperCase(),a=r.createVerify(t)),o.ok(a,"failed to create verifier");var s=a.verify.bind(a),p=this.toBuffer("pkcs8"),u=this.curve,l=this;return a.verify=function(a,t){if(c.isSignature(a,[2,0]))return a.type===l.type&&((!a.hashAlgorithm||a.hashAlgorithm===e)&&((!a.curve||"ecdsa"!==l.type||a.curve===u)&&s(p,a.toBuffer("asn1"))));if("string"==typeof a||Buffer.isBuffer(a))return s(p,a,t);throw c.isSignature(a,[1,0])?new Error("signature was created by too old a version of sshpk and cannot be verified"):new TypeError("signature must be a string, Buffer, or Signature object")},a},v.prototype.createDiffieHellman=function(){if("rsa"===this.type)throw new Error("RSA keys do not support Diffie-Hellman");return new p(this)},v.prototype.createDH=v.prototype.createDiffieHellman,v.parse=function(e,a,t){"string"!=typeof e&&o.buffer(e,"data"),void 0===a&&(a="auto"),o.string(a,"format"),"string"==typeof t&&(t={filename:t}),o.optionalObject(t,"options"),void 0===t&&(t={}),o.optionalString(t.filename,"options.filename"),void 0===t.filename&&(t.filename="(unnamed)"),o.object(f[a],"formats[format]");try{var i=f[a].read(e,t);return i instanceof m&&(i=i.toPublic()),i.comment||(i.comment=t.filename),i}catch(e){if("KeyEncryptedError"===e.name)throw e;throw new h(t.filename,a,e)}},v.isKey=function(e,a){return l.isCompatible(e,v,a)},v.prototype._sshpkApiVersion=[1,7],v._oldVersionDetect=function(e){return o.func(e.toBuffer),o.func(e.fingerprint),e.createDH?[1,4]:e.defaultHashAlgorithm?[1,3]:e.formats.auto?[1,2]:e.formats.pkcs1?[1,1]:[1,0]}},function(e,a,t){e.exports={bufferSplit:function(e,a){i.buffer(e),i.string(a);for(var t=[],o=0,n=0,r=0;r<e.length;++r)if(e[r]===a.charCodeAt(n)?++n:n=e[r]===a.charCodeAt(0)?1:0,n>=a.length){var s=r+1;t.push(e.slice(o,s-n)),o=s,n=0}o<=e.length&&t.push(e.slice(o,e.length));return t},addRSAMissing:function(e){i.object(e),h(e,n,[1,1]);var a,t=new l(e.part.d.data);if(!e.part.dmodp){var o=new l(e.part.p.data),r=t.mod(o.subtract(1));a=b(r),e.part.dmodp={name:"dmodp",data:a},e.parts.push(e.part.dmodp)}if(!e.part.dmodq){var s=new l(e.part.q.data),c=t.mod(s.subtract(1));a=b(c),e.part.dmodq={name:"dmodq",data:a},e.parts.push(e.part.dmodq)}},calculateDSAPublic:function(e,a,t){return i.buffer(e),i.buffer(a),i.buffer(t),e=new l(e),a=new l(a),t=new l(t),b(e.modPow(t,a))},calculateED25519Public:function(e){i.buffer(e);var a=m.sign.keyPair.fromSeed(new Uint8Array(e));return o.from(a.publicKey)},calculateX25519Public:function(e){i.buffer(e);var a=m.box.keyPair.fromSeed(new Uint8Array(e));return o.from(a.publicKey)},mpNormalize:g,mpDenormalize:function(e){i.buffer(e);for(;e.length>1&&0===e[0];)e=e.slice(1);return e},ecNormalize:function(e,a){if(i.buffer(e),0===e[0]&&4===e[1])return a?e:e.slice(1);if(4===e[0]){if(!a)return e}else{for(;0===e[0];)e=e.slice(1);if(2===e[0]||3===e[0])throw new Error("Compressed elliptic curve points are not supported");if(4!==e[0])throw new Error("Not a valid elliptic curve point");if(!a)return e}var t=o.alloc(e.length+1);return t[0]=0,e.copy(t,1),t},countZeros:function(e){var a=0,t=8;for(;a<e.length;){var i=1<<t;if((e[a]&i)===i)break;--t<0&&(a++,t=8)}return 8*a+(8-t)-1},assertCompatible:h,isCompatible:function(e,a,t){if(null===e||"object"!=typeof e)return!1;void 0===t&&(t=a.prototype._sshpkApiVersion);if(e instanceof a&&a.prototype._sshpkApiVersion[0]==t[0])return!0;var i=Object.getPrototypeOf(e),o=0;for(;i.constructor.name!==a.name;)if(!(i=Object.getPrototypeOf(i))||++o>d)return!1;if(i.constructor.name!==a.name)return!1;var n=i._sshpkApiVersion;void 0===n&&(n=a._oldVersionDetect(e));return!(n[0]!=t[0]||n[1]<t[1])},opensslKeyDeriv:function(e,a,t,n){i.buffer(a,"salt"),i.buffer(t,"passphrase"),i.number(n,"iteration count");var r,c,p,u=f[e];i.object(u,"supported cipher"),a=a.slice(0,v);var l=o.alloc(0);for(;l.length<u.key+u.iv;){p=[],c&&p.push(c),p.push(t),p.push(a),r=o.concat(p);for(var m=0;m<n;++m)r=s.createHash("md5").update(r).digest();l=o.concat([l,r]),c=r}return{key:l.slice(0,u.key),iv:l.slice(u.key,u.key+u.iv)}},opensshCipherInfo:function(e){var a={};switch(e){case"3des-cbc":a.keySize=24,a.blockSize=8,a.opensslName="des-ede3-cbc";break;case"blowfish-cbc":a.keySize=16,a.blockSize=8,a.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":a.keySize=16,a.blockSize=16,a.opensslName="aes-128-"+e.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":a.keySize=24,a.blockSize=16,a.opensslName="aes-192-"+e.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":a.keySize=32,a.blockSize=16,a.opensslName="aes-256-"+e.slice(7,10);break;default:throw new Error('Unsupported openssl cipher "'+e+'"')}return a},publicFromPrivateECDSA:function(e,a){i.string(e,"curveName"),i.buffer(a);var t=c.curves[e],n=new l(t.p),s=new l(t.a),p=new l(t.b),m=new u.ECCurveFp(n,s,p),d=m.decodePointHex(t.G.toString("hex")),h=new l(g(a)),f=d.multiply(h);f=o.from(m.encodePointHex(f),"hex");var v=[];return v.push({name:"curve",data:o.from(e)}),v.push({name:"Q",data:f}),new r({type:"ecdsa",curve:m,parts:v})},zeroPadToLength:function(e,a){i.buffer(e),i.number(a);for(;e.length>a;)i.equal(e[0],0),e=e.slice(1);for(;e.length<a;){var t=o.alloc(e.length+1);t[0]=0,e.copy(t,1),e=t}return e},writeBitString:function(e,a,t){void 0===t&&(t=p.Ber.BitString);var i=o.alloc(a.length+1);i[0]=0,a.copy(i,1),e.writeBuffer(i,t)},readBitString:function(e,a){void 0===a&&(a=p.Ber.BitString);var t=e.readString(a,!0);return i.strictEqual(t[0],0,"bit strings with unused bits are not supported (0x"+t[0].toString(16)+")"),t.slice(1)},pbkdf2:function(e,a,t,i,n){var r=o.alloc(a.length+4);a.copy(r);var c=0,p=[],u=1;for(;c<i;){var l=m(u++);c+=l.length,p.push(l)}return o.concat(p).slice(0,i);function m(a){r.writeUInt32BE(a,r.length-4);var i=s.createHmac(e,n);i.update(r);for(var o=i.digest(),c=o,p=1;p++<t;){(i=s.createHmac(e,n)).update(c),c=i.digest();for(var u=0;u<o.length;++u)o[u]^=c[u]}return o}}};var i=t(0),o=t(3).Buffer,n=t(6),r=t(4),s=t(2),c=t(7),p=t(14),u=t(34),l=t(25).BigInteger,m=t(26),d=3;function h(e,a,t,o){if(void 0===o&&(o="object"),i.ok(e,o+" must not be null"),i.object(e,o+" must be an object"),void 0===t&&(t=a.prototype._sshpkApiVersion),!(e instanceof a&&a.prototype._sshpkApiVersion[0]==t[0])){for(var n=Object.getPrototypeOf(e),r=0;n.constructor.name!==a.name;)n=Object.getPrototypeOf(n),i.ok(n&&++r<=d,o+" must be a "+a.name+" instance");i.strictEqual(n.constructor.name,a.name,o+" must be a "+a.name+" instance");var s=n._sshpkApiVersion;void 0===s&&(s=a._oldVersionDetect(e)),i.ok(s[0]==t[0]&&s[1]>=t[1],o+" must be compatible with "+a.name+" klass version "+t[0]+"."+t[1])}}var f={"des-ede3-cbc":{key:24,iv:8},"aes-128-cbc":{key:16,iv:16},"aes-256-cbc":{key:32,iv:16}},v=8;function g(e){for(i.buffer(e);e.length>1&&0===e[0]&&0==(128&e[1]);)e=e.slice(1);if(128==(128&e[0])){var a=o.alloc(e.length+1);a[0]=0,e.copy(a,1),e=a}return e}function b(e){var a=o.from(e.toByteArray());return a=g(a)}},function(e,a,t){e.exports=y;var i=t(0),o=t(3).Buffer,n=t(7),r=t(2),s=(t(24),t(13)),c=t(10),p=t(1),u=t(5),l=t(44),m=l.generateECDSA,d=l.generateED25519,h=t(60),f=t(26),v=t(4),g=(c.InvalidAlgorithmError,c.KeyParseError),b=(c.KeyEncryptedError,{});function y(e){i.object(e,"options"),v.call(this,e),this._pubCache=void 0}b.auto=t(61),b.pem=t(15),b.pkcs1=t(45),b.pkcs8=t(28),b.rfc4253=t(16),b["ssh-private"]=t(35),b.openssh=b["ssh-private"],b.ssh=b["ssh-private"],b.dnssec=t(46),p.inherits(y,v),y.formats=b,y.prototype.toBuffer=function(e,a){return void 0===e&&(e="pkcs1"),i.string(e,"format"),i.object(b[e],"formats[format]"),i.optionalObject(a,"options"),b[e].write(this,a)},y.prototype.hash=function(e,a){return this.toPublic().hash(e,a)},y.prototype.fingerprint=function(e,a){return this.toPublic().fingerprint(e,a)},y.prototype.toPublic=function(){if(this._pubCache)return this._pubCache;for(var e=n.info[this.type],a=[],t=0;t<e.parts.length;++t){var i=e.parts[t];a.push(this.part[i])}return this._pubCache=new v({type:this.type,source:this,parts:a}),this.comment&&(this._pubCache.comment=this.comment),this._pubCache},y.prototype.derive=function(e){var a,t,n;if(i.string(e,"type"),"ed25519"===this.type&&"curve25519"===e)return 0===(a=this.part.k.data)[0]&&(a=a.slice(1)),n=f.box.keyPair.fromSecretKey(new Uint8Array(a)),t=o.from(n.publicKey),new y({type:"curve25519",parts:[{name:"A",data:u.mpNormalize(t)},{name:"k",data:u.mpNormalize(a)}]});if("curve25519"===this.type&&"ed25519"===e)return 0===(a=this.part.k.data)[0]&&(a=a.slice(1)),n=f.sign.keyPair.fromSeed(new Uint8Array(a)),t=o.from(n.publicKey),new y({type:"ed25519",parts:[{name:"A",data:u.mpNormalize(t)},{name:"k",data:u.mpNormalize(a)}]});throw new Error("Key derivation not supported from "+this.type+" to "+e)},y.prototype.createVerify=function(e){return this.toPublic().createVerify(e)},y.prototype.createSign=function(e){if(void 0===e&&(e=this.defaultHashAlgorithm()),i.string(e,"hash algorithm"),"ed25519"===this.type&&void 0!==h)return new h.Signer(this,e);if("curve25519"===this.type)throw new Error("Curve25519 keys are not suitable for signing or verification");var a,t,n;try{t=e.toUpperCase(),a=r.createSign(t)}catch(e){n=e}(void 0===a||n instanceof Error&&n.message.match(/Unknown message digest/))&&(t="RSA-",t+=e.toUpperCase(),a=r.createSign(t)),i.ok(a,"failed to create verifier");var c=a.sign.bind(a),p=this.toBuffer("pkcs1"),u=this.type,l=this.curve;return a.sign=function(){var a=c(p);return"string"==typeof a&&(a=o.from(a,"binary")),(a=s.parse(a,u,"asn1")).hashAlgorithm=e,a.curve=l,a},a},y.parse=function(e,a,t){"string"!=typeof e&&i.buffer(e,"data"),void 0===a&&(a="auto"),i.string(a,"format"),"string"==typeof t&&(t={filename:t}),i.optionalObject(t,"options"),void 0===t&&(t={}),i.optionalString(t.filename,"options.filename"),void 0===t.filename&&(t.filename="(unnamed)"),i.object(b[a],"formats[format]");try{var o=b[a].read(e,t);return i.ok(o instanceof y,"key is not a private key"),o.comment||(o.comment=t.filename),o}catch(e){if("KeyEncryptedError"===e.name)throw e;throw new g(t.filename,a,e)}},y.isPrivateKey=function(e,a){return u.isCompatible(e,y,a)},y.generate=function(e,a){switch(void 0===a&&(a={}),i.object(a,"options"),e){case"ecdsa":return void 0===a.curve&&(a.curve="nistp256"),i.string(a.curve,"options.curve"),m(a.curve);case"ed25519":return d();default:throw new Error('Key generation not supported with key type "'+e+'"')}},y.prototype._sshpkApiVersion=[1,6],y._oldVersionDetect=function(e){return i.func(e.toPublic),i.func(e.createSign),e.derive?[1,3]:e.defaultHashAlgorithm?[1,2]:e.formats.auto?[1,1]:[1,0]}},function(e,a,t){var i=t(3).Buffer,o={dsa:{parts:["p","q","g","y"],sizePart:"p"},rsa:{parts:["e","n"],sizePart:"n"},ecdsa:{parts:["curve","Q"],sizePart:"Q"},ed25519:{parts:["A"],sizePart:"A"}};o.curve25519=o.ed25519;var n={dsa:{parts:["p","q","g","y","x"]},rsa:{parts:["n","e","d","iqmp","p","q"]},ecdsa:{parts:["curve","Q","d"]},ed25519:{parts:["A","k"]}};n.curve25519=n.ed25519;var r={nistp256:{size:256,pkcs8oid:"1.2.840.10045.3.1.7",p:i.from("00ffffffff 00000001 00000000 0000000000000000 ffffffff ffffffff ffffffff".replace(/ /g,""),"hex"),a:i.from("00FFFFFFFF 00000001 00000000 0000000000000000 FFFFFFFF FFFFFFFF FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("5ac635d8 aa3a93e7 b3ebbd55 769886bc651d06b0 cc53b0f6 3bce3c3e 27d2604b".replace(/ /g,""),"hex"),s:i.from("00c49d3608 86e70493 6a6678e1 139d26b7819f7e90".replace(/ /g,""),"hex"),n:i.from("00ffffffff 00000000 ffffffff ffffffffbce6faad a7179e84 f3b9cac2 fc632551".replace(/ /g,""),"hex"),G:i.from("046b17d1f2 e12c4247 f8bce6e5 63a440f277037d81 2deb33a0 f4a13945 d898c2964fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e162bce3357 6b315ece cbb64068 37bf51f5".replace(/ /g,""),"hex")},nistp384:{size:384,pkcs8oid:"1.3.132.0.34",p:i.from("00ffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff fffffffeffffffff 00000000 00000000 ffffffff".replace(/ /g,""),"hex"),a:i.from("00FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFEFFFFFFFF 00000000 00000000 FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("b3312fa7 e23ee7e4 988e056b e3f82d19181d9c6e fe814112 0314088f 5013875ac656398d 8a2ed19d 2a85c8ed d3ec2aef".replace(/ /g,""),"hex"),s:i.from("00a335926a a319a27a 1d00896a 6773a4827acdac73".replace(/ /g,""),"hex"),n:i.from("00ffffffff ffffffff ffffffff ffffffffffffffff ffffffff c7634d81 f4372ddf581a0db2 48b0a77a ecec196a ccc52973".replace(/ /g,""),"hex"),G:i.from("04aa87ca22 be8b0537 8eb1c71e f320ad746e1d3b62 8ba79b98 59f741e0 82542a385502f25d bf55296c 3a545e38 72760ab73617de4a 96262c6f 5d9e98bf 9292dc29f8f41dbd 289a147c e9da3113 b5f0b8c00a60b1ce 1d7e819d 7a431d7c 90ea0e5f".replace(/ /g,""),"hex")},nistp521:{size:521,pkcs8oid:"1.3.132.0.35",p:i.from("01ffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffff".replace(/ /g,""),"hex"),a:i.from("01FFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("51953eb961 8e1c9a1f 929a21a0 b68540eea2da725b 99b315f3 b8b48991 8ef109e156193951 ec7e937b 1652c0bd 3bb1bf073573df88 3d2c34f1 ef451fd4 6b503f00".replace(/ /g,""),"hex"),s:i.from("00d09e8800 291cb853 96cc6717 393284aaa0da64ba".replace(/ /g,""),"hex"),n:i.from("01ffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff fffffffa51868783 bf2f966b 7fcc0148 f709a5d03bb5c9b8 899c47ae bb6fb71e 91386409".replace(/ /g,""),"hex"),G:i.from("0400c6 858e06b7 0404e9cd 9e3ecb66 2395b4429c648139 053fb521 f828af60 6b4d3dbaa14b5e77 efe75928 fe1dc127 a2ffa8de3348b3c1 856a429b f97e7e31 c2e5bd660118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd998f54449 579b4468 17afbd17 273e662c97ee7299 5ef42640 c550b901 3fad0761353c7086 a272c240 88be9476 9fd16650".replace(/ /g,""),"hex")}};e.exports={info:o,privInfo:n,hashAlgs:{md5:!0,sha1:!0,sha256:!0,sha384:!0,sha512:!0},curves:r}},function(e,a){e.exports=require("path")},function(e,a){e.exports=require("url")},function(e,a,t){t(0);var i=t(1);function o(e,a){Error.captureStackTrace&&Error.captureStackTrace(this,o),this.name="FingerprintFormatError",this.fingerprint=e,this.format=a,this.message="Fingerprint format is not supported, or is invalid: ",void 0!==e&&(this.message+=" fingerprint = "+e),void 0!==a&&(this.message+=" format = "+a)}function n(e){Error.captureStackTrace&&Error.captureStackTrace(this,n),this.name="InvalidAlgorithmError",this.algorithm=e,this.message='Algorithm "'+e+'" is not supported'}function r(e,a,t){Error.captureStackTrace&&Error.captureStackTrace(this,r),this.name="KeyParseError",this.format=a,this.keyName=e,this.innerErr=t,this.message="Failed to parse "+e+" as a valid "+a+" format key: "+t.message}function s(e,a,t){Error.captureStackTrace&&Error.captureStackTrace(this,s),this.name="SignatureParseError",this.type=e,this.format=a,this.innerErr=t,this.message="Failed to parse the given data as a "+e+" signature in "+a+" format: "+t.message}function c(e,a,t){Error.captureStackTrace&&Error.captureStackTrace(this,c),this.name="CertificateParseError",this.format=a,this.certName=e,this.innerErr=t,this.message="Failed to parse "+e+" as a valid "+a+" format certificate: "+t.message}function p(e,a){Error.captureStackTrace&&Error.captureStackTrace(this,p),this.name="KeyEncryptedError",this.format=a,this.keyName=e,this.message="The "+a+" format key "+e+" is encrypted (password-protected), and no passphrase was provided in `options`"}i.inherits(o,Error),i.inherits(n,Error),i.inherits(r,Error),i.inherits(s,Error),i.inherits(c,Error),i.inherits(p,Error),e.exports={FingerprintFormatError:o,InvalidAlgorithmError:n,KeyParseError:r,SignatureParseError:s,KeyEncryptedError:p,CertificateParseError:c}},function(e,a,t){"use strict";a.NO_HOST_ERROR="Missing 'host' property.",a.NO_CONSUMER_KEY_ERROR="Missing 'oauth_consumer_key' property.",a.NO_PRIVATE_KEY_ERROR="Missing 'oauth_private_key' property.",a.NO_OAUTH_TOKEN_ERROR="Missing 'oauth_token' property.",a.NO_OAUTH_TOKEN_SECRET_ERROR="Missing 'oauth_token_secret' property.",a.NO_USERNAME_ERROR="Missing 'username' property.",a.NO_PASSWORD_ERROR="Missing 'password' property.",a.NO_EMAIL_ERROR="Missing 'email' property.",a.NO_APITOKEN_ERROR="Missing 'api_token' property.",a.NO_AUTHENTICATION_ERROR="Missing 'auth' property.",a.NO_VERIFIER_ERROR="Missing 'oauth_verifier' property.",a.INVALID_AUTHENTICATION_PROPERTY_ERROR="Invalid 'auth' property.",a.NO_ISSUE_IDENTIFIER="Missing Issue ID or Key",a.NO_COMMENT_ID="Missing 'commentID' property.",a.NO_COMMENT_ERROR="Missing 'comment' property.",a.NO_NOTIFICATION_ERROR="Missing 'notification' property",a.NO_GLOBAL_ID_ERROR="Missing 'globalId' property.",a.NO_LINK_ID_ERROR="Missing 'linkId' property.",a.NO_TRANSITION_ERROR="Missing 'transition' property.",a.NO_ISSUE_ERROR="Missing 'issue' property",a.NO_ASSIGNEE_ERROR="Missing 'assignee' property",a.NO_WATCHER_ERROR="Missing 'watcher' property",a.NO_WORKLOG_ERROR="Missing 'worklog' property",a.NO_WORKLOG_ID_ERROR="Missing 'worklogId' property",a.NO_FILENAME_ERROR="Missing 'filename' property",a.NO_PROPERTY_KEY_ERROR="Missing 'propertyKey' property",a.NO_PROPERTY_VALUE_ERROR="Missing 'propertyValue' property",a.NO_ATTACHMENT_ID_ERROR="Missing 'attachmentId' property",a.NO_AUDIT_ERROR="Missing 'audit' property",a.NO_AVATAR_TYPE_ERROR="Missing 'avatarType' property",a.NO_COMMENT_PROPERTY_KEY_ERROR="Missing 'propertyKey' property",a.NO_COMMENT_PROPERTY_VALUE_ERROR="Missing 'propertyValue' property",a.NO_ISSUE_LINK_ERROR="Missing'issueLink' property",a.NO_ISSUE_LINK_ID_ERROR="Missing'linkId' property",a.NO_ISSUE_LINK_TYPE_ID="Missing 'issueLinkTypeId' property.",a.NO_FIELD_OPTION_ID_ERROR="Missing 'fieldOptionId' property."},function(e,a){e.exports=require("fs")},function(e,a,t){e.exports=l;var i=t(0),o=t(3).Buffer,n=(t(7),t(2),t(10)),r=t(5),s=t(14),c=t(27),p=n.InvalidAlgorithmError,u=n.SignatureParseError;function l(e){i.object(e,"options"),i.arrayOfObject(e.parts,"options.parts"),i.string(e.type,"options.type");for(var a={},t=0;t<e.parts.length;++t){var o=e.parts[t];a[o.name]=o}this.type=e.type,this.hashAlgorithm=e.hashAlgo,this.curve=e.curve,this.parts=e.parts,this.part=a}function m(e,a,t,o){if("ssh"===t){try{var n=new c({buffer:e}),r=n.readString()}catch(e){}if(void 0!==n){var s="SSH signature does not match expected type (expected "+a+", got "+r+")";switch(r){case"ssh-rsa":i.strictEqual(a,"rsa",s),o.hashAlgo="sha1";break;case"rsa-sha2-256":i.strictEqual(a,"rsa",s),o.hashAlgo="sha256";break;case"rsa-sha2-512":i.strictEqual(a,"rsa",s),o.hashAlgo="sha512";break;case"ssh-ed25519":i.strictEqual(a,"ed25519",s),o.hashAlgo="sha512";break;default:throw new Error("Unknown SSH signature type: "+r)}var p=n.readPart();return i.ok(n.atEnd(),"extra trailing bytes"),p.name="sig",o.parts.push(p),new l(o)}}return o.parts.push({name:"sig",data:e}),new l(o)}l.prototype.toBuffer=function(e){var a;void 0===e&&(e="asn1"),i.string(e,"format");var t="ssh-"+this.type;switch(this.type){case"rsa":switch(this.hashAlgorithm){case"sha256":t="rsa-sha2-256";break;case"sha512":t="rsa-sha2-512";break;case"sha1":case void 0:break;default:throw new Error("SSH signature format does not support hash algorithm "+this.hashAlgorithm)}return"ssh"===e?((a=new c({})).writeString(t),a.writePart(this.part.sig),a.toBuffer()):this.part.sig.data;case"ed25519":return"ssh"===e?((a=new c({})).writeString(t),a.writePart(this.part.sig),a.toBuffer()):this.part.sig.data;case"dsa":case"ecdsa":var n,p;if("asn1"===e){var u=new s.BerWriter;return u.startSequence(),n=r.mpNormalize(this.part.r.data),p=r.mpNormalize(this.part.s.data),u.writeBuffer(n,s.Ber.Integer),u.writeBuffer(p,s.Ber.Integer),u.endSequence(),u.buffer}if("ssh"===e&&"dsa"===this.type){if((a=new c({})).writeString("ssh-dss"),(n=this.part.r.data).length>20&&0===n[0]&&(n=n.slice(1)),(p=this.part.s.data).length>20&&0===p[0]&&(p=p.slice(1)),this.hashAlgorithm&&"sha1"!==this.hashAlgorithm||n.length+p.length!==40)throw new Error("OpenSSH only supports DSA signatures with SHA1 hash");return a.writeBuffer(o.concat([n,p])),a.toBuffer()}if("ssh"===e&&"ecdsa"===this.type){var l,m=new c({});n=this.part.r.data,m.writeBuffer(n),m.writePart(this.part.s),a=new c({}),0===n[0]&&(n=n.slice(1));var d=8*n.length;return 256===d?l="nistp256":384===d?l="nistp384":528===d&&(l="nistp521"),a.writeString("ecdsa-sha2-"+l),a.writeBuffer(m.toBuffer()),a.toBuffer()}throw new Error("Invalid signature format");default:throw new Error("Invalid signature data")}},l.prototype.toString=function(e){return i.optionalString(e,"format"),this.toBuffer(e).toString("base64")},l.parse=function(e,a,t){"string"==typeof e&&(e=o.from(e,"base64")),i.buffer(e,"data"),i.string(t,"format"),i.string(a,"type");var n={};n.type=a.toLowerCase(),n.parts=[];try{switch(i.ok(e.length>0,"signature must not be empty"),n.type){case"rsa":case"ed25519":return m(e,a,t,n);case"dsa":case"ecdsa":return"asn1"===t?function(e,a,t,i){var o=new s.BerReader(e);o.readSequence();var n=o.readString(s.Ber.Integer,!0),c=o.readString(s.Ber.Integer,!0);return i.parts.push({name:"r",data:r.mpNormalize(n)}),i.parts.push({name:"s",data:r.mpNormalize(c)}),new l(i)}(e,0,0,n):"dsa"===n.type?function(e,a,t,o){if(40!=e.length){var n=new c({buffer:e}),r=n.readBuffer();"ssh-dss"===r.toString("ascii")&&(r=n.readBuffer()),i.ok(n.atEnd(),"extra trailing bytes"),i.strictEqual(r.length,40,"invalid inner length"),e=r}return o.parts.push({name:"r",data:e.slice(0,20)}),o.parts.push({name:"s",data:e.slice(20,40)}),new l(o)}(e,0,0,n):function(e,a,t,o){var n,r,s=new c({buffer:e}),p=s.readBuffer(),u=p.toString("ascii");if("ecdsa-"===u.slice(0,6)){var m=u.split("-");switch(i.strictEqual(m[0],"ecdsa"),i.strictEqual(m[1],"sha2"),o.curve=m[2],o.curve){case"nistp256":o.hashAlgo="sha256";break;case"nistp384":o.hashAlgo="sha384";break;case"nistp521":o.hashAlgo="sha512";break;default:throw new Error("Unsupported ECDSA curve: "+o.curve)}p=s.readBuffer(),i.ok(s.atEnd(),"extra trailing bytes on outer"),s=new c({buffer:p}),n=s.readPart()}else n={data:p};return r=s.readPart(),i.ok(s.atEnd(),"extra trailing bytes"),n.name="r",r.name="s",o.parts.push(n),o.parts.push(r),new l(o)}(e,0,0,n);default:throw new p(a)}}catch(e){if(e instanceof p)throw e;throw new u(a,t,e)}},l.isSignature=function(e,a){return r.isCompatible(e,l,a)},l.prototype._sshpkApiVersion=[2,1],l._oldVersionDetect=function(e){return i.func(e.toBuffer),e.hasOwnProperty("hashAlgorithm")?[2,0]:[1,0]}},function(e,a,t){var i=t(128);e.exports={Ber:i,BerReader:i.Reader,BerWriter:i.Writer}},function(e,a,t){e.exports={read:function(e,a,t){var c=e;"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var p,b,x=e.trim().split(/[\r\n]+/g),k=-1;for(;!p&&k<x.length;)p=x[++k].match(/[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);i.ok(p,"invalid PEM header");var w=x.length;for(;!b&&w>0;)b=x[--w].match(/[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);i.ok(b,"invalid PEM footer"),i.equal(p[2],b[2]);var j,E=p[2].toLowerCase();p[1]&&(i.equal(p[1],b[1],"PEM header and footer mismatch"),j=p[1].trim());x=x.slice(k,w+1);var S,_,R,A={};for(;x=x.slice(1),p=x[0].match(/^([A-Za-z0-9-]+): (.+)$/);)A[p[1].toLowerCase()]=p[2];if(x=x.slice(0,-1).join(""),e=r.from(x,"base64"),A["proc-type"]){var C=A["proc-type"].split(",");if("4"===C[0]&&"ENCRYPTED"===C[1]){if("string"==typeof a.passphrase&&(a.passphrase=r.from(a.passphrase,"utf-8")),!r.isBuffer(a.passphrase))throw new h.KeyEncryptedError(a.filename,"PEM");C=A["dek-info"].split(","),i.ok(2===C.length),S=C[0].toLowerCase(),R=r.from(C[1],"hex"),_=s.opensslKeyDeriv(S,R,a.passphrase,1).key}}if(j&&"encrypted"===j.toLowerCase()){var q,O=new o.BerReader(e);O.readSequence(),O.readSequence(),q=O.offset+O.length;var z=O.readOID();if(z!==f)throw new Error("Unsupported PEM/PKCS8 encryption scheme: "+z);O.readSequence(),O.readSequence();var P=O.offset+O.length,F=O.readOID();if(F!==v)throw new Error("Unsupported PBES2 KDF: "+F);O.readSequence();var T=O.readString(o.Ber.OctetString,!0),I=O.readInt(),D="sha1";if(O.offset<P){O.readSequence();var B=O.readOID();if(void 0===(D=y[B]))throw new Error("Unsupported PBKDF2 hash: "+B)}O._offset=P,O.readSequence();var L=O.readOID();if(void 0===(S=g[L]))throw new Error("Unsupported PBES2 cipher: "+L);if(R=O.readString(o.Ber.OctetString,!0),O._offset=q,e=O.readString(o.Ber.OctetString,!0),"string"==typeof a.passphrase&&(a.passphrase=r.from(a.passphrase,"utf-8")),!r.isBuffer(a.passphrase))throw new h.KeyEncryptedError(a.filename,"PEM");var U=s.opensshCipherInfo(S);S=U.opensslName,_=s.pbkdf2(D,T,I,U.keySize,a.passphrase),j=void 0}if(S&&_&&R){var N,H=n.createDecipheriv(S,_,R),M=[];for(H.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),H.write(e),H.end();null!==(N=H.read());)M.push(N);e=r.concat(M)}if(j&&"openssh"===j.toLowerCase())return m.readSSHPrivate(E,e,a);if(j&&"ssh2"===j.toLowerCase())return d.readType(E,e,a);var K=new o.BerReader(e);return K.originalInput=c,K.readSequence(),j?(t&&i.strictEqual(t,"pkcs1"),u.readPkcs1(j,E,K)):(t&&i.strictEqual(t,"pkcs8"),l.readPkcs8(j,E,K))},write:function(e,a,t){i.object(e);var n,s={ecdsa:"EC",rsa:"RSA",dsa:"DSA",ed25519:"EdDSA"}[e.type],m=new o.BerWriter;if(p.isPrivateKey(e))t&&"pkcs8"===t?(n="PRIVATE KEY",l.writePkcs8(m,e)):(t&&i.strictEqual(t,"pkcs1"),n=s+" PRIVATE KEY",u.writePkcs1(m,e));else{if(!c.isKey(e))throw new Error("key is not a Key or PrivateKey");t&&"pkcs1"===t?(n=s+" PUBLIC KEY",u.writePkcs1(m,e)):(t&&i.strictEqual(t,"pkcs8"),n="PUBLIC KEY",l.writePkcs8(m,e))}var d=m.buffer.toString("base64"),h=d.length+d.length/64+18+16+2*n.length+10,f=r.alloc(h),v=0;v+=f.write("-----BEGIN "+n+"-----\n",v);for(var g=0;g<d.length;){var b=g+64;b>d.length&&(b=d.length),v+=f.write(d.slice(g,b),v),f[v++]=10,g=b}return v+=f.write("-----END "+n+"-----\n",v),f.slice(0,v)}};var i=t(0),o=t(14),n=t(2),r=t(3).Buffer,s=(t(7),t(5)),c=t(4),p=t(6),u=t(45),l=t(28),m=t(35),d=t(16),h=t(10),f="1.2.840.113549.1.5.13",v="1.2.840.113549.1.5.12",g={"1.2.840.113549.3.7":"3des-cbc","2.16.840.1.101.3.4.1.2":"aes128-cbc","2.16.840.1.101.3.4.1.42":"aes256-cbc"},b={};Object.keys(g).forEach(function(e){b[g[e]]=e});var y={"1.2.840.113549.2.7":"sha1","1.2.840.113549.2.9":"sha256","1.2.840.113549.2.11":"sha512"},x={};Object.keys(y).forEach(function(e){x[y[e]]=e})},function(e,a,t){e.exports={read:m.bind(void 0,!1,void 0),readType:m.bind(void 0,!1),write:function(e,a){i.object(e);var t,s=l(e),u=n.info[e.type];c.isPrivateKey(e)&&(u=n.privInfo[e.type]);var m=u.parts,d=new p({});for(d.writeString(s),t=0;t<m.length;++t){var h=e.part[m[t]].data;!1!==u.normalize&&(h="ed25519"===e.type?r.zeroPadToLength(h,32):r.mpNormalize(h)),"ed25519"===e.type&&"k"===m[t]&&(h=o.concat([h,e.part.A.data])),d.writeBuffer(h)}return d.toBuffer()},readPartial:m.bind(void 0,!0),readInternal:m,keyTypeToAlg:l,algToKeyType:u};var i=t(0),o=t(3).Buffer,n=t(7),r=t(5),s=t(4),c=t(6),p=t(27);function u(e){if(i.string(e),"ssh-dss"===e)return"dsa";if("ssh-rsa"===e)return"rsa";if("ssh-ed25519"===e)return"ed25519";if("ssh-curve25519"===e)return"curve25519";if(e.match(/^ecdsa-sha2-/))return"ecdsa";throw new Error("Unknown algorithm "+e)}function l(e){if(i.object(e),"dsa"===e.type)return"ssh-dss";if("rsa"===e.type)return"ssh-rsa";if("ed25519"===e.type)return"ssh-ed25519";if("curve25519"===e.type)return"ssh-curve25519";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.part.curve.data.toString();throw new Error("Unknown key type "+e.type)}function m(e,a,t,l){"string"==typeof t&&(t=o.from(t)),i.buffer(t,"buf");var m={},d=m.parts=[],h=new p({buffer:t}),f=h.readString();i.ok(!h.atEnd(),"key must have at least one part"),m.type=u(f);var v=n.info[m.type].parts.length;for(a&&"private"===a&&(v=n.privInfo[m.type].parts.length);!h.atEnd()&&d.length<v;)d.push(h.readPart());for(;!e&&!h.atEnd();)d.push(h.readPart());i.ok(d.length>=1,"key must have at least one part"),i.ok(e||h.atEnd(),"leftover bytes at end of key");var g=s,b=n.info[m.type];if("private"!==a&&b.parts.length===d.length||(b=n.privInfo[m.type],g=c),i.strictEqual(b.parts.length,d.length),"ecdsa"===m.type){var y=/^ecdsa-sha2-(.+)$/.exec(f);i.ok(null!==y),i.strictEqual(y[1],d[0].data.toString())}for(var x=!0,k=0;k<b.parts.length;++k){var w,j=d[k];if(j.name=b.parts[k],"ed25519"===m.type&&"k"===j.name&&(j.data=j.data.slice(0,32)),"curve"!==j.name&&!1!==b.normalize)(w="ed25519"===m.type?r.zeroPadToLength(j.data,32):r.mpNormalize(j.data)).toString("binary")!==j.data.toString("binary")&&(j.data=w,x=!1)}return x&&(m._rfc4253Cache=h.toBuffer()),e&&"object"==typeof e&&(e.remainder=h.remainder(),e.consumed=h._offset),new g(m)}},function(e,a){e.exports=require("http")},function(e,a){e.exports=require("https")},function(e,a){e.exports=require("stream")},function(e,a){e.exports=require("assert")},function(e,a,t){"use strict";function i(e,a,t){var i=t?" !== ":" === ",o=t?" || ":" && ",n=t?"!":"",r=t?"":"!";switch(e){case"null":return a+i+"null";case"array":return n+"Array.isArray("+a+")";case"object":return"("+n+a+o+"typeof "+a+i+'"object"'+o+r+"Array.isArray("+a+"))";case"integer":return"(typeof "+a+i+'"number"'+o+r+"("+a+" % 1)"+o+a+i+a+")";default:return"typeof "+a+i+'"'+e+'"'}}e.exports={copy:function(e,a){for(var t in a=a||{},e)a[t]=e[t];return a},checkDataType:i,checkDataTypes:function(e,a){switch(e.length){case 1:return i(e[0],a,!0);default:var t="",o=n(e);for(var r in o.array&&o.object&&(t=o.null?"(":"(!"+a+" || ",t+="typeof "+a+' !== "object")',delete o.null,delete o.array,delete o.object),o.number&&delete o.integer,o)t+=(t?" && ":"")+i(r,a,!0);return t}},coerceToTypes:function(e,a){if(Array.isArray(a)){for(var t=[],i=0;i<a.length;i++){var n=a[i];o[n]?t[t.length]=n:"array"===e&&"array"===n&&(t[t.length]=n)}if(t.length)return t}else{if(o[a])return[a];if("array"===e&&"array"===a)return["array"]}},toHash:n,getProperty:c,escapeQuotes:p,equal:t(49),ucs2length:t(164),varOccurences:function(e,a){a+="[^0-9]";var t=e.match(new RegExp(a,"g"));return t?t.length:0},varReplace:function(e,a,t){return a+="([^0-9])",t=t.replace(/\$/g,"$$$$"),e.replace(new RegExp(a,"g"),t+"$1")},cleanUpCode:function(e){return e.replace(u,"").replace(l,"").replace(m,"if (!($1))")},finalCleanUpCode:function(e,a){var t=e.match(d);t&&2==t.length&&(e=a?e.replace(f,"").replace(b,y):e.replace(h,"").replace(v,g));return(t=e.match(x))&&3===t.length?e.replace(k,""):e},schemaHasRules:function(e,a){if("boolean"==typeof e)return!e;for(var t in e)if(a[t])return!0},schemaHasRulesExcept:function(e,a,t){if("boolean"==typeof e)return!e&&"not"!=t;for(var i in e)if(i!=t&&a[i])return!0},toQuotedString:w,getPathExpr:function(e,a,t,i){return S(e,t?"'/' + "+a+(i?"":".replace(/~/g, '~0').replace(/\\//g, '~1')"):i?"'[' + "+a+" + ']'":"'[\\'' + "+a+" + '\\']'")},getPath:function(e,a,t){var i=w(t?"/"+_(a):c(a));return S(e,i)},getData:function(e,a,t){var i,o,n,r;if(""===e)return"rootData";if("/"==e[0]){if(!j.test(e))throw new Error("Invalid JSON-pointer: "+e);o=e,n="rootData"}else{if(!(r=e.match(E)))throw new Error("Invalid JSON-pointer: "+e);if(i=+r[1],"#"==(o=r[2])){if(i>=a)throw new Error("Cannot access property/index "+i+" levels up, current level is "+a);return t[a-i]}if(i>a)throw new Error("Cannot access data "+i+" levels up, current level is "+a);if(n="data"+(a-i||""),!o)return n}for(var s=n,p=o.split("/"),u=0;u<p.length;u++){var l=p[u];l&&(n+=c(R(l)),s+=" && "+n)}return s},unescapeFragment:function(e){return R(decodeURIComponent(e))},unescapeJsonPointer:R,escapeFragment:function(e){return encodeURIComponent(_(e))},escapeJsonPointer:_};var o=n(["string","number","integer","boolean","null"]);function n(e){for(var a={},t=0;t<e.length;t++)a[e[t]]=!0;return a}var r=/^[a-z$_][a-z$_0-9]*$/i,s=/'|\\/g;function c(e){return"number"==typeof e?"["+e+"]":r.test(e)?"."+e:"['"+p(e)+"']"}function p(e){return e.replace(s,"\\$&").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\f/g,"\\f").replace(/\t/g,"\\t")}var u=/else\s*{\s*}/g,l=/if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,m=/if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;var d=/[^v.]errors/g,h=/var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,f=/var errors = 0;|var vErrors = null;/g,v="return errors === 0;",g="validate.errors = null; return true;",b=/if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/,y="return data;",x=/[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g,k=/if \(rootData === undefined\) rootData = data;/;function w(e){return"'"+p(e)+"'"}var j=/^\/(?:[^~]|~0|~1)*$/,E=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function S(e,a){return'""'==e?a:(e+" + "+a).replace(/' \+ '/g,"")}function _(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}function R(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}},function(e,a,t){var i=t(59),o=i.Buffer;function n(e,a){for(var t in e)a[t]=e[t]}function r(e,a,t){return o(e,a,t)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?e.exports=i:(n(i,a),a.Buffer=r),n(o,r),r.from=function(e,a,t){if("number"==typeof e)throw new TypeError("Argument must not be a number");return o(e,a,t)},r.alloc=function(e,a,t){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=o(e);return void 0!==a?"string"==typeof t?i.fill(a,t):i.fill(a):i.fill(0),i},r.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return o(e)},r.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,a){e.exports=require("querystring")},function(e,a,t){e.exports=h;var i=t(0),o=t(3).Buffer,n=t(7),r=t(2),s=t(10),c=t(4),p=t(6),u=t(29),l=t(5),m=s.FingerprintFormatError,d=s.InvalidAlgorithmError;function h(e){if(i.object(e,"options"),i.string(e.type,"options.type"),i.buffer(e.hash,"options.hash"),i.string(e.algorithm,"options.algorithm"),this.algorithm=e.algorithm.toLowerCase(),!0!==n.hashAlgs[this.algorithm])throw new d(this.algorithm);this.hash=e.hash,this.type=e.type,this.hashType=e.hashType}h.prototype.toString=function(e){switch(void 0===e&&(e="md5"===this.algorithm||"spki"===this.hashType?"hex":"base64"),i.string(e),e){case"hex":return"spki"===this.hashType?this.hash.toString("hex"):this.hash.toString("hex").replace(/(.{2})(?=.)/g,"$1:");case"base64":return"spki"===this.hashType?this.hash.toString("base64"):function(e,a){return e.toUpperCase()+":"+(t=a,t.replace(/=*$/,""));var t}(this.algorithm,this.hash.toString("base64"));default:throw new m(void 0,e)}},h.prototype.matches=function(e){i.object(e,"key or certificate"),"key"===this.type&&"ssh"!==this.hashType?(l.assertCompatible(e,c,[1,7],"key with spki"),p.isPrivateKey(e)&&l.assertCompatible(e,p,[1,6],"privatekey with spki support")):"key"===this.type?l.assertCompatible(e,c,[1,0],"key"):l.assertCompatible(e,u,[1,0],"certificate");var a=e.hash(this.algorithm,this.hashType),t=r.createHash(this.algorithm).update(a).digest("base64");return void 0===this.hash2&&(this.hash2=r.createHash(this.algorithm).update(this.hash).digest("base64")),this.hash2===t};var f=/^[A-Za-z0-9+\/=]+$/,v=/^[a-fA-F0-9]+$/;h.parse=function(e,a){var t,r,s;i.string(e,"fingerprint"),Array.isArray(a)&&(s=a,a={}),i.optionalObject(a,"options"),void 0===a&&(a={}),void 0!==a.enAlgs&&(s=a.enAlgs),void 0!==a.algorithms&&(s=a.algorithms),i.optionalArrayOfString(s,"algorithms");var c="ssh";void 0!==a.hashType&&(c=a.hashType),i.string(c,"options.hashType");var p=e.split(":");if(2==p.length){if(t=p[0].toLowerCase(),!f.test(p[1]))throw new m(e);try{r=o.from(p[1],"base64")}catch(a){throw new m(e)}}else if(p.length>2){if(t="md5","md5"===p[0].toLowerCase()&&(p=p.slice(1)),p=(p=p.map(function(a){for(;a.length<2;)a="0"+a;if(a.length>2)throw new m(e);return a})).join(""),!v.test(p)||p.length%2!=0)throw new m(e);try{r=o.from(p,"hex")}catch(a){throw new m(e)}}else{if(v.test(e))r=o.from(e,"hex");else{if(!f.test(e))throw new m(e);r=o.from(e,"base64")}switch(r.length){case 32:t="sha256";break;case 16:t="md5";break;case 20:t="sha1";break;case 64:t="sha512";break;default:throw new m(e)}void 0===a.hashType&&(c="spki")}if(void 0===t)throw new m(e);if(void 0===n.hashAlgs[t])throw new d(t);if(void 0!==s&&-1===(s=s.map(function(e){return e.toLowerCase()})).indexOf(t))throw new d(t);return new h({algorithm:t,hash:r,type:a.type||"key",hashType:c})},h.isFingerprint=function(e,a){return l.isCompatible(e,h,a)},h.prototype._sshpkApiVersion=[1,2],h._oldVersionDetect=function(e){return i.func(e.toString),i.func(e.matches),[1,0]}},function(e,a,t){(function(){var a;function t(e,a,t){null!=e&&("number"==typeof e?this.fromNumber(e,a,t):null==a&&"string"!=typeof e?this.fromString(e,256):this.fromString(e,a))}function i(){return new t(null)}var o="undefined"!=typeof navigator;o&&"Microsoft Internet Explorer"==navigator.appName?(t.prototype.am=function(e,a,t,i,o,n){for(var r=32767&a,s=a>>15;--n>=0;){var c=32767&this[e],p=this[e++]>>15,u=s*c+p*r;o=((c=r*c+((32767&u)<<15)+t[i]+(1073741823&o))>>>30)+(u>>>15)+s*p+(o>>>30),t[i++]=1073741823&c}return o},a=30):o&&"Netscape"!=navigator.appName?(t.prototype.am=function(e,a,t,i,o,n){for(;--n>=0;){var r=a*this[e++]+t[i]+o;o=Math.floor(r/67108864),t[i++]=67108863&r}return o},a=26):(t.prototype.am=function(e,a,t,i,o,n){for(var r=16383&a,s=a>>14;--n>=0;){var c=16383&this[e],p=this[e++]>>14,u=s*c+p*r;o=((c=r*c+((16383&u)<<14)+t[i]+o)>>28)+(u>>14)+s*p,t[i++]=268435455&c}return o},a=28),t.prototype.DB=a,t.prototype.DM=(1<<a)-1,t.prototype.DV=1<<a;t.prototype.FV=Math.pow(2,52),t.prototype.F1=52-a,t.prototype.F2=2*a-52;var n,r,s="0123456789abcdefghijklmnopqrstuvwxyz",c=new Array;for(n="0".charCodeAt(0),r=0;r<=9;++r)c[n++]=r;for(n="a".charCodeAt(0),r=10;r<36;++r)c[n++]=r;for(n="A".charCodeAt(0),r=10;r<36;++r)c[n++]=r;function p(e){return s.charAt(e)}function u(e,a){var t=c[e.charCodeAt(a)];return null==t?-1:t}function l(e){var a=i();return a.fromInt(e),a}function m(e){var a,t=1;return 0!=(a=e>>>16)&&(e=a,t+=16),0!=(a=e>>8)&&(e=a,t+=8),0!=(a=e>>4)&&(e=a,t+=4),0!=(a=e>>2)&&(e=a,t+=2),0!=(a=e>>1)&&(e=a,t+=1),t}function d(e){this.m=e}function h(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function f(e,a){return e&a}function v(e,a){return e|a}function g(e,a){return e^a}function b(e,a){return e&~a}function y(e){if(0==e)return-1;var a=0;return 0==(65535&e)&&(e>>=16,a+=16),0==(255&e)&&(e>>=8,a+=8),0==(15&e)&&(e>>=4,a+=4),0==(3&e)&&(e>>=2,a+=2),0==(1&e)&&++a,a}function x(e){for(var a=0;0!=e;)e&=e-1,++a;return a}function k(){}function w(e){return e}function j(e){this.r2=i(),this.q3=i(),t.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e),this.m=e}d.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},d.prototype.revert=function(e){return e},d.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},d.prototype.mulTo=function(e,a,t){e.multiplyTo(a,t),this.reduce(t)},d.prototype.sqrTo=function(e,a){e.squareTo(a),this.reduce(a)},h.prototype.convert=function(e){var a=i();return e.abs().dlShiftTo(this.m.t,a),a.divRemTo(this.m,null,a),e.s<0&&a.compareTo(t.ZERO)>0&&this.m.subTo(a,a),a},h.prototype.revert=function(e){var a=i();return e.copyTo(a),this.reduce(a),a},h.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var a=0;a<this.m.t;++a){var t=32767&e[a],i=t*this.mpl+((t*this.mph+(e[a]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[t=a+this.m.t]+=this.m.am(0,i,e,a,0,this.m.t);e[t]>=e.DV;)e[t]-=e.DV,e[++t]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},h.prototype.mulTo=function(e,a,t){e.multiplyTo(a,t),this.reduce(t)},h.prototype.sqrTo=function(e,a){e.squareTo(a),this.reduce(a)},t.prototype.copyTo=function(e){for(var a=this.t-1;a>=0;--a)e[a]=this[a];e.t=this.t,e.s=this.s},t.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},t.prototype.fromString=function(e,a){var i;if(16==a)i=4;else if(8==a)i=3;else if(256==a)i=8;else if(2==a)i=1;else if(32==a)i=5;else{if(4!=a)return void this.fromRadix(e,a);i=2}this.t=0,this.s=0;for(var o=e.length,n=!1,r=0;--o>=0;){var s=8==i?255&e[o]:u(e,o);s<0?"-"==e.charAt(o)&&(n=!0):(n=!1,0==r?this[this.t++]=s:r+i>this.DB?(this[this.t-1]|=(s&(1<<this.DB-r)-1)<<r,this[this.t++]=s>>this.DB-r):this[this.t-1]|=s<<r,(r+=i)>=this.DB&&(r-=this.DB))}8==i&&0!=(128&e[0])&&(this.s=-1,r>0&&(this[this.t-1]|=(1<<this.DB-r)-1<<r)),this.clamp(),n&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},t.prototype.dlShiftTo=function(e,a){var t;for(t=this.t-1;t>=0;--t)a[t+e]=this[t];for(t=e-1;t>=0;--t)a[t]=0;a.t=this.t+e,a.s=this.s},t.prototype.drShiftTo=function(e,a){for(var t=e;t<this.t;++t)a[t-e]=this[t];a.t=Math.max(this.t-e,0),a.s=this.s},t.prototype.lShiftTo=function(e,a){var t,i=e%this.DB,o=this.DB-i,n=(1<<o)-1,r=Math.floor(e/this.DB),s=this.s<<i&this.DM;for(t=this.t-1;t>=0;--t)a[t+r+1]=this[t]>>o|s,s=(this[t]&n)<<i;for(t=r-1;t>=0;--t)a[t]=0;a[r]=s,a.t=this.t+r+1,a.s=this.s,a.clamp()},t.prototype.rShiftTo=function(e,a){a.s=this.s;var t=Math.floor(e/this.DB);if(t>=this.t)a.t=0;else{var i=e%this.DB,o=this.DB-i,n=(1<<i)-1;a[0]=this[t]>>i;for(var r=t+1;r<this.t;++r)a[r-t-1]|=(this[r]&n)<<o,a[r-t]=this[r]>>i;i>0&&(a[this.t-t-1]|=(this.s&n)<<o),a.t=this.t-t,a.clamp()}},t.prototype.subTo=function(e,a){for(var t=0,i=0,o=Math.min(e.t,this.t);t<o;)i+=this[t]-e[t],a[t++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i-=e.s;t<this.t;)i+=this[t],a[t++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;t<e.t;)i-=e[t],a[t++]=i&this.DM,i>>=this.DB;i-=e.s}a.s=i<0?-1:0,i<-1?a[t++]=this.DV+i:i>0&&(a[t++]=i),a.t=t,a.clamp()},t.prototype.multiplyTo=function(e,a){var i=this.abs(),o=e.abs(),n=i.t;for(a.t=n+o.t;--n>=0;)a[n]=0;for(n=0;n<o.t;++n)a[n+i.t]=i.am(0,o[n],a,n,0,i.t);a.s=0,a.clamp(),this.s!=e.s&&t.ZERO.subTo(a,a)},t.prototype.squareTo=function(e){for(var a=this.abs(),t=e.t=2*a.t;--t>=0;)e[t]=0;for(t=0;t<a.t-1;++t){var i=a.am(t,a[t],e,2*t,0,1);(e[t+a.t]+=a.am(t+1,2*a[t],e,2*t+1,i,a.t-t-1))>=a.DV&&(e[t+a.t]-=a.DV,e[t+a.t+1]=1)}e.t>0&&(e[e.t-1]+=a.am(t,a[t],e,2*t,0,1)),e.s=0,e.clamp()},t.prototype.divRemTo=function(e,a,o){var n=e.abs();if(!(n.t<=0)){var r=this.abs();if(r.t<n.t)return null!=a&&a.fromInt(0),void(null!=o&&this.copyTo(o));null==o&&(o=i());var s=i(),c=this.s,p=e.s,u=this.DB-m(n[n.t-1]);u>0?(n.lShiftTo(u,s),r.lShiftTo(u,o)):(n.copyTo(s),r.copyTo(o));var l=s.t,d=s[l-1];if(0!=d){var h=d*(1<<this.F1)+(l>1?s[l-2]>>this.F2:0),f=this.FV/h,v=(1<<this.F1)/h,g=1<<this.F2,b=o.t,y=b-l,x=null==a?i():a;for(s.dlShiftTo(y,x),o.compareTo(x)>=0&&(o[o.t++]=1,o.subTo(x,o)),t.ONE.dlShiftTo(l,x),x.subTo(s,s);s.t<l;)s[s.t++]=0;for(;--y>=0;){var k=o[--b]==d?this.DM:Math.floor(o[b]*f+(o[b-1]+g)*v);if((o[b]+=s.am(0,k,o,y,0,l))<k)for(s.dlShiftTo(y,x),o.subTo(x,o);o[b]<--k;)o.subTo(x,o)}null!=a&&(o.drShiftTo(l,a),c!=p&&t.ZERO.subTo(a,a)),o.t=l,o.clamp(),u>0&&o.rShiftTo(u,o),c<0&&t.ZERO.subTo(o,o)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var a=3&e;return(a=(a=(a=(a=a*(2-(15&e)*a)&15)*(2-(255&e)*a)&255)*(2-((65535&e)*a&65535))&65535)*(2-e*a%this.DV)%this.DV)>0?this.DV-a:-a},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,a){if(e>4294967295||e<1)return t.ONE;var o=i(),n=i(),r=a.convert(this),s=m(e)-1;for(r.copyTo(o);--s>=0;)if(a.sqrTo(o,n),(e&1<<s)>0)a.mulTo(n,r,o);else{var c=o;o=n,n=c}return a.revert(o)},t.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var a;if(16==e)a=4;else if(8==e)a=3;else if(2==e)a=1;else if(32==e)a=5;else{if(4!=e)return this.toRadix(e);a=2}var t,i=(1<<a)-1,o=!1,n="",r=this.t,s=this.DB-r*this.DB%a;if(r-- >0)for(s<this.DB&&(t=this[r]>>s)>0&&(o=!0,n=p(t));r>=0;)s<a?(t=(this[r]&(1<<s)-1)<<a-s,t|=this[--r]>>(s+=this.DB-a)):(t=this[r]>>(s-=a)&i,s<=0&&(s+=this.DB,--r)),t>0&&(o=!0),o&&(n+=p(t));return o?n:"0"},t.prototype.negate=function(){var e=i();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(e){var a=this.s-e.s;if(0!=a)return a;var t=this.t;if(0!=(a=t-e.t))return this.s<0?-a:a;for(;--t>=0;)if(0!=(a=this[t]-e[t]))return a;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+m(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var a=i();return this.abs().divRemTo(e,null,a),this.s<0&&a.compareTo(t.ZERO)>0&&e.subTo(a,a),a},t.prototype.modPowInt=function(e,a){var t;return t=e<256||a.isEven()?new d(a):new h(a),this.exp(e,t)},t.ZERO=l(0),t.ONE=l(1),k.prototype.convert=w,k.prototype.revert=w,k.prototype.mulTo=function(e,a,t){e.multiplyTo(a,t)},k.prototype.sqrTo=function(e,a){e.squareTo(a)},j.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var a=i();return e.copyTo(a),this.reduce(a),a},j.prototype.revert=function(e){return e},j.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);e.compareTo(this.m)>=0;)e.subTo(this.m,e)},j.prototype.mulTo=function(e,a,t){e.multiplyTo(a,t),this.reduce(t)},j.prototype.sqrTo=function(e,a){e.squareTo(a),this.reduce(a)};var E,S,_,R=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],A=(1<<26)/R[R.length-1];function C(){var e;e=(new Date).getTime(),S[_++]^=255&e,S[_++]^=e>>8&255,S[_++]^=e>>16&255,S[_++]^=e>>24&255,_>=I&&(_-=I)}if(t.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},t.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||e>36)return"0";var a=this.chunkSize(e),t=Math.pow(e,a),o=l(t),n=i(),r=i(),s="";for(this.divRemTo(o,n,r);n.signum()>0;)s=(t+r.intValue()).toString(e).substr(1)+s,n.divRemTo(o,n,r);return r.intValue().toString(e)+s},t.prototype.fromRadix=function(e,a){this.fromInt(0),null==a&&(a=10);for(var i=this.chunkSize(a),o=Math.pow(a,i),n=!1,r=0,s=0,c=0;c<e.length;++c){var p=u(e,c);p<0?"-"==e.charAt(c)&&0==this.signum()&&(n=!0):(s=a*s+p,++r>=i&&(this.dMultiply(o),this.dAddOffset(s,0),r=0,s=0))}r>0&&(this.dMultiply(Math.pow(a,r)),this.dAddOffset(s,0)),n&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,a,i){if("number"==typeof a)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),v,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(a);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=new Array,n=7&e;o.length=1+(e>>3),a.nextBytes(o),n>0?o[0]&=(1<<n)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(e,a,t){var i,o,n=Math.min(e.t,this.t);for(i=0;i<n;++i)t[i]=a(this[i],e[i]);if(e.t<this.t){for(o=e.s&this.DM,i=n;i<this.t;++i)t[i]=a(this[i],o);t.t=this.t}else{for(o=this.s&this.DM,i=n;i<e.t;++i)t[i]=a(o,e[i]);t.t=e.t}t.s=a(this.s,e.s),t.clamp()},t.prototype.changeBit=function(e,a){var i=t.ONE.shiftLeft(e);return this.bitwiseTo(i,a,i),i},t.prototype.addTo=function(e,a){for(var t=0,i=0,o=Math.min(e.t,this.t);t<o;)i+=this[t]+e[t],a[t++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i+=e.s;t<this.t;)i+=this[t],a[t++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;t<e.t;)i+=e[t],a[t++]=i&this.DM,i>>=this.DB;i+=e.s}a.s=i<0?-1:0,i>0?a[t++]=i:i<-1&&(a[t++]=this.DV+i),a.t=t,a.clamp()},t.prototype.dMultiply=function(e){this[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(e,a){if(0!=e){for(;this.t<=a;)this[this.t++]=0;for(this[a]+=e;this[a]>=this.DV;)this[a]-=this.DV,++a>=this.t&&(this[this.t++]=0),++this[a]}},t.prototype.multiplyLowerTo=function(e,a,t){var i,o=Math.min(this.t+e.t,a);for(t.s=0,t.t=o;o>0;)t[--o]=0;for(i=t.t-this.t;o<i;++o)t[o+this.t]=this.am(0,e[o],t,o,0,this.t);for(i=Math.min(e.t,a);o<i;++o)this.am(0,e[o],t,o,0,a-o);t.clamp()},t.prototype.multiplyUpperTo=function(e,a,t){--a;var i=t.t=this.t+e.t-a;for(t.s=0;--i>=0;)t[i]=0;for(i=Math.max(a-this.t,0);i<e.t;++i)t[this.t+i-a]=this.am(a-i,e[i],t,0,0,this.t+i-a);t.clamp(),t.drShiftTo(1,t)},t.prototype.modInt=function(e){if(e<=0)return 0;var a=this.DV%e,t=this.s<0?e-1:0;if(this.t>0)if(0==a)t=this[0]%e;else for(var i=this.t-1;i>=0;--i)t=(a*t+this[i])%e;return t},t.prototype.millerRabin=function(e){var a=this.subtract(t.ONE),o=a.getLowestSetBit();if(o<=0)return!1;var n=a.shiftRight(o);(e=e+1>>1)>R.length&&(e=R.length);for(var r=i(),s=0;s<e;++s){r.fromInt(R[Math.floor(Math.random()*R.length)]);var c=r.modPow(n,this);if(0!=c.compareTo(t.ONE)&&0!=c.compareTo(a)){for(var p=1;p++<o&&0!=c.compareTo(a);)if(0==(c=c.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=c.compareTo(a))return!1}}return!0},t.prototype.clone=function(){var e=i();return this.copyTo(e),e},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var e=this.t,a=new Array;a[0]=this.s;var t,i=this.DB-e*this.DB%8,o=0;if(e-- >0)for(i<this.DB&&(t=this[e]>>i)!=(this.s&this.DM)>>i&&(a[o++]=t|this.s<<this.DB-i);e>=0;)i<8?(t=(this[e]&(1<<i)-1)<<8-i,t|=this[--e]>>(i+=this.DB-8)):(t=this[e]>>(i-=8)&255,i<=0&&(i+=this.DB,--e)),0!=(128&t)&&(t|=-256),0==o&&(128&this.s)!=(128&t)&&++o,(o>0||t!=this.s)&&(a[o++]=t);return a},t.prototype.equals=function(e){return 0==this.compareTo(e)},t.prototype.min=function(e){return this.compareTo(e)<0?this:e},t.prototype.max=function(e){return this.compareTo(e)>0?this:e},t.prototype.and=function(e){var a=i();return this.bitwiseTo(e,f,a),a},t.prototype.or=function(e){var a=i();return this.bitwiseTo(e,v,a),a},t.prototype.xor=function(e){var a=i();return this.bitwiseTo(e,g,a),a},t.prototype.andNot=function(e){var a=i();return this.bitwiseTo(e,b,a),a},t.prototype.not=function(){for(var e=i(),a=0;a<this.t;++a)e[a]=this.DM&~this[a];return e.t=this.t,e.s=~this.s,e},t.prototype.shiftLeft=function(e){var a=i();return e<0?this.rShiftTo(-e,a):this.lShiftTo(e,a),a},t.prototype.shiftRight=function(e){var a=i();return e<0?this.lShiftTo(-e,a):this.rShiftTo(e,a),a},t.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this[e])return e*this.DB+y(this[e]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var e=0,a=this.s&this.DM,t=0;t<this.t;++t)e+=x(this[t]^a);return e},t.prototype.testBit=function(e){var a=Math.floor(e/this.DB);return a>=this.t?0!=this.s:0!=(this[a]&1<<e%this.DB)},t.prototype.setBit=function(e){return this.changeBit(e,v)},t.prototype.clearBit=function(e){return this.changeBit(e,b)},t.prototype.flipBit=function(e){return this.changeBit(e,g)},t.prototype.add=function(e){var a=i();return this.addTo(e,a),a},t.prototype.subtract=function(e){var a=i();return this.subTo(e,a),a},t.prototype.multiply=function(e){var a=i();return this.multiplyTo(e,a),a},t.prototype.divide=function(e){var a=i();return this.divRemTo(e,a,null),a},t.prototype.remainder=function(e){var a=i();return this.divRemTo(e,null,a),a},t.prototype.divideAndRemainder=function(e){var a=i(),t=i();return this.divRemTo(e,a,t),new Array(a,t)},t.prototype.modPow=function(e,a){var t,o,n=e.bitLength(),r=l(1);if(n<=0)return r;t=n<18?1:n<48?3:n<144?4:n<768?5:6,o=n<8?new d(a):a.isEven()?new j(a):new h(a);var s=new Array,c=3,p=t-1,u=(1<<t)-1;if(s[1]=o.convert(this),t>1){var f=i();for(o.sqrTo(s[1],f);c<=u;)s[c]=i(),o.mulTo(f,s[c-2],s[c]),c+=2}var v,g,b=e.t-1,y=!0,x=i();for(n=m(e[b])-1;b>=0;){for(n>=p?v=e[b]>>n-p&u:(v=(e[b]&(1<<n+1)-1)<<p-n,b>0&&(v|=e[b-1]>>this.DB+n-p)),c=t;0==(1&v);)v>>=1,--c;if((n-=c)<0&&(n+=this.DB,--b),y)s[v].copyTo(r),y=!1;else{for(;c>1;)o.sqrTo(r,x),o.sqrTo(x,r),c-=2;c>0?o.sqrTo(r,x):(g=r,r=x,x=g),o.mulTo(x,s[v],r)}for(;b>=0&&0==(e[b]&1<<n);)o.sqrTo(r,x),g=r,r=x,x=g,--n<0&&(n=this.DB-1,--b)}return o.revert(r)},t.prototype.modInverse=function(e){var a=e.isEven();if(this.isEven()&&a||0==e.signum())return t.ZERO;for(var i=e.clone(),o=this.clone(),n=l(1),r=l(0),s=l(0),c=l(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),a?(n.isEven()&&r.isEven()||(n.addTo(this,n),r.subTo(e,r)),n.rShiftTo(1,n)):r.isEven()||r.subTo(e,r),r.rShiftTo(1,r);for(;o.isEven();)o.rShiftTo(1,o),a?(s.isEven()&&c.isEven()||(s.addTo(this,s),c.subTo(e,c)),s.rShiftTo(1,s)):c.isEven()||c.subTo(e,c),c.rShiftTo(1,c);i.compareTo(o)>=0?(i.subTo(o,i),a&&n.subTo(s,n),r.subTo(c,r)):(o.subTo(i,o),a&&s.subTo(n,s),c.subTo(r,c))}return 0!=o.compareTo(t.ONE)?t.ZERO:c.compareTo(e)>=0?c.subtract(e):c.signum()<0?(c.addTo(e,c),c.signum()<0?c.add(e):c):c},t.prototype.pow=function(e){return this.exp(e,new k)},t.prototype.gcd=function(e){var a=this.s<0?this.negate():this.clone(),t=e.s<0?e.negate():e.clone();if(a.compareTo(t)<0){var i=a;a=t,t=i}var o=a.getLowestSetBit(),n=t.getLowestSetBit();if(n<0)return a;for(o<n&&(n=o),n>0&&(a.rShiftTo(n,a),t.rShiftTo(n,t));a.signum()>0;)(o=a.getLowestSetBit())>0&&a.rShiftTo(o,a),(o=t.getLowestSetBit())>0&&t.rShiftTo(o,t),a.compareTo(t)>=0?(a.subTo(t,a),a.rShiftTo(1,a)):(t.subTo(a,t),t.rShiftTo(1,t));return n>0&&t.lShiftTo(n,t),t},t.prototype.isProbablePrime=function(e){var a,t=this.abs();if(1==t.t&&t[0]<=R[R.length-1]){for(a=0;a<R.length;++a)if(t[0]==R[a])return!0;return!1}if(t.isEven())return!1;for(a=1;a<R.length;){for(var i=R[a],o=a+1;o<R.length&&i<A;)i*=R[o++];for(i=t.modInt(i);a<o;)if(i%R[a++]==0)return!1}return t.millerRabin(e)},t.prototype.square=function(){var e=i();return this.squareTo(e),e},t.prototype.Barrett=j,null==S){var q;if(S=new Array,_=0,"undefined"!=typeof window&&window.crypto)if(window.crypto.getRandomValues){var O=new Uint8Array(32);for(window.crypto.getRandomValues(O),q=0;q<32;++q)S[_++]=O[q]}else if("Netscape"==navigator.appName&&navigator.appVersion<"5"){var z=window.crypto.random(32);for(q=0;q<z.length;++q)S[_++]=255&z.charCodeAt(q)}for(;_<I;)q=Math.floor(65536*Math.random()),S[_++]=q>>>8,S[_++]=255&q;_=0,C()}function P(){if(null==E){for(C(),(E=new T).init(S),_=0;_<S.length;++_)S[_]=0;_=0}return E.next()}function F(){}function T(){this.i=0,this.j=0,this.S=new Array}F.prototype.nextBytes=function(e){var a;for(a=0;a<e.length;++a)e[a]=P()},T.prototype.init=function(e){var a,t,i;for(a=0;a<256;++a)this.S[a]=a;for(t=0,a=0;a<256;++a)t=t+this.S[a]+e[a%e.length]&255,i=this.S[a],this.S[a]=this.S[t],this.S[t]=i;this.i=0,this.j=0},T.prototype.next=function(){var e;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,e=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=e,this.S[e+this.S[this.i]&255]};var I=256;t.SecureRandom=F,t.BigInteger=t,e.exports=t}).call(this)},function(e,a,t){!function(e){"use strict";var a=function(e){var a,t=new Float64Array(16);if(e)for(a=0;a<e.length;a++)t[a]=e[a];return t},i=function(){throw new Error("no PRNG")},o=new Uint8Array(16),n=new Uint8Array(32);n[0]=9;var r=a(),s=a([1]),c=a([56129,1]),p=a([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),u=a([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),l=a([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),m=a([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),d=a([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function h(e,a,t,i){e[a]=t>>24&255,e[a+1]=t>>16&255,e[a+2]=t>>8&255,e[a+3]=255&t,e[a+4]=i>>24&255,e[a+5]=i>>16&255,e[a+6]=i>>8&255,e[a+7]=255&i}function f(e,a,t,i,o){var n,r=0;for(n=0;n<o;n++)r|=e[a+n]^t[i+n];return(1&r-1>>>8)-1}function v(e,a,t,i){return f(e,a,t,i,16)}function g(e,a,t,i){return f(e,a,t,i,32)}function b(e,a,t,i){!function(e,a,t,i){for(var o,n=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,r=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,s=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,c=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,p=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,u=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,l=255&a[0]|(255&a[1])<<8|(255&a[2])<<16|(255&a[3])<<24,m=255&a[4]|(255&a[5])<<8|(255&a[6])<<16|(255&a[7])<<24,d=255&a[8]|(255&a[9])<<8|(255&a[10])<<16|(255&a[11])<<24,h=255&a[12]|(255&a[13])<<8|(255&a[14])<<16|(255&a[15])<<24,f=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,v=255&t[16]|(255&t[17])<<8|(255&t[18])<<16|(255&t[19])<<24,g=255&t[20]|(255&t[21])<<8|(255&t[22])<<16|(255&t[23])<<24,b=255&t[24]|(255&t[25])<<8|(255&t[26])<<16|(255&t[27])<<24,y=255&t[28]|(255&t[29])<<8|(255&t[30])<<16|(255&t[31])<<24,x=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,k=n,w=r,j=s,E=c,S=p,_=u,R=l,A=m,C=d,q=h,O=f,z=v,P=g,F=b,T=y,I=x,D=0;D<20;D+=2)k^=(o=(P^=(o=(C^=(o=(S^=(o=k+P|0)<<7|o>>>25)+k|0)<<9|o>>>23)+S|0)<<13|o>>>19)+C|0)<<18|o>>>14,_^=(o=(w^=(o=(F^=(o=(q^=(o=_+w|0)<<7|o>>>25)+_|0)<<9|o>>>23)+q|0)<<13|o>>>19)+F|0)<<18|o>>>14,O^=(o=(R^=(o=(j^=(o=(T^=(o=O+R|0)<<7|o>>>25)+O|0)<<9|o>>>23)+T|0)<<13|o>>>19)+j|0)<<18|o>>>14,I^=(o=(z^=(o=(A^=(o=(E^=(o=I+z|0)<<7|o>>>25)+I|0)<<9|o>>>23)+E|0)<<13|o>>>19)+A|0)<<18|o>>>14,k^=(o=(E^=(o=(j^=(o=(w^=(o=k+E|0)<<7|o>>>25)+k|0)<<9|o>>>23)+w|0)<<13|o>>>19)+j|0)<<18|o>>>14,_^=(o=(S^=(o=(A^=(o=(R^=(o=_+S|0)<<7|o>>>25)+_|0)<<9|o>>>23)+R|0)<<13|o>>>19)+A|0)<<18|o>>>14,O^=(o=(q^=(o=(C^=(o=(z^=(o=O+q|0)<<7|o>>>25)+O|0)<<9|o>>>23)+z|0)<<13|o>>>19)+C|0)<<18|o>>>14,I^=(o=(T^=(o=(F^=(o=(P^=(o=I+T|0)<<7|o>>>25)+I|0)<<9|o>>>23)+P|0)<<13|o>>>19)+F|0)<<18|o>>>14;k=k+n|0,w=w+r|0,j=j+s|0,E=E+c|0,S=S+p|0,_=_+u|0,R=R+l|0,A=A+m|0,C=C+d|0,q=q+h|0,O=O+f|0,z=z+v|0,P=P+g|0,F=F+b|0,T=T+y|0,I=I+x|0,e[0]=k>>>0&255,e[1]=k>>>8&255,e[2]=k>>>16&255,e[3]=k>>>24&255,e[4]=w>>>0&255,e[5]=w>>>8&255,e[6]=w>>>16&255,e[7]=w>>>24&255,e[8]=j>>>0&255,e[9]=j>>>8&255,e[10]=j>>>16&255,e[11]=j>>>24&255,e[12]=E>>>0&255,e[13]=E>>>8&255,e[14]=E>>>16&255,e[15]=E>>>24&255,e[16]=S>>>0&255,e[17]=S>>>8&255,e[18]=S>>>16&255,e[19]=S>>>24&255,e[20]=_>>>0&255,e[21]=_>>>8&255,e[22]=_>>>16&255,e[23]=_>>>24&255,e[24]=R>>>0&255,e[25]=R>>>8&255,e[26]=R>>>16&255,e[27]=R>>>24&255,e[28]=A>>>0&255,e[29]=A>>>8&255,e[30]=A>>>16&255,e[31]=A>>>24&255,e[32]=C>>>0&255,e[33]=C>>>8&255,e[34]=C>>>16&255,e[35]=C>>>24&255,e[36]=q>>>0&255,e[37]=q>>>8&255,e[38]=q>>>16&255,e[39]=q>>>24&255,e[40]=O>>>0&255,e[41]=O>>>8&255,e[42]=O>>>16&255,e[43]=O>>>24&255,e[44]=z>>>0&255,e[45]=z>>>8&255,e[46]=z>>>16&255,e[47]=z>>>24&255,e[48]=P>>>0&255,e[49]=P>>>8&255,e[50]=P>>>16&255,e[51]=P>>>24&255,e[52]=F>>>0&255,e[53]=F>>>8&255,e[54]=F>>>16&255,e[55]=F>>>24&255,e[56]=T>>>0&255,e[57]=T>>>8&255,e[58]=T>>>16&255,e[59]=T>>>24&255,e[60]=I>>>0&255,e[61]=I>>>8&255,e[62]=I>>>16&255,e[63]=I>>>24&255}(e,a,t,i)}function y(e,a,t,i){!function(e,a,t,i){for(var o,n=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,r=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,s=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,c=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,p=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,u=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,l=255&a[0]|(255&a[1])<<8|(255&a[2])<<16|(255&a[3])<<24,m=255&a[4]|(255&a[5])<<8|(255&a[6])<<16|(255&a[7])<<24,d=255&a[8]|(255&a[9])<<8|(255&a[10])<<16|(255&a[11])<<24,h=255&a[12]|(255&a[13])<<8|(255&a[14])<<16|(255&a[15])<<24,f=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,v=255&t[16]|(255&t[17])<<8|(255&t[18])<<16|(255&t[19])<<24,g=255&t[20]|(255&t[21])<<8|(255&t[22])<<16|(255&t[23])<<24,b=255&t[24]|(255&t[25])<<8|(255&t[26])<<16|(255&t[27])<<24,y=255&t[28]|(255&t[29])<<8|(255&t[30])<<16|(255&t[31])<<24,x=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,k=0;k<20;k+=2)n^=(o=(g^=(o=(d^=(o=(p^=(o=n+g|0)<<7|o>>>25)+n|0)<<9|o>>>23)+p|0)<<13|o>>>19)+d|0)<<18|o>>>14,u^=(o=(r^=(o=(b^=(o=(h^=(o=u+r|0)<<7|o>>>25)+u|0)<<9|o>>>23)+h|0)<<13|o>>>19)+b|0)<<18|o>>>14,f^=(o=(l^=(o=(s^=(o=(y^=(o=f+l|0)<<7|o>>>25)+f|0)<<9|o>>>23)+y|0)<<13|o>>>19)+s|0)<<18|o>>>14,x^=(o=(v^=(o=(m^=(o=(c^=(o=x+v|0)<<7|o>>>25)+x|0)<<9|o>>>23)+c|0)<<13|o>>>19)+m|0)<<18|o>>>14,n^=(o=(c^=(o=(s^=(o=(r^=(o=n+c|0)<<7|o>>>25)+n|0)<<9|o>>>23)+r|0)<<13|o>>>19)+s|0)<<18|o>>>14,u^=(o=(p^=(o=(m^=(o=(l^=(o=u+p|0)<<7|o>>>25)+u|0)<<9|o>>>23)+l|0)<<13|o>>>19)+m|0)<<18|o>>>14,f^=(o=(h^=(o=(d^=(o=(v^=(o=f+h|0)<<7|o>>>25)+f|0)<<9|o>>>23)+v|0)<<13|o>>>19)+d|0)<<18|o>>>14,x^=(o=(y^=(o=(b^=(o=(g^=(o=x+y|0)<<7|o>>>25)+x|0)<<9|o>>>23)+g|0)<<13|o>>>19)+b|0)<<18|o>>>14;e[0]=n>>>0&255,e[1]=n>>>8&255,e[2]=n>>>16&255,e[3]=n>>>24&255,e[4]=u>>>0&255,e[5]=u>>>8&255,e[6]=u>>>16&255,e[7]=u>>>24&255,e[8]=f>>>0&255,e[9]=f>>>8&255,e[10]=f>>>16&255,e[11]=f>>>24&255,e[12]=x>>>0&255,e[13]=x>>>8&255,e[14]=x>>>16&255,e[15]=x>>>24&255,e[16]=l>>>0&255,e[17]=l>>>8&255,e[18]=l>>>16&255,e[19]=l>>>24&255,e[20]=m>>>0&255,e[21]=m>>>8&255,e[22]=m>>>16&255,e[23]=m>>>24&255,e[24]=d>>>0&255,e[25]=d>>>8&255,e[26]=d>>>16&255,e[27]=d>>>24&255,e[28]=h>>>0&255,e[29]=h>>>8&255,e[30]=h>>>16&255,e[31]=h>>>24&255}(e,a,t,i)}var x=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function k(e,a,t,i,o,n,r){var s,c,p=new Uint8Array(16),u=new Uint8Array(64);for(c=0;c<16;c++)p[c]=0;for(c=0;c<8;c++)p[c]=n[c];for(;o>=64;){for(b(u,p,r,x),c=0;c<64;c++)e[a+c]=t[i+c]^u[c];for(s=1,c=8;c<16;c++)s=s+(255&p[c])|0,p[c]=255&s,s>>>=8;o-=64,a+=64,i+=64}if(o>0)for(b(u,p,r,x),c=0;c<o;c++)e[a+c]=t[i+c]^u[c];return 0}function w(e,a,t,i,o){var n,r,s=new Uint8Array(16),c=new Uint8Array(64);for(r=0;r<16;r++)s[r]=0;for(r=0;r<8;r++)s[r]=i[r];for(;t>=64;){for(b(c,s,o,x),r=0;r<64;r++)e[a+r]=c[r];for(n=1,r=8;r<16;r++)n=n+(255&s[r])|0,s[r]=255&n,n>>>=8;t-=64,a+=64}if(t>0)for(b(c,s,o,x),r=0;r<t;r++)e[a+r]=c[r];return 0}function j(e,a,t,i,o){var n=new Uint8Array(32);y(n,i,o,x);for(var r=new Uint8Array(8),s=0;s<8;s++)r[s]=i[s+16];return w(e,a,t,r,n)}function E(e,a,t,i,o,n,r){var s=new Uint8Array(32);y(s,n,r,x);for(var c=new Uint8Array(8),p=0;p<8;p++)c[p]=n[p+16];return k(e,a,t,i,o,c,s)}var S=function(e){var a,t,i,o,n,r,s,c;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,a=255&e[0]|(255&e[1])<<8,this.r[0]=8191&a,t=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(a>>>13|t<<3),i=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(t>>>10|i<<6),o=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(i>>>7|o<<9),n=255&e[8]|(255&e[9])<<8,this.r[4]=255&(o>>>4|n<<12),this.r[5]=n>>>1&8190,r=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(n>>>14|r<<2),s=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(r>>>11|s<<5),c=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(s>>>8|c<<8),this.r[9]=c>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function _(e,a,t,i,o,n){var r=new S(n);return r.update(t,i,o),r.finish(e,a),0}function R(e,a,t,i,o,n){var r=new Uint8Array(16);return _(r,0,t,i,o,n),v(e,a,r,0)}function A(e,a,t,i,o){var n;if(t<32)return-1;for(E(e,0,a,0,t,i,o),_(e,16,e,32,t-32,e),n=0;n<16;n++)e[n]=0;return 0}function C(e,a,t,i,o){var n,r=new Uint8Array(32);if(t<32)return-1;if(j(r,0,32,i,o),0!==R(a,16,a,32,t-32,r))return-1;for(E(e,0,a,0,t,i,o),n=0;n<32;n++)e[n]=0;return 0}function q(e,a){var t;for(t=0;t<16;t++)e[t]=0|a[t]}function O(e){var a,t,i=1;for(a=0;a<16;a++)t=e[a]+i+65535,i=Math.floor(t/65536),e[a]=t-65536*i;e[0]+=i-1+37*(i-1)}function z(e,a,t){for(var i,o=~(t-1),n=0;n<16;n++)i=o&(e[n]^a[n]),e[n]^=i,a[n]^=i}function P(e,t){var i,o,n,r=a(),s=a();for(i=0;i<16;i++)s[i]=t[i];for(O(s),O(s),O(s),o=0;o<2;o++){for(r[0]=s[0]-65517,i=1;i<15;i++)r[i]=s[i]-65535-(r[i-1]>>16&1),r[i-1]&=65535;r[15]=s[15]-32767-(r[14]>>16&1),n=r[15]>>16&1,r[14]&=65535,z(s,r,1-n)}for(i=0;i<16;i++)e[2*i]=255&s[i],e[2*i+1]=s[i]>>8}function F(e,a){var t=new Uint8Array(32),i=new Uint8Array(32);return P(t,e),P(i,a),g(t,0,i,0)}function T(e){var a=new Uint8Array(32);return P(a,e),1&a[0]}function I(e,a){var t;for(t=0;t<16;t++)e[t]=a[2*t]+(a[2*t+1]<<8);e[15]&=32767}function D(e,a,t){for(var i=0;i<16;i++)e[i]=a[i]+t[i]}function B(e,a,t){for(var i=0;i<16;i++)e[i]=a[i]-t[i]}function L(e,a,t){var i,o,n=0,r=0,s=0,c=0,p=0,u=0,l=0,m=0,d=0,h=0,f=0,v=0,g=0,b=0,y=0,x=0,k=0,w=0,j=0,E=0,S=0,_=0,R=0,A=0,C=0,q=0,O=0,z=0,P=0,F=0,T=0,I=t[0],D=t[1],B=t[2],L=t[3],U=t[4],N=t[5],H=t[6],M=t[7],K=t[8],$=t[9],G=t[10],V=t[11],Q=t[12],W=t[13],Y=t[14],Z=t[15];n+=(i=a[0])*I,r+=i*D,s+=i*B,c+=i*L,p+=i*U,u+=i*N,l+=i*H,m+=i*M,d+=i*K,h+=i*$,f+=i*G,v+=i*V,g+=i*Q,b+=i*W,y+=i*Y,x+=i*Z,r+=(i=a[1])*I,s+=i*D,c+=i*B,p+=i*L,u+=i*U,l+=i*N,m+=i*H,d+=i*M,h+=i*K,f+=i*$,v+=i*G,g+=i*V,b+=i*Q,y+=i*W,x+=i*Y,k+=i*Z,s+=(i=a[2])*I,c+=i*D,p+=i*B,u+=i*L,l+=i*U,m+=i*N,d+=i*H,h+=i*M,f+=i*K,v+=i*$,g+=i*G,b+=i*V,y+=i*Q,x+=i*W,k+=i*Y,w+=i*Z,c+=(i=a[3])*I,p+=i*D,u+=i*B,l+=i*L,m+=i*U,d+=i*N,h+=i*H,f+=i*M,v+=i*K,g+=i*$,b+=i*G,y+=i*V,x+=i*Q,k+=i*W,w+=i*Y,j+=i*Z,p+=(i=a[4])*I,u+=i*D,l+=i*B,m+=i*L,d+=i*U,h+=i*N,f+=i*H,v+=i*M,g+=i*K,b+=i*$,y+=i*G,x+=i*V,k+=i*Q,w+=i*W,j+=i*Y,E+=i*Z,u+=(i=a[5])*I,l+=i*D,m+=i*B,d+=i*L,h+=i*U,f+=i*N,v+=i*H,g+=i*M,b+=i*K,y+=i*$,x+=i*G,k+=i*V,w+=i*Q,j+=i*W,E+=i*Y,S+=i*Z,l+=(i=a[6])*I,m+=i*D,d+=i*B,h+=i*L,f+=i*U,v+=i*N,g+=i*H,b+=i*M,y+=i*K,x+=i*$,k+=i*G,w+=i*V,j+=i*Q,E+=i*W,S+=i*Y,_+=i*Z,m+=(i=a[7])*I,d+=i*D,h+=i*B,f+=i*L,v+=i*U,g+=i*N,b+=i*H,y+=i*M,x+=i*K,k+=i*$,w+=i*G,j+=i*V,E+=i*Q,S+=i*W,_+=i*Y,R+=i*Z,d+=(i=a[8])*I,h+=i*D,f+=i*B,v+=i*L,g+=i*U,b+=i*N,y+=i*H,x+=i*M,k+=i*K,w+=i*$,j+=i*G,E+=i*V,S+=i*Q,_+=i*W,R+=i*Y,A+=i*Z,h+=(i=a[9])*I,f+=i*D,v+=i*B,g+=i*L,b+=i*U,y+=i*N,x+=i*H,k+=i*M,w+=i*K,j+=i*$,E+=i*G,S+=i*V,_+=i*Q,R+=i*W,A+=i*Y,C+=i*Z,f+=(i=a[10])*I,v+=i*D,g+=i*B,b+=i*L,y+=i*U,x+=i*N,k+=i*H,w+=i*M,j+=i*K,E+=i*$,S+=i*G,_+=i*V,R+=i*Q,A+=i*W,C+=i*Y,q+=i*Z,v+=(i=a[11])*I,g+=i*D,b+=i*B,y+=i*L,x+=i*U,k+=i*N,w+=i*H,j+=i*M,E+=i*K,S+=i*$,_+=i*G,R+=i*V,A+=i*Q,C+=i*W,q+=i*Y,O+=i*Z,g+=(i=a[12])*I,b+=i*D,y+=i*B,x+=i*L,k+=i*U,w+=i*N,j+=i*H,E+=i*M,S+=i*K,_+=i*$,R+=i*G,A+=i*V,C+=i*Q,q+=i*W,O+=i*Y,z+=i*Z,b+=(i=a[13])*I,y+=i*D,x+=i*B,k+=i*L,w+=i*U,j+=i*N,E+=i*H,S+=i*M,_+=i*K,R+=i*$,A+=i*G,C+=i*V,q+=i*Q,O+=i*W,z+=i*Y,P+=i*Z,y+=(i=a[14])*I,x+=i*D,k+=i*B,w+=i*L,j+=i*U,E+=i*N,S+=i*H,_+=i*M,R+=i*K,A+=i*$,C+=i*G,q+=i*V,O+=i*Q,z+=i*W,P+=i*Y,F+=i*Z,x+=(i=a[15])*I,r+=38*(w+=i*B),s+=38*(j+=i*L),c+=38*(E+=i*U),p+=38*(S+=i*N),u+=38*(_+=i*H),l+=38*(R+=i*M),m+=38*(A+=i*K),d+=38*(C+=i*$),h+=38*(q+=i*G),f+=38*(O+=i*V),v+=38*(z+=i*Q),g+=38*(P+=i*W),b+=38*(F+=i*Y),y+=38*(T+=i*Z),n=(i=(n+=38*(k+=i*D))+(o=1)+65535)-65536*(o=Math.floor(i/65536)),r=(i=r+o+65535)-65536*(o=Math.floor(i/65536)),s=(i=s+o+65535)-65536*(o=Math.floor(i/65536)),c=(i=c+o+65535)-65536*(o=Math.floor(i/65536)),p=(i=p+o+65535)-65536*(o=Math.floor(i/65536)),u=(i=u+o+65535)-65536*(o=Math.floor(i/65536)),l=(i=l+o+65535)-65536*(o=Math.floor(i/65536)),m=(i=m+o+65535)-65536*(o=Math.floor(i/65536)),d=(i=d+o+65535)-65536*(o=Math.floor(i/65536)),h=(i=h+o+65535)-65536*(o=Math.floor(i/65536)),f=(i=f+o+65535)-65536*(o=Math.floor(i/65536)),v=(i=v+o+65535)-65536*(o=Math.floor(i/65536)),g=(i=g+o+65535)-65536*(o=Math.floor(i/65536)),b=(i=b+o+65535)-65536*(o=Math.floor(i/65536)),y=(i=y+o+65535)-65536*(o=Math.floor(i/65536)),x=(i=x+o+65535)-65536*(o=Math.floor(i/65536)),n=(i=(n+=o-1+37*(o-1))+(o=1)+65535)-65536*(o=Math.floor(i/65536)),r=(i=r+o+65535)-65536*(o=Math.floor(i/65536)),s=(i=s+o+65535)-65536*(o=Math.floor(i/65536)),c=(i=c+o+65535)-65536*(o=Math.floor(i/65536)),p=(i=p+o+65535)-65536*(o=Math.floor(i/65536)),u=(i=u+o+65535)-65536*(o=Math.floor(i/65536)),l=(i=l+o+65535)-65536*(o=Math.floor(i/65536)),m=(i=m+o+65535)-65536*(o=Math.floor(i/65536)),d=(i=d+o+65535)-65536*(o=Math.floor(i/65536)),h=(i=h+o+65535)-65536*(o=Math.floor(i/65536)),f=(i=f+o+65535)-65536*(o=Math.floor(i/65536)),v=(i=v+o+65535)-65536*(o=Math.floor(i/65536)),g=(i=g+o+65535)-65536*(o=Math.floor(i/65536)),b=(i=b+o+65535)-65536*(o=Math.floor(i/65536)),y=(i=y+o+65535)-65536*(o=Math.floor(i/65536)),x=(i=x+o+65535)-65536*(o=Math.floor(i/65536)),n+=o-1+37*(o-1),e[0]=n,e[1]=r,e[2]=s,e[3]=c,e[4]=p,e[5]=u,e[6]=l,e[7]=m,e[8]=d,e[9]=h,e[10]=f,e[11]=v,e[12]=g,e[13]=b,e[14]=y,e[15]=x}function U(e,a){L(e,a,a)}function N(e,t){var i,o=a();for(i=0;i<16;i++)o[i]=t[i];for(i=253;i>=0;i--)U(o,o),2!==i&&4!==i&&L(o,o,t);for(i=0;i<16;i++)e[i]=o[i]}function H(e,t,i){var o,n,r=new Uint8Array(32),s=new Float64Array(80),p=a(),u=a(),l=a(),m=a(),d=a(),h=a();for(n=0;n<31;n++)r[n]=t[n];for(r[31]=127&t[31]|64,r[0]&=248,I(s,i),n=0;n<16;n++)u[n]=s[n],m[n]=p[n]=l[n]=0;for(p[0]=m[0]=1,n=254;n>=0;--n)z(p,u,o=r[n>>>3]>>>(7&n)&1),z(l,m,o),D(d,p,l),B(p,p,l),D(l,u,m),B(u,u,m),U(m,d),U(h,p),L(p,l,p),L(l,u,d),D(d,p,l),B(p,p,l),U(u,p),B(l,m,h),L(p,l,c),D(p,p,m),L(l,l,p),L(p,m,h),L(m,u,s),U(u,d),z(p,u,o),z(l,m,o);for(n=0;n<16;n++)s[n+16]=p[n],s[n+32]=l[n],s[n+48]=u[n],s[n+64]=m[n];var f=s.subarray(32),v=s.subarray(16);return N(f,f),L(v,v,f),P(e,v),0}function M(e,a){return H(e,a,n)}function K(e,a){return i(a,32),M(e,a)}function $(e,a,t){var i=new Uint8Array(32);return H(i,t,a),y(e,o,i,x)}S.prototype.blocks=function(e,a,t){for(var i,o,n,r,s,c,p,u,l,m,d,h,f,v,g,b,y,x,k,w=this.fin?0:2048,j=this.h[0],E=this.h[1],S=this.h[2],_=this.h[3],R=this.h[4],A=this.h[5],C=this.h[6],q=this.h[7],O=this.h[8],z=this.h[9],P=this.r[0],F=this.r[1],T=this.r[2],I=this.r[3],D=this.r[4],B=this.r[5],L=this.r[6],U=this.r[7],N=this.r[8],H=this.r[9];t>=16;)m=l=0,m+=(j+=8191&(i=255&e[a+0]|(255&e[a+1])<<8))*P,m+=(E+=8191&(i>>>13|(o=255&e[a+2]|(255&e[a+3])<<8)<<3))*(5*H),m+=(S+=8191&(o>>>10|(n=255&e[a+4]|(255&e[a+5])<<8)<<6))*(5*N),m+=(_+=8191&(n>>>7|(r=255&e[a+6]|(255&e[a+7])<<8)<<9))*(5*U),l=(m+=(R+=8191&(r>>>4|(s=255&e[a+8]|(255&e[a+9])<<8)<<12))*(5*L))>>>13,m&=8191,m+=(A+=s>>>1&8191)*(5*B),m+=(C+=8191&(s>>>14|(c=255&e[a+10]|(255&e[a+11])<<8)<<2))*(5*D),m+=(q+=8191&(c>>>11|(p=255&e[a+12]|(255&e[a+13])<<8)<<5))*(5*I),m+=(O+=8191&(p>>>8|(u=255&e[a+14]|(255&e[a+15])<<8)<<8))*(5*T),d=l+=(m+=(z+=u>>>5|w)*(5*F))>>>13,d+=j*F,d+=E*P,d+=S*(5*H),d+=_*(5*N),l=(d+=R*(5*U))>>>13,d&=8191,d+=A*(5*L),d+=C*(5*B),d+=q*(5*D),d+=O*(5*I),l+=(d+=z*(5*T))>>>13,d&=8191,h=l,h+=j*T,h+=E*F,h+=S*P,h+=_*(5*H),l=(h+=R*(5*N))>>>13,h&=8191,h+=A*(5*U),h+=C*(5*L),h+=q*(5*B),h+=O*(5*D),f=l+=(h+=z*(5*I))>>>13,f+=j*I,f+=E*T,f+=S*F,f+=_*P,l=(f+=R*(5*H))>>>13,f&=8191,f+=A*(5*N),f+=C*(5*U),f+=q*(5*L),f+=O*(5*B),v=l+=(f+=z*(5*D))>>>13,v+=j*D,v+=E*I,v+=S*T,v+=_*F,l=(v+=R*P)>>>13,v&=8191,v+=A*(5*H),v+=C*(5*N),v+=q*(5*U),v+=O*(5*L),g=l+=(v+=z*(5*B))>>>13,g+=j*B,g+=E*D,g+=S*I,g+=_*T,l=(g+=R*F)>>>13,g&=8191,g+=A*P,g+=C*(5*H),g+=q*(5*N),g+=O*(5*U),b=l+=(g+=z*(5*L))>>>13,b+=j*L,b+=E*B,b+=S*D,b+=_*I,l=(b+=R*T)>>>13,b&=8191,b+=A*F,b+=C*P,b+=q*(5*H),b+=O*(5*N),y=l+=(b+=z*(5*U))>>>13,y+=j*U,y+=E*L,y+=S*B,y+=_*D,l=(y+=R*I)>>>13,y&=8191,y+=A*T,y+=C*F,y+=q*P,y+=O*(5*H),x=l+=(y+=z*(5*N))>>>13,x+=j*N,x+=E*U,x+=S*L,x+=_*B,l=(x+=R*D)>>>13,x&=8191,x+=A*I,x+=C*T,x+=q*F,x+=O*P,k=l+=(x+=z*(5*H))>>>13,k+=j*H,k+=E*N,k+=S*U,k+=_*L,l=(k+=R*B)>>>13,k&=8191,k+=A*D,k+=C*I,k+=q*T,k+=O*F,j=m=8191&(l=(l=((l+=(k+=z*P)>>>13)<<2)+l|0)+(m&=8191)|0),E=d+=l>>>=13,S=h&=8191,_=f&=8191,R=v&=8191,A=g&=8191,C=b&=8191,q=y&=8191,O=x&=8191,z=k&=8191,a+=16,t-=16;this.h[0]=j,this.h[1]=E,this.h[2]=S,this.h[3]=_,this.h[4]=R,this.h[5]=A,this.h[6]=C,this.h[7]=q,this.h[8]=O,this.h[9]=z},S.prototype.finish=function(e,a){var t,i,o,n,r=new Uint16Array(10);if(this.leftover){for(n=this.leftover,this.buffer[n++]=1;n<16;n++)this.buffer[n]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(t=this.h[1]>>>13,this.h[1]&=8191,n=2;n<10;n++)this.h[n]+=t,t=this.h[n]>>>13,this.h[n]&=8191;for(this.h[0]+=5*t,t=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=t,t=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=t,r[0]=this.h[0]+5,t=r[0]>>>13,r[0]&=8191,n=1;n<10;n++)r[n]=this.h[n]+t,t=r[n]>>>13,r[n]&=8191;for(r[9]-=8192,i=(1^t)-1,n=0;n<10;n++)r[n]&=i;for(i=~i,n=0;n<10;n++)this.h[n]=this.h[n]&i|r[n];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),o=this.h[0]+this.pad[0],this.h[0]=65535&o,n=1;n<8;n++)o=(this.h[n]+this.pad[n]|0)+(o>>>16)|0,this.h[n]=65535&o;e[a+0]=this.h[0]>>>0&255,e[a+1]=this.h[0]>>>8&255,e[a+2]=this.h[1]>>>0&255,e[a+3]=this.h[1]>>>8&255,e[a+4]=this.h[2]>>>0&255,e[a+5]=this.h[2]>>>8&255,e[a+6]=this.h[3]>>>0&255,e[a+7]=this.h[3]>>>8&255,e[a+8]=this.h[4]>>>0&255,e[a+9]=this.h[4]>>>8&255,e[a+10]=this.h[5]>>>0&255,e[a+11]=this.h[5]>>>8&255,e[a+12]=this.h[6]>>>0&255,e[a+13]=this.h[6]>>>8&255,e[a+14]=this.h[7]>>>0&255,e[a+15]=this.h[7]>>>8&255},S.prototype.update=function(e,a,t){var i,o;if(this.leftover){for((o=16-this.leftover)>t&&(o=t),i=0;i<o;i++)this.buffer[this.leftover+i]=e[a+i];if(t-=o,a+=o,this.leftover+=o,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(t>=16&&(o=t-t%16,this.blocks(e,a,o),a+=o,t-=o),t){for(i=0;i<t;i++)this.buffer[this.leftover+i]=e[a+i];this.leftover+=t}};var G=A,V=C;var Q=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function W(e,a,t,i){for(var o,n,r,s,c,p,u,l,m,d,h,f,v,g,b,y,x,k,w,j,E,S,_,R,A,C,q=new Int32Array(16),O=new Int32Array(16),z=e[0],P=e[1],F=e[2],T=e[3],I=e[4],D=e[5],B=e[6],L=e[7],U=a[0],N=a[1],H=a[2],M=a[3],K=a[4],$=a[5],G=a[6],V=a[7],W=0;i>=128;){for(w=0;w<16;w++)j=8*w+W,q[w]=t[j+0]<<24|t[j+1]<<16|t[j+2]<<8|t[j+3],O[w]=t[j+4]<<24|t[j+5]<<16|t[j+6]<<8|t[j+7];for(w=0;w<80;w++)if(o=z,n=P,r=F,s=T,c=I,p=D,u=B,L,m=U,d=N,h=H,f=M,v=K,g=$,b=G,V,_=65535&(S=V),R=S>>>16,A=65535&(E=L),C=E>>>16,_+=65535&(S=(K>>>14|I<<18)^(K>>>18|I<<14)^(I>>>9|K<<23)),R+=S>>>16,A+=65535&(E=(I>>>14|K<<18)^(I>>>18|K<<14)^(K>>>9|I<<23)),C+=E>>>16,_+=65535&(S=K&$^~K&G),R+=S>>>16,A+=65535&(E=I&D^~I&B),C+=E>>>16,E=Q[2*w],_+=65535&(S=Q[2*w+1]),R+=S>>>16,A+=65535&E,C+=E>>>16,E=q[w%16],R+=(S=O[w%16])>>>16,A+=65535&E,C+=E>>>16,A+=(R+=(_+=65535&S)>>>16)>>>16,_=65535&(S=k=65535&_|R<<16),R=S>>>16,A=65535&(E=x=65535&A|(C+=A>>>16)<<16),C=E>>>16,_+=65535&(S=(U>>>28|z<<4)^(z>>>2|U<<30)^(z>>>7|U<<25)),R+=S>>>16,A+=65535&(E=(z>>>28|U<<4)^(U>>>2|z<<30)^(U>>>7|z<<25)),C+=E>>>16,R+=(S=U&N^U&H^N&H)>>>16,A+=65535&(E=z&P^z&F^P&F),C+=E>>>16,l=65535&(A+=(R+=(_+=65535&S)>>>16)>>>16)|(C+=A>>>16)<<16,y=65535&_|R<<16,_=65535&(S=f),R=S>>>16,A=65535&(E=s),C=E>>>16,R+=(S=k)>>>16,A+=65535&(E=x),C+=E>>>16,P=o,F=n,T=r,I=s=65535&(A+=(R+=(_+=65535&S)>>>16)>>>16)|(C+=A>>>16)<<16,D=c,B=p,L=u,z=l,N=m,H=d,M=h,K=f=65535&_|R<<16,$=v,G=g,V=b,U=y,w%16==15)for(j=0;j<16;j++)E=q[j],_=65535&(S=O[j]),R=S>>>16,A=65535&E,C=E>>>16,E=q[(j+9)%16],_+=65535&(S=O[(j+9)%16]),R+=S>>>16,A+=65535&E,C+=E>>>16,x=q[(j+1)%16],_+=65535&(S=((k=O[(j+1)%16])>>>1|x<<31)^(k>>>8|x<<24)^(k>>>7|x<<25)),R+=S>>>16,A+=65535&(E=(x>>>1|k<<31)^(x>>>8|k<<24)^x>>>7),C+=E>>>16,x=q[(j+14)%16],R+=(S=((k=O[(j+14)%16])>>>19|x<<13)^(x>>>29|k<<3)^(k>>>6|x<<26))>>>16,A+=65535&(E=(x>>>19|k<<13)^(k>>>29|x<<3)^x>>>6),C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,q[j]=65535&A|C<<16,O[j]=65535&_|R<<16;_=65535&(S=U),R=S>>>16,A=65535&(E=z),C=E>>>16,E=e[0],R+=(S=a[0])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[0]=z=65535&A|C<<16,a[0]=U=65535&_|R<<16,_=65535&(S=N),R=S>>>16,A=65535&(E=P),C=E>>>16,E=e[1],R+=(S=a[1])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[1]=P=65535&A|C<<16,a[1]=N=65535&_|R<<16,_=65535&(S=H),R=S>>>16,A=65535&(E=F),C=E>>>16,E=e[2],R+=(S=a[2])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[2]=F=65535&A|C<<16,a[2]=H=65535&_|R<<16,_=65535&(S=M),R=S>>>16,A=65535&(E=T),C=E>>>16,E=e[3],R+=(S=a[3])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[3]=T=65535&A|C<<16,a[3]=M=65535&_|R<<16,_=65535&(S=K),R=S>>>16,A=65535&(E=I),C=E>>>16,E=e[4],R+=(S=a[4])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[4]=I=65535&A|C<<16,a[4]=K=65535&_|R<<16,_=65535&(S=$),R=S>>>16,A=65535&(E=D),C=E>>>16,E=e[5],R+=(S=a[5])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[5]=D=65535&A|C<<16,a[5]=$=65535&_|R<<16,_=65535&(S=G),R=S>>>16,A=65535&(E=B),C=E>>>16,E=e[6],R+=(S=a[6])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[6]=B=65535&A|C<<16,a[6]=G=65535&_|R<<16,_=65535&(S=V),R=S>>>16,A=65535&(E=L),C=E>>>16,E=e[7],R+=(S=a[7])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[7]=L=65535&A|C<<16,a[7]=V=65535&_|R<<16,W+=128,i-=128}return i}function Y(e,a,t){var i,o=new Int32Array(8),n=new Int32Array(8),r=new Uint8Array(256),s=t;for(o[0]=1779033703,o[1]=3144134277,o[2]=1013904242,o[3]=2773480762,o[4]=1359893119,o[5]=2600822924,o[6]=528734635,o[7]=1541459225,n[0]=4089235720,n[1]=2227873595,n[2]=4271175723,n[3]=1595750129,n[4]=2917565137,n[5]=725511199,n[6]=4215389547,n[7]=327033209,W(o,n,a,t),t%=128,i=0;i<t;i++)r[i]=a[s-t+i];for(r[t]=128,r[(t=256-128*(t<112?1:0))-9]=0,h(r,t-8,s/536870912|0,s<<3),W(o,n,r,t),i=0;i<8;i++)h(e,8*i,o[i],n[i]);return 0}function Z(e,t){var i=a(),o=a(),n=a(),r=a(),s=a(),c=a(),p=a(),l=a(),m=a();B(i,e[1],e[0]),B(m,t[1],t[0]),L(i,i,m),D(o,e[0],e[1]),D(m,t[0],t[1]),L(o,o,m),L(n,e[3],t[3]),L(n,n,u),L(r,e[2],t[2]),D(r,r,r),B(s,o,i),B(c,r,n),D(p,r,n),D(l,o,i),L(e[0],s,c),L(e[1],l,p),L(e[2],p,c),L(e[3],s,l)}function J(e,a,t){var i;for(i=0;i<4;i++)z(e[i],a[i],t)}function X(e,t){var i=a(),o=a(),n=a();N(n,t[2]),L(i,t[0],n),L(o,t[1],n),P(e,o),e[31]^=T(i)<<7}function ee(e,a,t){var i,o;for(q(e[0],r),q(e[1],s),q(e[2],s),q(e[3],r),o=255;o>=0;--o)J(e,a,i=t[o/8|0]>>(7&o)&1),Z(a,e),Z(e,e),J(e,a,i)}function ae(e,t){var i=[a(),a(),a(),a()];q(i[0],l),q(i[1],m),q(i[2],s),L(i[3],l,m),ee(e,i,t)}function te(e,t,o){var n,r=new Uint8Array(64),s=[a(),a(),a(),a()];for(o||i(t,32),Y(r,t,32),r[0]&=248,r[31]&=127,r[31]|=64,ae(s,r),X(e,s),n=0;n<32;n++)t[n+32]=e[n];return 0}var ie=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function oe(e,a){var t,i,o,n;for(i=63;i>=32;--i){for(t=0,o=i-32,n=i-12;o<n;++o)a[o]+=t-16*a[i]*ie[o-(i-32)],t=a[o]+128>>8,a[o]-=256*t;a[o]+=t,a[i]=0}for(t=0,o=0;o<32;o++)a[o]+=t-(a[31]>>4)*ie[o],t=a[o]>>8,a[o]&=255;for(o=0;o<32;o++)a[o]-=t*ie[o];for(i=0;i<32;i++)a[i+1]+=a[i]>>8,e[i]=255&a[i]}function ne(e){var a,t=new Float64Array(64);for(a=0;a<64;a++)t[a]=e[a];for(a=0;a<64;a++)e[a]=0;oe(e,t)}function re(e,t,i,o){var n,r,s=new Uint8Array(64),c=new Uint8Array(64),p=new Uint8Array(64),u=new Float64Array(64),l=[a(),a(),a(),a()];Y(s,o,32),s[0]&=248,s[31]&=127,s[31]|=64;var m=i+64;for(n=0;n<i;n++)e[64+n]=t[n];for(n=0;n<32;n++)e[32+n]=s[32+n];for(Y(p,e.subarray(32),i+32),ne(p),ae(l,p),X(e,l),n=32;n<64;n++)e[n]=o[n];for(Y(c,e,i+64),ne(c),n=0;n<64;n++)u[n]=0;for(n=0;n<32;n++)u[n]=p[n];for(n=0;n<32;n++)for(r=0;r<32;r++)u[n+r]+=c[n]*s[r];return oe(e.subarray(32),u),m}function se(e,t){var i=a(),o=a(),n=a(),c=a(),u=a(),l=a(),m=a();return q(e[2],s),I(e[1],t),U(n,e[1]),L(c,n,p),B(n,n,e[2]),D(c,e[2],c),U(u,c),U(l,u),L(m,l,u),L(i,m,n),L(i,i,c),function(e,t){var i,o=a();for(i=0;i<16;i++)o[i]=t[i];for(i=250;i>=0;i--)U(o,o),1!==i&&L(o,o,t);for(i=0;i<16;i++)e[i]=o[i]}(i,i),L(i,i,n),L(i,i,c),L(i,i,c),L(e[0],i,c),U(o,e[0]),L(o,o,c),F(o,n)&&L(e[0],e[0],d),U(o,e[0]),L(o,o,c),F(o,n)?-1:(T(e[0])===t[31]>>7&&B(e[0],r,e[0]),L(e[3],e[0],e[1]),0)}function ce(e,t,i,o){var n,r=new Uint8Array(32),s=new Uint8Array(64),c=[a(),a(),a(),a()],p=[a(),a(),a(),a()];if(-1,i<64)return-1;if(se(p,o))return-1;for(n=0;n<i;n++)e[n]=t[n];for(n=0;n<32;n++)e[n+32]=o[n];if(Y(s,e,i),ne(s),ee(c,p,s),ae(p,t.subarray(32)),Z(c,p),X(r,c),i-=64,g(t,0,r,0)){for(n=0;n<i;n++)e[n]=0;return-1}for(n=0;n<i;n++)e[n]=t[n+64];return i}var pe=32,ue=24,le=32,me=32,de=ue;function he(e,a){if(e.length!==pe)throw new Error("bad key size");if(a.length!==ue)throw new Error("bad nonce size")}function fe(){var e,a;for(a=0;a<arguments.length;a++)if("[object Uint8Array]"!==(e=Object.prototype.toString.call(arguments[a])))throw new TypeError("unexpected type "+e+", use Uint8Array")}function ve(e){for(var a=0;a<e.length;a++)e[a]=0}e.lowlevel={crypto_core_hsalsa20:y,crypto_stream_xor:E,crypto_stream:j,crypto_stream_salsa20_xor:k,crypto_stream_salsa20:w,crypto_onetimeauth:_,crypto_onetimeauth_verify:R,crypto_verify_16:v,crypto_verify_32:g,crypto_secretbox:A,crypto_secretbox_open:C,crypto_scalarmult:H,crypto_scalarmult_base:M,crypto_box_beforenm:$,crypto_box_afternm:G,crypto_box:function(e,a,t,i,o,n){var r=new Uint8Array(32);return $(r,o,n),G(e,a,t,i,r)},crypto_box_open:function(e,a,t,i,o,n){var r=new Uint8Array(32);return $(r,o,n),V(e,a,t,i,r)},crypto_box_keypair:K,crypto_hash:Y,crypto_sign:re,crypto_sign_keypair:te,crypto_sign_open:ce,crypto_secretbox_KEYBYTES:pe,crypto_secretbox_NONCEBYTES:ue,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:le,crypto_box_SECRETKEYBYTES:me,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:de,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:64,crypto_sign_PUBLICKEYBYTES:32,crypto_sign_SECRETKEYBYTES:64,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64},e.util||(e.util={},e.util.decodeUTF8=e.util.encodeUTF8=e.util.encodeBase64=e.util.decodeBase64=function(){throw new Error("nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js")}),e.randomBytes=function(e){var a=new Uint8Array(e);return i(a,e),a},e.secretbox=function(e,a,t){fe(e,a,t),he(t,a);for(var i=new Uint8Array(32+e.length),o=new Uint8Array(i.length),n=0;n<e.length;n++)i[n+32]=e[n];return A(o,i,i.length,a,t),o.subarray(16)},e.secretbox.open=function(e,a,t){fe(e,a,t),he(t,a);for(var i=new Uint8Array(16+e.length),o=new Uint8Array(i.length),n=0;n<e.length;n++)i[n+16]=e[n];return!(i.length<32)&&(0===C(o,i,i.length,a,t)&&o.subarray(32))},e.secretbox.keyLength=pe,e.secretbox.nonceLength=ue,e.secretbox.overheadLength=16,e.scalarMult=function(e,a){if(fe(e,a),32!==e.length)throw new Error("bad n size");if(32!==a.length)throw new Error("bad p size");var t=new Uint8Array(32);return H(t,e,a),t},e.scalarMult.base=function(e){if(fe(e),32!==e.length)throw new Error("bad n size");var a=new Uint8Array(32);return M(a,e),a},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(a,t,i,o){var n=e.box.before(i,o);return e.secretbox(a,t,n)},e.box.before=function(e,a){fe(e,a),function(e,a){if(e.length!==le)throw new Error("bad public key size");if(a.length!==me)throw new Error("bad secret key size")}(e,a);var t=new Uint8Array(32);return $(t,e,a),t},e.box.after=e.secretbox,e.box.open=function(a,t,i,o){var n=e.box.before(i,o);return e.secretbox.open(a,t,n)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(le),a=new Uint8Array(me);return K(e,a),{publicKey:e,secretKey:a}},e.box.keyPair.fromSecretKey=function(e){if(fe(e),e.length!==me)throw new Error("bad secret key size");var a=new Uint8Array(le);return M(a,e),{publicKey:a,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=le,e.box.secretKeyLength=me,e.box.sharedKeyLength=32,e.box.nonceLength=de,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,a){if(fe(e,a),64!==a.length)throw new Error("bad secret key size");var t=new Uint8Array(64+e.length);return re(t,e,e.length,a),t},e.sign.open=function(e,a){if(2!==arguments.length)throw new Error("nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?");if(fe(e,a),32!==a.length)throw new Error("bad public key size");var t=new Uint8Array(e.length),i=ce(t,e,e.length,a);if(i<0)return null;for(var o=new Uint8Array(i),n=0;n<o.length;n++)o[n]=t[n];return o},e.sign.detached=function(a,t){for(var i=e.sign(a,t),o=new Uint8Array(64),n=0;n<o.length;n++)o[n]=i[n];return o},e.sign.detached.verify=function(e,a,t){if(fe(e,a,t),64!==a.length)throw new Error("bad signature size");if(32!==t.length)throw new Error("bad public key size");var i,o=new Uint8Array(64+e.length),n=new Uint8Array(64+e.length);for(i=0;i<64;i++)o[i]=a[i];for(i=0;i<e.length;i++)o[i+64]=e[i];return ce(n,o,o.length,t)>=0},e.sign.keyPair=function(){var e=new Uint8Array(32),a=new Uint8Array(64);return te(e,a),{publicKey:e,secretKey:a}},e.sign.keyPair.fromSecretKey=function(e){if(fe(e),64!==e.length)throw new Error("bad secret key size");for(var a=new Uint8Array(32),t=0;t<a.length;t++)a[t]=e[32+t];return{publicKey:a,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(fe(e),32!==e.length)throw new Error("bad seed size");for(var a=new Uint8Array(32),t=new Uint8Array(64),i=0;i<32;i++)t[i]=e[i];return te(a,t,!0),{publicKey:a,secretKey:t}},e.sign.publicKeyLength=32,e.sign.secretKeyLength=64,e.sign.seedLength=32,e.sign.signatureLength=64,e.hash=function(e){fe(e);var a=new Uint8Array(64);return Y(a,e,e.length),a},e.hash.hashLength=64,e.verify=function(e,a){return fe(e,a),0!==e.length&&0!==a.length&&(e.length===a.length&&0===f(e,0,a,0,e.length))},e.setPRNG=function(e){i=e},function(){var a="undefined"!=typeof self?self.crypto||self.msCrypto:null;if(a&&a.getRandomValues){e.setPRNG(function(e,t){var i,o=new Uint8Array(t);for(i=0;i<t;i+=65536)a.getRandomValues(o.subarray(i,i+Math.min(t-i,65536)));for(i=0;i<t;i++)e[i]=o[i];ve(o)})}else(a=t(2))&&a.randomBytes&&e.setPRNG(function(e,t){var i,o=a.randomBytes(t);for(i=0;i<t;i++)e[i]=o[i];ve(o)})}()}(e.exports?e.exports:self.nacl=self.nacl||{})},function(e,a,t){e.exports=n;var i=t(0),o=t(3).Buffer;function n(e){i.object(e,"options"),void 0!==e.buffer&&i.buffer(e.buffer,"options.buffer"),this._size=e.buffer?e.buffer.length:1024,this._buffer=e.buffer||o.alloc(this._size),this._offset=0}n.prototype.toBuffer=function(){return this._buffer.slice(0,this._offset)},n.prototype.atEnd=function(){return this._offset>=this._buffer.length},n.prototype.remainder=function(){return this._buffer.slice(this._offset)},n.prototype.skip=function(e){this._offset+=e},n.prototype.expand=function(){this._size*=2;var e=o.alloc(this._size);this._buffer.copy(e,0),this._buffer=e},n.prototype.readPart=function(){return{data:this.readBuffer()}},n.prototype.readBuffer=function(){var e=this._buffer.readUInt32BE(this._offset);this._offset+=4,i.ok(this._offset+e<=this._buffer.length,"length out of bounds at +0x"+this._offset.toString(16)+" (data truncated?)");var a=this._buffer.slice(this._offset,this._offset+e);return this._offset+=e,a},n.prototype.readString=function(){return this.readBuffer().toString()},n.prototype.readCString=function(){for(var e=this._offset;e<this._buffer.length&&0!==this._buffer[e];)e++;i.ok(e<this._buffer.length,"c string does not terminate");var a=this._buffer.slice(this._offset,e).toString();return this._offset=e+1,a},n.prototype.readInt=function(){var e=this._buffer.readUInt32BE(this._offset);return this._offset+=4,e},n.prototype.readInt64=function(){i.ok(this._offset+8<this._buffer.length,"buffer not long enough to read Int64");var e=this._buffer.slice(this._offset,this._offset+8);return this._offset+=8,e},n.prototype.readChar=function(){return this._buffer[this._offset++]},n.prototype.writeBuffer=function(e){for(;this._offset+4+e.length>this._size;)this.expand();this._buffer.writeUInt32BE(e.length,this._offset),this._offset+=4,e.copy(this._buffer,this._offset),this._offset+=e.length},n.prototype.writeString=function(e){this.writeBuffer(o.from(e,"utf8"))},n.prototype.writeCString=function(e){for(;this._offset+1+e.length>this._size;)this.expand();this._buffer.write(e,this._offset),this._offset+=e.length,this._buffer[this._offset++]=0},n.prototype.writeInt=function(e){for(;this._offset+4>this._size;)this.expand();this._buffer.writeUInt32BE(e,this._offset),this._offset+=4},n.prototype.writeInt64=function(e){if(i.buffer(e,"value"),e.length>8){for(var a=e.slice(0,e.length-8),t=0;t<a.length;++t)i.strictEqual(a[t],0,"must fit in 64 bits of precision");e=e.slice(e.length-8,e.length)}for(;this._offset+8>this._size;)this.expand();e.copy(this._buffer,this._offset),this._offset+=8},n.prototype.writeChar=function(e){for(;this._offset+1>this._size;)this.expand();this._buffer[this._offset++]=e},n.prototype.writePart=function(e){this.writeBuffer(e.data)},n.prototype.write=function(e){for(;this._offset+e.length>this._size;)this.expand();e.copy(this._buffer,this._offset),this._offset+=e.length}},function(e,a,t){e.exports={read:function(e,a){return u.read(e,a,"pkcs8")},readPkcs8:function(e,a,t){t.peek()===o.Ber.Integer&&(i.strictEqual(a,"private","unexpected Integer at start of public key"),t.readString(o.Ber.Integer,!0));t.readSequence();var r=t.offset+t.length,u=t.readOID();switch(u){case"1.2.840.113549.1.1.1":return t._offset=r,"public"===a?function(e){e.readSequence(o.Ber.BitString),e.readByte(),e.readSequence();var a=l(e,"modulus"),t=l(e,"exponent"),i={type:"rsa",source:e.originalInput,parts:[{name:"e",data:t},{name:"n",data:a}]};return new c(i)}(t):function(e){e.readSequence(o.Ber.OctetString),e.readSequence();var a=l(e,"version");i.equal(a[0],0,"unknown RSA private key version");var t=l(e,"modulus"),n=l(e,"public exponent"),r=l(e,"private exponent"),s=l(e,"prime1"),c=l(e,"prime2"),u=l(e,"exponent1"),m=l(e,"exponent2"),d=l(e,"iqmp");return new p({type:"rsa",parts:[{name:"n",data:t},{name:"e",data:n},{name:"d",data:r},{name:"iqmp",data:d},{name:"p",data:s},{name:"q",data:c},{name:"dmodp",data:u},{name:"dmodq",data:m}]})}(t);case"1.2.840.10040.4.1":return"public"===a?function(e){e.readSequence();var a=l(e,"p"),t=l(e,"q"),i=l(e,"g");e.readSequence(o.Ber.BitString),e.readByte();var n=l(e,"y");return new c({type:"dsa",parts:[{name:"p",data:a},{name:"q",data:t},{name:"g",data:i},{name:"y",data:n}]})}(t):function(e){e.readSequence();var a=l(e,"p"),t=l(e,"q"),i=l(e,"g");e.readSequence(o.Ber.OctetString);var n=l(e,"x"),r=s.calculateDSAPublic(i,a,n);return new p({type:"dsa",parts:[{name:"p",data:a},{name:"q",data:t},{name:"g",data:i},{name:"y",data:r},{name:"x",data:n}]})}(t);case"1.2.840.10045.2.1":return"public"===a?function(e){var a=m(e);i.string(a,"a known elliptic curve");var t=e.readString(o.Ber.BitString,!0);t=s.ecNormalize(t);var r={type:"ecdsa",parts:[{name:"curve",data:n.from(a)},{name:"Q",data:t}]};return new c(r)}(t):function(e){var a=m(e);i.string(a,"a known elliptic curve"),e.readSequence(o.Ber.OctetString),e.readSequence();var t=l(e,"version");i.equal(t[0],1,"unknown version of ECDSA key");var r,c=e.readString(o.Ber.OctetString,!0);160==e.peek()&&(e.readSequence(160),e._offset+=e.length);161==e.peek()&&(e.readSequence(161),r=e.readString(o.Ber.BitString,!0),r=s.ecNormalize(r));if(void 0===r){var u=s.publicFromPrivateECDSA(a,c);r=u.part.Q.data}var d={type:"ecdsa",parts:[{name:"curve",data:n.from(a)},{name:"Q",data:r},{name:"d",data:c}]};return new p(d)}(t);case"1.3.101.112":return"public"===a?function(e){0===e.peek()&&e.readByte();var a=s.readBitString(e),t={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(a,32)}]};return new c(t)}(t):function(e){0===e.peek()&&e.readByte();e.readSequence(o.Ber.OctetString);var a,t=e.readString(o.Ber.OctetString,!0);t=s.zeroPadToLength(t,32),e.peek()===o.Ber.BitString?(a=s.readBitString(e),a=s.zeroPadToLength(a,32)):a=s.calculateED25519Public(t);var i={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(a,32)},{name:"k",data:s.zeroPadToLength(t,32)}]};return new p(i)}(t);case"1.3.101.110":return"public"===a?function(e){var a=s.readBitString(e),t={type:"curve25519",parts:[{name:"A",data:s.zeroPadToLength(a,32)}]};return new c(t)}(t):function(e){0===e.peek()&&e.readByte();e.readSequence(o.Ber.OctetString);var a=e.readString(o.Ber.OctetString,!0);a=s.zeroPadToLength(a,32);var t=s.calculateX25519Public(a),i={type:"curve25519",parts:[{name:"A",data:s.zeroPadToLength(t,32)},{name:"k",data:s.zeroPadToLength(a,32)}]};return new p(i)}(t);default:throw new Error("Unknown key type OID "+u)}},write:function(e,a){return u.write(e,a,"pkcs8")},writePkcs8:d,pkcs8ToBuffer:function(e){var a=new o.BerWriter;return d(a,e),a.buffer},readECDSACurve:m,writeECDSACurve:h};var i=t(0),o=t(14),n=t(3).Buffer,r=t(7),s=t(5),c=t(4),p=t(6),u=t(15);function l(e,a){return i.strictEqual(e.peek(),o.Ber.Integer,a+" is not an Integer"),s.mpNormalize(e.readString(o.Ber.Integer,!0))}function m(e){var a,t,c,p,u;if(e.peek()===o.Ber.OID){var l=e.readOID();for(t=Object.keys(r.curves),c=0;c<t.length;++c)if(p=t[c],(u=r.curves[p]).pkcs8oid===l){a=p;break}}else{e.readSequence();var m=e.readString(o.Ber.Integer,!0);i.strictEqual(m[0],1,"ECDSA key not version 1");var d={};e.readSequence();var h=e.readOID();i.strictEqual(h,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var f=d.p=s.mpNormalize(e.readString(o.Ber.Integer,!0));d.size=8*f.length-s.countZeros(f),e.readSequence(),d.a=s.mpNormalize(e.readString(o.Ber.OctetString,!0)),d.b=s.mpNormalize(e.readString(o.Ber.OctetString,!0)),e.peek()===o.Ber.BitString&&(d.s=e.readString(o.Ber.BitString,!0)),d.G=e.readString(o.Ber.OctetString,!0),i.strictEqual(d.G[0],4,"uncompressed G is required"),d.n=s.mpNormalize(e.readString(o.Ber.Integer,!0)),d.h=s.mpNormalize(e.readString(o.Ber.Integer,!0)),i.strictEqual(d.h[0],1,"a cofactor=1 curve is required"),t=Object.keys(r.curves);var v=Object.keys(d);for(c=0;c<t.length;++c){p=t[c],u=r.curves[p];for(var g=!0,b=0;b<v.length;++b){var y=v[b];if(void 0!==u[y])if("object"==typeof u[y]&&void 0!==u[y].equals){if(!u[y].equals(d[y])){g=!1;break}}else if(n.isBuffer(u[y])){if(u[y].toString("binary")!==d[y].toString("binary")){g=!1;break}}else if(u[y]!==d[y]){g=!1;break}}if(g){a=p;break}}}return a}function d(e,a){if(e.startSequence(),p.isPrivateKey(a)){var t=n.from([0]);e.writeBuffer(t,o.Ber.Integer)}switch(e.startSequence(),a.type){case"rsa":e.writeOID("1.2.840.113549.1.1.1"),p.isPrivateKey(a)?function(e,a){a.writeNull(),a.endSequence(),a.startSequence(o.Ber.OctetString),a.startSequence();var t=n.from([0]);a.writeBuffer(t,o.Ber.Integer),a.writeBuffer(e.part.n.data,o.Ber.Integer),a.writeBuffer(e.part.e.data,o.Ber.Integer),a.writeBuffer(e.part.d.data,o.Ber.Integer),a.writeBuffer(e.part.p.data,o.Ber.Integer),a.writeBuffer(e.part.q.data,o.Ber.Integer),e.part.dmodp&&e.part.dmodq||s.addRSAMissing(e);a.writeBuffer(e.part.dmodp.data,o.Ber.Integer),a.writeBuffer(e.part.dmodq.data,o.Ber.Integer),a.writeBuffer(e.part.iqmp.data,o.Ber.Integer),a.endSequence(),a.endSequence()}(a,e):function(e,a){a.writeNull(),a.endSequence(),a.startSequence(o.Ber.BitString),a.writeByte(0),a.startSequence(),a.writeBuffer(e.part.n.data,o.Ber.Integer),a.writeBuffer(e.part.e.data,o.Ber.Integer),a.endSequence(),a.endSequence()}(a,e);break;case"dsa":e.writeOID("1.2.840.10040.4.1"),p.isPrivateKey(a)?function(e,a){a.startSequence(),a.writeBuffer(e.part.p.data,o.Ber.Integer),a.writeBuffer(e.part.q.data,o.Ber.Integer),a.writeBuffer(e.part.g.data,o.Ber.Integer),a.endSequence(),a.endSequence(),a.startSequence(o.Ber.OctetString),a.writeBuffer(e.part.x.data,o.Ber.Integer),a.endSequence()}(a,e):function(e,a){a.startSequence(),a.writeBuffer(e.part.p.data,o.Ber.Integer),a.writeBuffer(e.part.q.data,o.Ber.Integer),a.writeBuffer(e.part.g.data,o.Ber.Integer),a.endSequence(),a.endSequence(),a.startSequence(o.Ber.BitString),a.writeByte(0),a.writeBuffer(e.part.y.data,o.Ber.Integer),a.endSequence()}(a,e);break;case"ecdsa":e.writeOID("1.2.840.10045.2.1"),p.isPrivateKey(a)?function(e,a){h(e,a),a.endSequence(),a.startSequence(o.Ber.OctetString),a.startSequence();var t=n.from([1]);a.writeBuffer(t,o.Ber.Integer),a.writeBuffer(e.part.d.data,o.Ber.OctetString),a.startSequence(161);var i=s.ecNormalize(e.part.Q.data,!0);a.writeBuffer(i,o.Ber.BitString),a.endSequence(),a.endSequence(),a.endSequence()}(a,e):function(e,a){h(e,a),a.endSequence();var t=s.ecNormalize(e.part.Q.data,!0);a.writeBuffer(t,o.Ber.BitString)}(a,e);break;case"ed25519":if(e.writeOID("1.3.101.112"),p.isPrivateKey(a))throw new Error("Ed25519 private keys in pkcs8 format are not supported");!function(e,a){a.endSequence(),s.writeBitString(a,e.part.A.data)}(a,e);break;default:throw new Error("Unsupported key type: "+a.type)}e.endSequence()}function h(e,a){var t=r.curves[e.curve];if(t.pkcs8oid)a.writeOID(t.pkcs8oid);else{a.startSequence();var i=n.from([1]);a.writeBuffer(i,o.Ber.Integer),a.startSequence(),a.writeOID("1.2.840.10045.1.1"),a.writeBuffer(t.p,o.Ber.Integer),a.endSequence(),a.startSequence();var s=t.p;0===s[0]&&(s=s.slice(1)),a.writeBuffer(s,o.Ber.OctetString),a.writeBuffer(t.b,o.Ber.OctetString),a.writeBuffer(t.s,o.Ber.BitString),a.endSequence(),a.writeBuffer(t.G,o.Ber.OctetString),a.writeBuffer(t.n,o.Ber.Integer);var c=t.h;c||(c=n.from([1])),a.writeBuffer(c,o.Ber.Integer),a.endSequence()}}},function(e,a,t){e.exports=v;var i=t(0),o=t(3).Buffer,n=t(7),r=t(2),s=t(24),c=(t(13),t(10)),p=(t(1),t(5)),u=t(4),l=t(6),m=t(30),d={};d.openssh=t(133),d.x509=t(65),d.pem=t(134);var h=c.CertificateParseError,f=c.InvalidAlgorithmError;function v(e){i.object(e,"options"),i.arrayOfObject(e.subjects,"options.subjects"),p.assertCompatible(e.subjects[0],m,[1,0],"options.subjects"),p.assertCompatible(e.subjectKey,u,[1,0],"options.subjectKey"),p.assertCompatible(e.issuer,m,[1,0],"options.issuer"),void 0!==e.issuerKey&&p.assertCompatible(e.issuerKey,u,[1,0],"options.issuerKey"),i.object(e.signatures,"options.signatures"),i.buffer(e.serial,"options.serial"),i.date(e.validFrom,"options.validFrom"),i.date(e.validUntil,"optons.validUntil"),i.optionalArrayOfString(e.purposes,"options.purposes"),this._hashCache={},this.subjects=e.subjects,this.issuer=e.issuer,this.subjectKey=e.subjectKey,this.issuerKey=e.issuerKey,this.signatures=e.signatures,this.serial=e.serial,this.validFrom=e.validFrom,this.validUntil=e.validUntil,this.purposes=e.purposes}v.formats=d,v.prototype.toBuffer=function(e,a){return void 0===e&&(e="x509"),i.string(e,"format"),i.object(d[e],"formats[format]"),i.optionalObject(a,"options"),d[e].write(this,a)},v.prototype.toString=function(e,a){return void 0===e&&(e="pem"),this.toBuffer(e,a).toString()},v.prototype.fingerprint=function(e){void 0===e&&(e="sha256"),i.string(e,"algorithm");var a={type:"certificate",hash:this.hash(e),algorithm:e};return new s(a)},v.prototype.hash=function(e){if(i.string(e,"algorithm"),e=e.toLowerCase(),void 0===n.hashAlgs[e])throw new f(e);if(this._hashCache[e])return this._hashCache[e];var a=r.createHash(e).update(this.toBuffer("x509")).digest();return this._hashCache[e]=a,a},v.prototype.isExpired=function(e){return void 0===e&&(e=new Date),!(e.getTime()>=this.validFrom.getTime()&&e.getTime()<this.validUntil.getTime())},v.prototype.isSignedBy=function(e){return p.assertCompatible(e,v,[1,0],"issuer"),!!this.issuer.equals(e.subjects[0])&&(!(this.issuer.purposes&&this.issuer.purposes.length>0&&-1===this.issuer.purposes.indexOf("ca"))&&this.isSignedByKey(e.subjectKey))},v.prototype.getExtension=function(e){return i.string(e,"keyOrOid"),this.getExtensions().filter(function(a){return"x509"===a.format?a.oid===e:"openssh"===a.format&&a.name===e})[0]},v.prototype.getExtensions=function(){var e=[],a=this.signatures.x509;a&&a.extras&&a.extras.exts&&a.extras.exts.forEach(function(a){a.format="x509",e.push(a)});var t=this.signatures.openssh;return t&&t.exts&&t.exts.forEach(function(a){a.format="openssh",e.push(a)}),e},v.prototype.isSignedByKey=function(e){if(p.assertCompatible(e,u,[1,2],"issuerKey"),void 0!==this.issuerKey)return this.issuerKey.fingerprint("sha512").matches(e);var a=Object.keys(this.signatures)[0],t=d[a].verify(this,e);return t&&(this.issuerKey=e),t},v.prototype.signWith=function(e){p.assertCompatible(e,l,[1,2],"key");for(var a=Object.keys(d),t=!1,i=0;i<a.length;++i){if("pem"!==a[i])!0===d[a[i]].sign(this,e)&&(t=!0)}if(!t)throw new Error("Failed to sign the certificate for any available certificate formats")},v.createSelfSigned=function(e,a,t){var n;n=Array.isArray(e)?e:[e],i.arrayOfObject(n),n.forEach(function(e){p.assertCompatible(e,m,[1,0],"subject")}),p.assertCompatible(a,l,[1,2],"private key"),i.optionalObject(t,"options"),void 0===t&&(t={}),i.optionalObject(t.validFrom,"options.validFrom"),i.optionalObject(t.validUntil,"options.validUntil");var r=t.validFrom,s=t.validUntil;if(void 0===r&&(r=new Date),void 0===s){i.optionalNumber(t.lifetime,"options.lifetime");var c=t.lifetime;void 0===c&&(c=31536e4),(s=new Date).setTime(s.getTime()+1e3*c)}i.optionalBuffer(t.serial,"options.serial");var u=t.serial;void 0===u&&(u=o.from("0000000000000001","hex"));var d=t.purposes;if(void 0===d&&(d=[]),-1===d.indexOf("signature")&&d.push("signature"),-1===d.indexOf("ca")&&d.push("ca"),-1===d.indexOf("crl")&&d.push("crl"),d.length<=3){var h=n.filter(function(e){return"host"===e.type}),f=n.filter(function(e){return"user"===e.type});h.length>0&&-1===d.indexOf("serverAuth")&&d.push("serverAuth"),f.length>0&&-1===d.indexOf("clientAuth")&&d.push("clientAuth"),(f.length>0||h.length>0)&&(-1===d.indexOf("keyAgreement")&&d.push("keyAgreement"),"rsa"===a.type&&-1===d.indexOf("encryption")&&d.push("encryption"))}var g=new v({subjects:n,issuer:n[0],subjectKey:a.toPublic(),issuerKey:a.toPublic(),signatures:{},serial:u,validFrom:r,validUntil:s,purposes:d});return g.signWith(a),g},v.create=function(e,a,t,n,r){var s;s=Array.isArray(e)?e:[e],i.arrayOfObject(s),s.forEach(function(e){p.assertCompatible(e,m,[1,0],"subject")}),p.assertCompatible(a,u,[1,0],"key"),l.isPrivateKey(a)&&(a=a.toPublic()),p.assertCompatible(t,m,[1,0],"issuer"),p.assertCompatible(n,l,[1,2],"issuer key"),i.optionalObject(r,"options"),void 0===r&&(r={}),i.optionalObject(r.validFrom,"options.validFrom"),i.optionalObject(r.validUntil,"options.validUntil");var c=r.validFrom,d=r.validUntil;if(void 0===c&&(c=new Date),void 0===d){i.optionalNumber(r.lifetime,"options.lifetime");var h=r.lifetime;void 0===h&&(h=31536e4),(d=new Date).setTime(d.getTime()+1e3*h)}i.optionalBuffer(r.serial,"options.serial");var f=r.serial;void 0===f&&(f=o.from("0000000000000001","hex"));var g=r.purposes;void 0===g&&(g=[]),-1===g.indexOf("signature")&&g.push("signature"),!0===r.ca&&(-1===g.indexOf("ca")&&g.push("ca"),-1===g.indexOf("crl")&&g.push("crl"));var b=s.filter(function(e){return"host"===e.type}),y=s.filter(function(e){return"user"===e.type});b.length>0&&-1===g.indexOf("serverAuth")&&g.push("serverAuth"),y.length>0&&-1===g.indexOf("clientAuth")&&g.push("clientAuth"),(y.length>0||b.length>0)&&(-1===g.indexOf("keyAgreement")&&g.push("keyAgreement"),"rsa"===a.type&&-1===g.indexOf("encryption")&&g.push("encryption"));var x=new v({subjects:s,issuer:t,subjectKey:a,issuerKey:n.toPublic(),signatures:{},serial:f,validFrom:c,validUntil:d,purposes:g});return x.signWith(n),x},v.parse=function(e,a,t){"string"!=typeof e&&i.buffer(e,"data"),void 0===a&&(a="auto"),i.string(a,"format"),"string"==typeof t&&(t={filename:t}),i.optionalObject(t,"options"),void 0===t&&(t={}),i.optionalString(t.filename,"options.filename"),void 0===t.filename&&(t.filename="(unnamed)"),i.object(d[a],"formats[format]");try{return d[a].read(e,t)}catch(e){throw new h(t.filename,a,e)}},v.isCertificate=function(e,a){return p.isCompatible(e,v,a)},v.prototype._sshpkApiVersion=[1,1],v._oldVersionDetect=function(e){return[1,0]}},function(e,a,t){e.exports=u;var i=t(0),o=(t(7),t(2),t(24),t(13),t(10),t(1),t(5)),n=t(14),r=t(3).Buffer,s=/^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i,c={cn:"2.5.4.3",o:"2.5.4.10",ou:"2.5.4.11",l:"2.5.4.7",s:"2.5.4.8",c:"2.5.4.6",sn:"2.5.4.4",postalCode:"2.5.4.17",serialNumber:"2.5.4.5",street:"2.5.4.9",x500UniqueIdentifier:"2.5.4.45",role:"2.5.4.72",telephoneNumber:"2.5.4.20",description:"2.5.4.13",dc:"0.9.2342.19200300.100.1.25",uid:"0.9.2342.19200300.100.1.1",mail:"0.9.2342.19200300.100.1.3",title:"2.5.4.12",gn:"2.5.4.42",initials:"2.5.4.43",pseudonym:"2.5.4.65",emailAddress:"1.2.840.113549.1.9.1"},p={};function u(e){var a=this;if(i.object(e,"options"),i.arrayOfObject(e.components,"options.components"),this.components=e.components,this.componentLookup={},this.components.forEach(function(e){e.name&&!e.oid&&(e.oid=c[e.name]),e.oid&&!e.name&&(e.name=p[e.oid]),void 0===a.componentLookup[e.name]&&(a.componentLookup[e.name]=[]),a.componentLookup[e.name].push(e)}),this.componentLookup.cn&&this.componentLookup.cn.length>0&&(this.cn=this.componentLookup.cn[0].value),i.optionalString(e.type,"options.type"),void 0===e.type)1===this.components.length&&this.componentLookup.cn&&1===this.componentLookup.cn.length&&this.componentLookup.cn[0].value.match(s)?(this.type="host",this.hostname=this.componentLookup.cn[0].value):this.componentLookup.dc&&this.components.length===this.componentLookup.dc.length?(this.type="host",this.hostname=this.componentLookup.dc.map(function(e){return e.value}).join(".")):this.componentLookup.uid&&this.components.length===this.componentLookup.uid.length?(this.type="user",this.uid=this.componentLookup.uid[0].value):this.componentLookup.cn&&1===this.componentLookup.cn.length&&this.componentLookup.cn[0].value.match(s)?(this.type="host",this.hostname=this.componentLookup.cn[0].value):this.componentLookup.uid&&1===this.componentLookup.uid.length?(this.type="user",this.uid=this.componentLookup.uid[0].value):this.componentLookup.mail&&1===this.componentLookup.mail.length?(this.type="email",this.email=this.componentLookup.mail[0].value):this.componentLookup.cn&&1===this.componentLookup.cn.length?(this.type="user",this.uid=this.componentLookup.cn[0].value):this.type="unknown";else if(this.type=e.type,"host"===this.type)this.hostname=e.hostname;else if("user"===this.type)this.uid=e.uid;else{if("email"!==this.type)throw new Error("Unknown type "+this.type);this.email=e.email}}Object.keys(c).forEach(function(e){p[c[e]]=e}),u.prototype.toString=function(){return this.components.map(function(e){var a=e.name.toUpperCase();a=a.replace(/=/g,"\\=");var t=e.value;return a+"="+(t=t.replace(/,/g,"\\,"))}).join(", ")},u.prototype.get=function(e,a){i.string(e,"name");var t=this.componentLookup[e];if(void 0!==t&&0!==t.length){if(!a&&t.length>1)throw new Error("Multiple values for attribute "+e);return a?t.map(function(e){return e.value}):t[0].value}},u.prototype.toArray=function(e){return this.components.map(function(e){return{name:e.name,value:e.value}})};var l=/[^a-zA-Z0-9 '(),+.\/:=?-]/,m=/[^\x00-\x7f]/;function d(e,a){if("**"===e||"**"===a)return!0;var t=e.split("."),i=a.split(".");if(t.length!==i.length)return!1;for(var o=0;o<t.length;++o)if("*"!==t[o]&&"*"!==i[o]&&t[o]!==i[o])return!1;return!0}u.prototype.toAsn1=function(e,a){e.startSequence(a),this.components.forEach(function(a){if(e.startSequence(n.Ber.Constructor|n.Ber.Set),e.startSequence(),e.writeOID(a.oid),a.asn1type===n.Ber.Utf8String||a.value.match(m)){var t=r.from(a.value,"utf8");e.writeBuffer(t,n.Ber.Utf8String)}else if(a.asn1type===n.Ber.IA5String||a.value.match(l))e.writeString(a.value,n.Ber.IA5String);else{var i=n.Ber.PrintableString;void 0!==a.asn1type&&(i=a.asn1type),e.writeString(a.value,i)}e.endSequence(),e.endSequence()}),e.endSequence()},u.prototype.equals=function(e){if(!u.isIdentity(e,[1,0]))return!1;if(e.components.length!==this.components.length)return!1;for(var a=0;a<this.components.length;++a){if(this.components[a].oid!==e.components[a].oid)return!1;if(!d(this.components[a].value,e.components[a].value))return!1}return!0},u.forHost=function(e){return i.string(e,"hostname"),new u({type:"host",hostname:e,components:[{name:"cn",value:e}]})},u.forUser=function(e){return i.string(e,"uid"),new u({type:"user",uid:e,components:[{name:"uid",value:e}]})},u.forEmail=function(e){return i.string(e,"email"),new u({type:"email",email:e,components:[{name:"mail",value:e}]})},u.parseDN=function(e){i.string(e,"dn");for(var a=[""],t=0,o=e;o.length>0;){var n;if(null!==(n=/^,/.exec(o)))a[++t]="",o=o.slice(n[0].length);else if(null!==(n=/^\\,/.exec(o)))a[t]+=",",o=o.slice(n[0].length);else if(null!==(n=/^\\./.exec(o)))a[t]+=n[0],o=o.slice(n[0].length);else{if(null===(n=/^[^\\,]+/.exec(o)))throw new Error("Failed to parse DN");a[t]+=n[0],o=o.slice(n[0].length)}}return new u({components:a.map(function(e){for(var a=(e=e.trim()).indexOf("=");a>0&&"\\"===e.charAt(a-1);)a=e.indexOf("=",a+1);if(-1===a)throw new Error("Failed to parse DN");return{name:e.slice(0,a).toLowerCase().replace(/\\=/g,"="),value:e.slice(a+1)}})})},u.fromArray=function(e){return i.arrayOfObject(e,"components"),e.forEach(function(e){if(i.object(e,"component"),i.string(e.name,"component.name"),!r.isBuffer(e.value)&&"string"!=typeof e.value)throw new Error("Invalid component value")}),new u({components:e})},u.parseAsn1=function(e,a){var t=[];e.readSequence(a);for(var i=e.offset+e.length;e.offset<i;){e.readSequence(n.Ber.Constructor|n.Ber.Set);var o=e.offset+e.length;e.readSequence();var r,s=e.readOID(),c=e.peek();switch(c){case n.Ber.PrintableString:case n.Ber.IA5String:case n.Ber.OctetString:case n.Ber.T61String:r=e.readString(c);break;case n.Ber.Utf8String:r=(r=e.readString(c,!0)).toString("utf8");break;case n.Ber.CharacterString:case n.Ber.BMPString:r=(r=e.readString(c,!0)).toString("utf16le");break;default:throw new Error("Unknown asn1 type "+c)}t.push({oid:s,asn1type:c,value:r}),e._offset=o}return e._offset=i,new u({components:t})},u.isIdentity=function(e,a){return o.isCompatible(e,u,a)},u.prototype._sshpkApiVersion=[1,0],u._oldVersionDetect=function(e){return[1,0]}},function(e,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var i=t(97);a.formatAPIObjectInput=i.formatAPIObjectInput,a.formatAPIObjectOutput=i.formatAPIObjectOutput;var o=t(36);a.keybaseExec=o.default;var n=t(101);a.randomTempDir=n.default;var r=t(103);a.rmdirRecursive=r.default;var s=t(104);a.keybaseStatus=s.default;var c=t(105);a.pingKeybaseService=c.default;var p=t(106);a.whichKeybase=p.default;var u=t(107);a.timeout=u.default},function(e,a){e.exports=require("child_process")},function(e,a,t){var i=t(0),o=t(41),n=t(1),r={sha1:!0,sha256:!0,sha512:!0},s={rsa:!0,dsa:!0,ecdsa:!0};function c(e,a){Error.captureStackTrace&&Error.captureStackTrace(this,a||c),this.message=e,this.name=a.name}function p(e){c.call(this,e,p)}n.inherits(c,Error),n.inherits(p,c),e.exports={HASH_ALGOS:r,PK_ALGOS:s,HttpSignatureError:c,InvalidAlgorithmError:p,validateAlgorithm:function(e){var a=e.toLowerCase().split("-");if(2!==a.length)throw new p(a[0].toUpperCase()+" is not a valid algorithm");if("hmac"!==a[0]&&!s[a[0]])throw new p(a[0].toUpperCase()+" type keys are not supported");if(!r[a[1]])throw new p(a[1].toUpperCase()+" is not a supported hash algorithm");return a},sshKeyToPEM:function(e){return i.string(e,"ssh_key"),o.parseKey(e,"ssh").toString("pem")},fingerprint:function(e){return i.string(e,"ssh_key"),o.parseKey(e,"ssh").fingerprint("md5").toString("hex")},pemToRsaSSHKey:function(e,a){i.equal("string",typeof e,"typeof pem");var t=o.parseKey(e,"pem");return t.comment=a,t.toString("ssh")}}},function(e,a,t){var i=t(25).BigInteger,o=i.prototype.Barrett;function n(e,a){this.x=a,this.q=e}function r(e,a,t,o){this.curve=e,this.x=a,this.y=t,this.z=null==o?i.ONE:o,this.zinv=null}function s(e,a,t){this.q=e,this.a=this.fromBigInteger(a),this.b=this.fromBigInteger(t),this.infinity=new r(this,null,null),this.reducer=new o(this.q)}n.prototype.equals=function(e){return e==this||this.q.equals(e.q)&&this.x.equals(e.x)},n.prototype.toBigInteger=function(){return this.x},n.prototype.negate=function(){return new n(this.q,this.x.negate().mod(this.q))},n.prototype.add=function(e){return new n(this.q,this.x.add(e.toBigInteger()).mod(this.q))},n.prototype.subtract=function(e){return new n(this.q,this.x.subtract(e.toBigInteger()).mod(this.q))},n.prototype.multiply=function(e){return new n(this.q,this.x.multiply(e.toBigInteger()).mod(this.q))},n.prototype.square=function(){return new n(this.q,this.x.square().mod(this.q))},n.prototype.divide=function(e){return new n(this.q,this.x.multiply(e.toBigInteger().modInverse(this.q)).mod(this.q))},r.prototype.getX=function(){null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q));var e=this.x.toBigInteger().multiply(this.zinv);return this.curve.reduce(e),this.curve.fromBigInteger(e)},r.prototype.getY=function(){null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q));var e=this.y.toBigInteger().multiply(this.zinv);return this.curve.reduce(e),this.curve.fromBigInteger(e)},r.prototype.equals=function(e){return e==this||(this.isInfinity()?e.isInfinity():e.isInfinity()?this.isInfinity():!!e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q).equals(i.ZERO)&&e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q).equals(i.ZERO))},r.prototype.isInfinity=function(){return null==this.x&&null==this.y||this.z.equals(i.ZERO)&&!this.y.toBigInteger().equals(i.ZERO)},r.prototype.negate=function(){return new r(this.curve,this.x,this.y.negate(),this.z)},r.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var a=e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q),t=e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q);if(i.ZERO.equals(t))return i.ZERO.equals(a)?this.twice():this.curve.getInfinity();var o=new i("3"),n=this.x.toBigInteger(),s=this.y.toBigInteger(),c=(e.x.toBigInteger(),e.y.toBigInteger(),t.square()),p=c.multiply(t),u=n.multiply(c),l=a.square().multiply(this.z),m=l.subtract(u.shiftLeft(1)).multiply(e.z).subtract(p).multiply(t).mod(this.curve.q),d=u.multiply(o).multiply(a).subtract(s.multiply(p)).subtract(l.multiply(a)).multiply(e.z).add(a.multiply(p)).mod(this.curve.q),h=p.multiply(this.z).multiply(e.z).mod(this.curve.q);return new r(this.curve,this.curve.fromBigInteger(m),this.curve.fromBigInteger(d),h)},r.prototype.twice=function(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var e=new i("3"),a=this.x.toBigInteger(),t=this.y.toBigInteger(),o=t.multiply(this.z),n=o.multiply(t).mod(this.curve.q),s=this.curve.a.toBigInteger(),c=a.square().multiply(e);i.ZERO.equals(s)||(c=c.add(this.z.square().multiply(s)));var p=(c=c.mod(this.curve.q)).square().subtract(a.shiftLeft(3).multiply(n)).shiftLeft(1).multiply(o).mod(this.curve.q),u=c.multiply(e).multiply(a).subtract(n.shiftLeft(1)).shiftLeft(2).multiply(n).subtract(c.square().multiply(c)).mod(this.curve.q),l=o.square().multiply(o).shiftLeft(3).mod(this.curve.q);return new r(this.curve,this.curve.fromBigInteger(p),this.curve.fromBigInteger(u),l)},r.prototype.multiply=function(e){if(this.isInfinity())return this;if(0==e.signum())return this.curve.getInfinity();var a,t=e,o=t.multiply(new i("3")),n=this.negate(),r=this;for(a=o.bitLength()-2;a>0;--a){r=r.twice();var s=o.testBit(a);s!=t.testBit(a)&&(r=r.add(s?this:n))}return r},r.prototype.multiplyTwo=function(e,a,t){var i;i=e.bitLength()>t.bitLength()?e.bitLength()-1:t.bitLength()-1;for(var o=this.curve.getInfinity(),n=this.add(a);i>=0;)o=o.twice(),e.testBit(i)?o=t.testBit(i)?o.add(n):o.add(this):t.testBit(i)&&(o=o.add(a)),--i;return o},s.prototype.getQ=function(){return this.q},s.prototype.getA=function(){return this.a},s.prototype.getB=function(){return this.b},s.prototype.equals=function(e){return e==this||this.q.equals(e.q)&&this.a.equals(e.a)&&this.b.equals(e.b)},s.prototype.getInfinity=function(){return this.infinity},s.prototype.fromBigInteger=function(e){return new n(this.q,e)},s.prototype.reduce=function(e){this.reducer.reduce(e)},s.prototype.encodePointHex=function(e){if(e.isInfinity())return"00";var a=e.getX().toBigInteger().toString(16),t=e.getY().toBigInteger().toString(16),i=this.getQ().toString(16).length;for(i%2!=0&&i++;a.length<i;)a="0"+a;for(;t.length<i;)t="0"+t;return"04"+a+t},s.prototype.decodePointHex=function(e){var a;switch(parseInt(e.substr(0,2),16)){case 0:return this.infinity;case 2:a=!1;case 3:null==a&&(a=!0);var t=e.length-2,o=e.substr(2,t),n=this.fromBigInteger(new i(o,16)),s=n.multiply(n.square().add(this.getA())).add(this.getB()).sqrt();if(null==s)throw"Invalid point compression";var c=s.toBigInteger();return c.testBit(0)!=a&&(s=this.fromBigInteger(this.getQ().subtract(c))),new r(this,n,s);case 4:case 6:case 7:t=(e.length-2)/2,o=e.substr(2,t);var p=e.substr(t+2,t);return new r(this,this.fromBigInteger(new i(o,16)),this.fromBigInteger(new i(p,16)));default:return null}},s.prototype.encodeCompressedPointHex=function(e){if(e.isInfinity())return"00";var a=e.getX().toBigInteger().toString(16),t=this.getQ().toString(16).length;for(t%2!=0&&t++;a.length<t;)a="0"+a;return(e.getY().toBigInteger().isEven()?"02":"03")+a},n.prototype.getR=function(){if(null!=this.r)return this.r;this.r=null;var e=this.q.bitLength();e>128&&(-1==this.q.shiftRight(e-64).intValue()&&(this.r=i.ONE.shiftLeft(e).subtract(this.q)));return this.r},n.prototype.modMult=function(e,a){return this.modReduce(e.multiply(a))},n.prototype.modReduce=function(e){if(null!=this.getR()){for(var a=q.bitLength();e.bitLength()>a+1;){var t=e.shiftRight(a),o=e.subtract(t.shiftLeft(a));this.getR().equals(i.ONE)||(t=t.multiply(this.getR())),e=t.add(o)}for(;e.compareTo(q)>=0;)e=e.subtract(q)}else e=e.mod(q);return e},n.prototype.sqrt=function(){if(!this.q.testBit(0))throw"unsupported";if(this.q.testBit(1)){var e=new n(this.q,this.x.modPow(this.q.shiftRight(2).add(i.ONE),this.q));return e.square().equals(this)?e:null}var a=this.q.subtract(i.ONE),t=a.shiftRight(1);if(!this.x.modPow(t,this.q).equals(i.ONE))return null;var o,r,s=a.shiftRight(2).shiftLeft(1).add(i.ONE),c=this.x,p=modDouble(modDouble(c));do{var u;do{u=new i(this.q.bitLength(),new SecureRandom)}while(u.compareTo(this.q)>=0||!u.multiply(u).subtract(p).modPow(t,this.q).equals(a));var l=this.lucasSequence(u,c,s);if(o=l[0],r=l[1],this.modMult(r,r).equals(p))return r.testBit(0)&&(r=r.add(q)),r=r.shiftRight(1),new n(q,r)}while(o.equals(i.ONE)||o.equals(a));return null},n.prototype.lucasSequence=function(e,a,t){for(var o=t.bitLength(),n=t.getLowestSetBit(),r=i.ONE,s=i.TWO,c=e,p=i.ONE,u=i.ONE,l=o-1;l>=n+1;--l)p=this.modMult(p,u),t.testBit(l)?(u=this.modMult(p,a),r=this.modMult(r,c),s=this.modReduce(c.multiply(s).subtract(e.multiply(p))),c=this.modReduce(c.multiply(c).subtract(u.shiftLeft(1)))):(u=p,r=this.modReduce(r.multiply(s).subtract(p)),c=this.modReduce(c.multiply(s).subtract(e.multiply(p))),s=this.modReduce(s.multiply(s).subtract(p.shiftLeft(1))));p=this.modMult(p,u),u=this.modMult(p,a),r=this.modReduce(r.multiply(s).subtract(p)),s=this.modReduce(c.multiply(s).subtract(e.multiply(p))),p=this.modMult(p,u);for(l=1;l<=n;++l)r=this.modMult(r,s),s=this.modReduce(s.multiply(s).subtract(p.shiftLeft(1))),p=this.modMult(p,p);return[r,s]};a={ECCurveFp:s,ECPointFp:r,ECFieldElementFp:n};e.exports=a},function(e,a,t){e.exports={read:function(e,a){return p.read(e,a)},readSSHPrivate:function(e,a,c){var p=(a=new l({buffer:a})).readCString();o.strictEqual(p,d,"bad magic string");var h=a.readString(),f=a.readString(),v=a.readBuffer();if(1!==a.readInt())throw new Error("OpenSSH-format key file contains multiple keys: this is unsupported.");var g=a.readBuffer();if("public"===e)return o.ok(a.atEnd(),"excess bytes left after key"),u.read(g);var b=a.readBuffer();o.ok(a.atEnd(),"excess bytes left after key");var y=new l({buffer:v});switch(f){case"none":if("none"!==h)throw new Error('OpenSSH-format key uses KDF "none" but specifies a cipher other than "none"');break;case"bcrypt":var x=y.readBuffer(),k=y.readInt(),w=r.opensshCipherInfo(h);if(void 0===i&&(i=t(62)),"string"==typeof c.passphrase&&(c.passphrase=n.from(c.passphrase,"utf-8")),!n.isBuffer(c.passphrase))throw new m.KeyEncryptedError(c.filename,"OpenSSH");var j=new Uint8Array(c.passphrase),E=new Uint8Array(x),S=new Uint8Array(w.keySize+w.blockSize),_=i.pbkdf(j,j.length,E,E.length,S,S.length,k);if(0!==_)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");var R=(S=n.from(S)).slice(0,w.keySize),A=S.slice(w.keySize,w.keySize+w.blockSize),C=s.createDecipheriv(w.opensslName,R,A);C.setAutoPadding(!1);var q,O=[];for(C.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),C.write(b),C.end();null!==(q=C.read());)O.push(q);b=n.concat(O);break;default:throw new Error('OpenSSH-format key uses unknown KDF "'+f+'"')}var z=(a=new l({buffer:b})).readInt(),P=a.readInt();if(z!==P)throw new Error("Incorrect passphrase supplied, could not decrypt key");var F={},T=u.readInternal(F,"private",a.remainder());a.skip(F.consumed);var I=a.readString();return T.comment=I,T},write:function(e,a){var p;p=c.isPrivateKey(e)?e.toPublic():e;var u,m,h="none",f="none",v=n.alloc(0),g={blockSize:8};void 0!==a&&("string"==typeof(u=a.passphrase)&&(u=n.from(u,"utf-8")),void 0!==u&&(o.buffer(u,"options.passphrase"),o.optionalString(a.cipher,"options.cipher"),void 0===(h=a.cipher)&&(h="aes128-ctr"),g=r.opensshCipherInfo(h),f="bcrypt"));if(c.isPrivateKey(e)){m=new l({});var b=s.randomBytes(4).readUInt32BE(0);m.writeInt(b),m.writeInt(b),m.write(e.toBuffer("rfc4253")),m.writeString(e.comment||"");for(var y=1;m._offset%g.blockSize!=0;)m.writeChar(y++);m=m.toBuffer()}switch(f){case"none":break;case"bcrypt":var x=s.randomBytes(16),k=new l({});k.writeBuffer(x),k.writeInt(16),v=k.toBuffer(),void 0===i&&(i=t(62));var w=new Uint8Array(u),j=new Uint8Array(x),E=new Uint8Array(g.keySize+g.blockSize),S=i.pbkdf(w,w.length,j,j.length,E,E.length,16);if(0!==S)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");var _=(E=n.from(E)).slice(0,g.keySize),R=E.slice(g.keySize,g.keySize+g.blockSize),A=s.createCipheriv(g.opensslName,_,R);A.setAutoPadding(!1);var C,q=[];for(A.once("error",function(e){throw e}),A.write(m),A.end();null!==(C=A.read());)q.push(C);m=n.concat(q);break;default:throw new Error("Unsupported kdf "+f)}var O,z=new l({});z.writeCString(d),z.writeString(h),z.writeString(f),z.writeBuffer(v),z.writeInt(1),z.writeBuffer(p.toBuffer("rfc4253")),m&&z.writeBuffer(m);z=z.toBuffer(),O=c.isPrivateKey(e)?"OPENSSH PRIVATE KEY":"OPENSSH PUBLIC KEY";var P=z.toString("base64"),F=P.length+P.length/70+18+16+2*O.length+10;z=n.alloc(F);var T=0;T+=z.write("-----BEGIN "+O+"-----\n",T);for(var I=0;I<P.length;){var D=I+70;D>P.length&&(D=P.length),T+=z.write(P.slice(I,D),T),z[T++]=10,I=D}return T+=z.write("-----END "+O+"-----\n",T),z.slice(0,T)}};var i,o=t(0),n=(t(14),t(3).Buffer),r=(t(7),t(5)),s=t(2),c=(t(4),t(6)),p=t(15),u=t(16),l=t(27),m=t(10);var d="openssh-key-v1"},function(e,a,t){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var o=t(32),n=i(t(52)),r=i(t(8));a.default=function(e,a,t,i){void 0===i&&(i={stdinBuffer:void 0,onStdOut:void 0,timeout:void 0});var s=t.slice();a&&s.unshift("--home",a);var c=r.default.join(e,"keybase"),p=o.spawn(c,s),u=[],l=[];i.stdinBuffer&&p.stdin.write(i.stdinBuffer),p.stdin.end();var m=n.default.createInterface({input:p.stdout});i.onStdOut?m.on("line",i.onStdOut):p.stdout.on("data",function(e){u.push(e)}),p.stderr.on("data",function(e){l.push(e)});var d=!1;return i.timeout&&setTimeout(function(){d||p.kill()},i.timeout),new Promise(function(e,a){p.on("close",function(t){d=!0;var o=null;if(t){var n=Buffer.concat(l).toString("utf8");a(new Error(n))}else{var r=Buffer.concat(u).toString("utf8");try{o=i.json?JSON.parse(r):r}catch(e){a(e)}}e(o)})})}},function(e,a,t){"use strict";var i=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},o=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var r=t(31),s=n(t(109)),c=t(110),p=n(t(8)),u=function(){function e(e){this._workingDir=e,this.initialized=!1,this.verbose=!1,this._spawnedProcesses=[]}return e.prototype._init=function(e,a){return i(this,void 0,void 0,function(){var t;return o(this,function(i){switch(i.label){case 0:return[4,r.keybaseStatus(this._workingDir,e)];case 1:return t=i.sent(),this.homeDir=e,this.username=t.username,this.devicename=t.devicename,this.initialized=!0,a&&(this._initializedWithOptions=a),[2]}})})},e.prototype._deinit=function(){return i(this,void 0,void 0,function(){var e,a;return o(this,function(t){for(e=0,a=this._spawnedProcesses;e<a.length;e++)a[e].kill();return[2]})})},e.prototype._runApiCommand=function(e){return i(this,void 0,void 0,function(){var a,t,i,n,p;return o(this,function(o){switch(o.label){case 0:return a=e.options?r.formatAPIObjectInput(e.options,e.apiName):void 0,t={method:e.method,params:{version:c.API_VERSIONS[e.apiName],options:a}},i=s.default(t),n=i.length,[4,r.keybaseExec(this._workingDir,this.homeDir,[e.apiName,"api"],{stdinBuffer:Buffer.alloc(n,i,"utf8"),json:!0,timeout:e.timeout})];case 1:if((p=o.sent()).hasOwnProperty("error"))throw new Error(p.error.message);return[2,r.formatAPIObjectOutput(p.result,{apiName:e.apiName,method:e.method})]}})})},e.prototype._guardInitialized=function(){return i(this,void 0,void 0,function(){return o(this,function(e){if(!this.initialized)throw new Error("The client is not yet initialized.");return[2]})})},e.prototype._pathToKeybaseBinary=function(){return p.default.join(this._workingDir,"keybase")},e}();a.default=u},function(e,a,t){"use strict";var i=Object.prototype.hasOwnProperty,o=Object.prototype.toString,n=Object.defineProperty,r=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===o.call(e)},c=function(e){if(!e||"[object Object]"!==o.call(e))return!1;var a,t=i.call(e,"constructor"),n=e.constructor&&e.constructor.prototype&&i.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!t&&!n)return!1;for(a in e);return void 0===a||i.call(e,a)},p=function(e,a){n&&"__proto__"===a.name?n(e,a.name,{enumerable:!0,configurable:!0,value:a.newValue,writable:!0}):e[a.name]=a.newValue},u=function(e,a){if("__proto__"===a){if(!i.call(e,a))return;if(r)return r(e,a).value}return e[a]};e.exports=function e(){var a,t,i,o,n,r,l=arguments[0],m=1,d=arguments.length,h=!1;for("boolean"==typeof l&&(h=l,l=arguments[1]||{},m=2),(null==l||"object"!=typeof l&&"function"!=typeof l)&&(l={});m<d;++m)if(null!=(a=arguments[m]))for(t in a)i=u(l,t),l!==(o=u(a,t))&&(h&&o&&(c(o)||(n=s(o)))?(n?(n=!1,r=i&&s(i)?i:[]):r=i&&c(i)?i:{},p(l,{name:t,newValue:e(h,r,o)})):void 0!==o&&p(l,{name:t,newValue:o}));return l}},function(e,a){e.exports=require("net")},function(e,a,t){"use strict";var i=t(120),o=t(2),n=t(22).Buffer,r="undefined"==typeof setImmediate?process.nextTick:setImmediate;a.paramsHaveRequestBody=function(e){return e.body||e.requestBodyStream||e.json&&"boolean"!=typeof e.json||e.multipart},a.safeStringify=function(e,a){var t;try{t=JSON.stringify(e,a)}catch(o){t=i(e,a)}return t},a.md5=function(e){return o.createHash("md5").update(e).digest("hex")},a.isReadStream=function(e){return e.readable&&e.path&&e.mode},a.toBase64=function(e){return n.from(e||"","utf8").toString("base64")},a.copy=function(e){var a={};return Object.keys(e).forEach(function(t){a[t]=e[t]}),a},a.version=function(){var e=process.version.replace("v","").split(".");return{major:parseInt(e[0],10),minor:parseInt(e[1],10),patch:parseInt(e[2],10)}},a.defer=r},function(e,a,t){var i=t(4),o=t(24),n=t(13),r=t(6),s=t(29),c=t(30),p=t(10);e.exports={Key:i,parseKey:i.parse,Fingerprint:o,parseFingerprint:o.parse,Signature:n,parseSignature:n.parse,PrivateKey:r,parsePrivateKey:r.parse,generatePrivateKey:r.generate,Certificate:s,parseCertificate:s.parse,createSelfSignedCertificate:s.createSelfSigned,createCertificate:s.create,Identity:c,identityFromDN:c.parseDN,identityForHost:c.forHost,identityForUser:c.forUser,identityForEmail:c.forEmail,identityFromArray:c.fromArray,FingerprintFormatError:p.FingerprintFormatError,InvalidAlgorithmError:p.InvalidAlgorithmError,KeyParseError:p.KeyParseError,SignatureParseError:p.SignatureParseError,KeyEncryptedError:p.KeyEncryptedError,CertificateParseError:p.CertificateParseError}},function(e,a){e.exports={newInvalidAsn1Error:function(e){var a=new Error;return a.name="InvalidAsn1Error",a.message=e||"",a}}},function(e,a){e.exports={EOC:0,Boolean:1,Integer:2,BitString:3,OctetString:4,Null:5,OID:6,ObjectDescriptor:7,External:8,Real:9,Enumeration:10,PDV:11,Utf8String:12,RelativeOID:13,Sequence:16,Set:17,NumericString:18,PrintableString:19,T61String:20,VideotexString:21,IA5String:22,UTCTime:23,GeneralizedTime:24,GraphicString:25,VisibleString:26,GeneralString:28,UniversalString:29,CharacterString:30,BMPString:31,Constructor:32,Context:128}},function(e,a,t){e.exports={DiffieHellman:h,generateECDSA:function(e){var a=[];if(l){var t={nistp256:"prime256v1",nistp384:"secp384r1",nistp521:"secp521r1"}[e],i=o.createECDH(t);return i.generateKeys(),a.push({name:"curve",data:n.from(e)}),a.push({name:"Q",data:i.getPublicKey()}),a.push({name:"d",data:i.getPrivateKey()}),new u({type:"ecdsa",curve:e,parts:a})}var r=new f(e),s=r.getN(),c=Math.ceil((s.bitLength()+64)/8),p=new d(o.randomBytes(c)),m=s.subtract(d.ONE),h=p.mod(m).add(d.ONE),v=r.getG().multiply(h);return h=n.from(h.toByteArray()),v=n.from(r.getCurve().encodePointHex(v),"hex"),a.push({name:"curve",data:n.from(e)}),a.push({name:"Q",data:v}),a.push({name:"d",data:h}),new u({type:"ecdsa",curve:e,parts:a})},generateED25519:function(){var e=c.sign.keyPair(),a=n.from(e.secretKey),t=n.from(e.publicKey);i.strictEqual(a.length,64),i.strictEqual(t.length,32);var o=[];return o.push({name:"A",data:t}),o.push({name:"k",data:a.slice(0,32)}),new u({type:"ed25519",parts:o})}};var i=t(0),o=t(2),n=t(3).Buffer,r=t(7),s=t(5),c=t(26),p=t(4),u=t(6),l=void 0!==o.createECDH,m=(t(131),t(34)),d=t(25).BigInteger;function h(e){if(s.assertCompatible(e,p,[1,4],"key"),this._isPriv=u.isPrivateKey(e,[1,3]),this._algo=e.type,this._curve=e.curve,this._key=e,"dsa"===e.type){if(!l)throw new Error("Due to bugs in the node 0.10 crypto API, node 0.12.x or later is required to use DH");this._dh=o.createDiffieHellman(e.part.p.data,void 0,e.part.g.data,void 0),this._p=e.part.p,this._g=e.part.g,this._isPriv&&this._dh.setPrivateKey(e.part.x.data),this._dh.setPublicKey(e.part.y.data)}else if("ecdsa"===e.type){if(!l)return this._ecParams=new f(this._curve),void(this._isPriv&&(this._priv=new g(this._ecParams,e.part.d.data)));var a={nistp256:"prime256v1",nistp384:"secp384r1",nistp521:"secp521r1"}[e.curve];if(this._dh=o.createECDH(a),"object"!=typeof this._dh||"function"!=typeof this._dh.setPrivateKey)return l=!1,void h.call(this,e);this._isPriv&&this._dh.setPrivateKey(e.part.d.data),this._dh.setPublicKey(e.part.Q.data)}else{if("curve25519"!==e.type)throw new Error("DH not supported for "+e.type+" keys");this._isPriv&&(s.assertCompatible(e,u,[1,5],"key"),this._priv=e.part.k.data)}}function f(e){var a=r.curves[e];i.object(a);var t=new d(a.p),o=new d(a.a),n=new d(a.b),s=new d(a.n),c=d.ONE,p=new m.ECCurveFp(t,o,n),u=p.decodePointHex(a.G.toString("hex"));this.curve=p,this.g=u,this.n=s,this.h=c}function v(e,a){this._params=e,0===a[0]&&(a=a.slice(1)),this._pub=e.getCurve().decodePointHex(a.toString("hex"))}function g(e,a){this._params=e,this._priv=new d(s.mpNormalize(a))}h.prototype.getPublicKey=function(){return this._isPriv?this._key.toPublic():this._key},h.prototype.getPrivateKey=function(){return this._isPriv?this._key:void 0},h.prototype.getKey=h.prototype.getPrivateKey,h.prototype._keyCheck=function(e,a){if(i.object(e,"key"),a||s.assertCompatible(e,u,[1,3],"key"),s.assertCompatible(e,p,[1,4],"key"),e.type!==this._algo)throw new Error("A "+e.type+" key cannot be used in "+this._algo+" Diffie-Hellman");if(e.curve!==this._curve)throw new Error("A key from the "+e.curve+" curve cannot be used with a "+this._curve+" Diffie-Hellman");"dsa"===e.type&&(i.deepEqual(e.part.p,this._p,"DSA key prime does not match"),i.deepEqual(e.part.g,this._g,"DSA key generator does not match"))},h.prototype.setKey=function(e){if(this._keyCheck(e),"dsa"===e.type)this._dh.setPrivateKey(e.part.x.data),this._dh.setPublicKey(e.part.y.data);else if("ecdsa"===e.type)l?(this._dh.setPrivateKey(e.part.d.data),this._dh.setPublicKey(e.part.Q.data)):this._priv=new g(this._ecParams,e.part.d.data);else if("curve25519"===e.type){var a=e.part.k;e.part.k||(a=e.part.r),this._priv=a.data,0===this._priv[0]&&(this._priv=this._priv.slice(1)),this._priv=this._priv.slice(0,32)}this._key=e,this._isPriv=!0},h.prototype.setPrivateKey=h.prototype.setKey,h.prototype.computeSecret=function(e){if(this._keyCheck(e,!0),!this._isPriv)throw new Error("DH exchange has not been initialized with a private key yet");var a;if("dsa"===this._algo)return this._dh.computeSecret(e.part.y.data);if("ecdsa"===this._algo)return l?this._dh.computeSecret(e.part.Q.data):(a=new v(this._ecParams,e.part.Q.data),this._priv.deriveSharedSecret(a));if("curve25519"===this._algo){for(a=e.part.A.data;0===a[0]&&a.length>32;)a=a.slice(1);var t=this._priv;i.strictEqual(a.length,32),i.strictEqual(t.length,32);var o=c.box.before(new Uint8Array(a),new Uint8Array(t));return n.from(o)}throw new Error("Invalid algorithm: "+this._algo)},h.prototype.generateKey=function(){var e,a,t=[];if("dsa"===this._algo)return this._dh.generateKeys(),t.push({name:"p",data:this._p.data}),t.push({name:"q",data:this._key.part.q.data}),t.push({name:"g",data:this._g.data}),t.push({name:"y",data:this._dh.getPublicKey()}),t.push({name:"x",data:this._dh.getPrivateKey()}),this._key=new u({type:"dsa",parts:t}),this._isPriv=!0,this._key;if("ecdsa"===this._algo){if(l)return this._dh.generateKeys(),t.push({name:"curve",data:n.from(this._curve)}),t.push({name:"Q",data:this._dh.getPublicKey()}),t.push({name:"d",data:this._dh.getPrivateKey()}),this._key=new u({type:"ecdsa",curve:this._curve,parts:t}),this._isPriv=!0,this._key;var r=this._ecParams.getN(),s=new d(o.randomBytes(r.bitLength())),p=r.subtract(d.ONE);return e=s.mod(p).add(d.ONE),a=this._ecParams.getG().multiply(e),e=n.from(e.toByteArray()),a=n.from(this._ecParams.getCurve().encodePointHex(a),"hex"),this._priv=new g(this._ecParams,e),t.push({name:"curve",data:n.from(this._curve)}),t.push({name:"Q",data:a}),t.push({name:"d",data:e}),this._key=new u({type:"ecdsa",curve:this._curve,parts:t}),this._isPriv=!0,this._key}if("curve25519"===this._algo){var m=c.box.keyPair();return e=n.from(m.secretKey),a=n.from(m.publicKey),e=n.concat([e,a]),i.strictEqual(e.length,64),i.strictEqual(a.length,32),t.push({name:"A",data:a}),t.push({name:"k",data:e}),this._key=new u({type:"curve25519",parts:t}),this._isPriv=!0,this._key}throw new Error("Invalid algorithm: "+this._algo)},h.prototype.generateKeys=h.prototype.generateKey,f.prototype.getCurve=function(){return this.curve},f.prototype.getG=function(){return this.g},f.prototype.getN=function(){return this.n},f.prototype.getH=function(){return this.h},g.prototype.deriveSharedSecret=function(e){i.ok(e instanceof v);var a=e._pub.multiply(this._priv);return n.from(a.getX().toBigInteger().toByteArray())}},function(e,a,t){e.exports={read:function(e,a){return u.read(e,a,"pkcs1")},readPkcs1:function(e,a,t){switch(e){case"RSA":if("public"===a)return function(e){var a=m(e,"modulus"),t=m(e,"exponent");return new c({type:"rsa",parts:[{name:"e",data:t},{name:"n",data:a}]})}(t);if("private"===a)return function(e){var a=m(e,"version");i.strictEqual(a[0],0);var t=m(e,"modulus"),o=m(e,"public exponent"),n=m(e,"private exponent"),r=m(e,"prime1"),s=m(e,"prime2"),c=m(e,"exponent1"),u=m(e,"exponent2"),l=m(e,"iqmp");return new p({type:"rsa",parts:[{name:"n",data:t},{name:"e",data:o},{name:"d",data:n},{name:"iqmp",data:l},{name:"p",data:r},{name:"q",data:s},{name:"dmodp",data:c},{name:"dmodq",data:u}]})}(t);throw new Error("Unknown key type: "+a);case"DSA":if("public"===a)return function(e){var a=m(e,"y"),t=m(e,"p"),i=m(e,"q"),o=m(e,"g");return new c({type:"dsa",parts:[{name:"y",data:a},{name:"p",data:t},{name:"q",data:i},{name:"g",data:o}]})}(t);if("private"===a)return function(e){var a=m(e,"version");i.strictEqual(a.readUInt8(0),0);var t=m(e,"p"),o=m(e,"q"),n=m(e,"g"),r=m(e,"y"),s=m(e,"x");return new p({type:"dsa",parts:[{name:"p",data:t},{name:"q",data:o},{name:"g",data:n},{name:"y",data:r},{name:"x",data:s}]})}(t);throw new Error("Unknown key type: "+a);case"EC":case"ECDSA":if("private"===a)return function(e){var a=m(e,"version");i.strictEqual(a.readUInt8(0),1);var t=e.readString(o.Ber.OctetString,!0);e.readSequence(160);var r=l(e);i.string(r,"a known elliptic curve"),e.readSequence(161);var c=e.readString(o.Ber.BitString,!0);c=s.ecNormalize(c);var u={type:"ecdsa",parts:[{name:"curve",data:n.from(r)},{name:"Q",data:c},{name:"d",data:t}]};return new p(u)}(t);if("public"===a)return function(e){e.readSequence();var a=e.readOID();i.strictEqual(a,"1.2.840.10045.2.1","must be ecPublicKey");for(var t,p=e.readOID(),u=Object.keys(r.curves),l=0;l<u.length;++l){var m=u[l],d=r.curves[m];if(d.pkcs8oid===p){t=m;break}}i.string(t,"a known ECDSA named curve");var h=e.readString(o.Ber.BitString,!0);h=s.ecNormalize(h);var f={type:"ecdsa",parts:[{name:"curve",data:n.from(t)},{name:"Q",data:h}]};return new c(f)}(t);throw new Error("Unknown key type: "+a);case"EDDSA":case"EdDSA":if("private"===a)return function(e){var a=m(e,"version");i.strictEqual(a.readUInt8(0),1);var t=e.readString(o.Ber.OctetString,!0);e.readSequence(160);var n=e.readOID();i.strictEqual(n,"1.3.101.112","the ed25519 curve identifier"),e.readSequence(161);var r=s.readBitString(e),c={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(r,32)},{name:"k",data:t}]};return new p(c)}(t);throw new Error(a+" keys not supported with EdDSA");default:throw new Error("Unknown key algo: "+e)}},write:function(e,a){return u.write(e,a,"pkcs1")},writePkcs1:function(e,a){switch(e.startSequence(),a.type){case"rsa":p.isPrivateKey(a)?function(e,a){var t=n.from([0]);e.writeBuffer(t,o.Ber.Integer),e.writeBuffer(a.part.n.data,o.Ber.Integer),e.writeBuffer(a.part.e.data,o.Ber.Integer),e.writeBuffer(a.part.d.data,o.Ber.Integer),e.writeBuffer(a.part.p.data,o.Ber.Integer),e.writeBuffer(a.part.q.data,o.Ber.Integer),a.part.dmodp&&a.part.dmodq||s.addRSAMissing(a);e.writeBuffer(a.part.dmodp.data,o.Ber.Integer),e.writeBuffer(a.part.dmodq.data,o.Ber.Integer),e.writeBuffer(a.part.iqmp.data,o.Ber.Integer)}(e,a):function(e,a){e.writeBuffer(a.part.n.data,o.Ber.Integer),e.writeBuffer(a.part.e.data,o.Ber.Integer)}(e,a);break;case"dsa":p.isPrivateKey(a)?function(e,a){var t=n.from([0]);e.writeBuffer(t,o.Ber.Integer),e.writeBuffer(a.part.p.data,o.Ber.Integer),e.writeBuffer(a.part.q.data,o.Ber.Integer),e.writeBuffer(a.part.g.data,o.Ber.Integer),e.writeBuffer(a.part.y.data,o.Ber.Integer),e.writeBuffer(a.part.x.data,o.Ber.Integer)}(e,a):function(e,a){e.writeBuffer(a.part.y.data,o.Ber.Integer),e.writeBuffer(a.part.p.data,o.Ber.Integer),e.writeBuffer(a.part.q.data,o.Ber.Integer),e.writeBuffer(a.part.g.data,o.Ber.Integer)}(e,a);break;case"ecdsa":p.isPrivateKey(a)?function(e,a){var t=n.from([1]);e.writeBuffer(t,o.Ber.Integer),e.writeBuffer(a.part.d.data,o.Ber.OctetString),e.startSequence(160);var c=a.part.curve.data.toString(),p=r.curves[c].pkcs8oid;i.string(p,"a known ECDSA named curve"),e.writeOID(p),e.endSequence(),e.startSequence(161);var u=s.ecNormalize(a.part.Q.data,!0);e.writeBuffer(u,o.Ber.BitString),e.endSequence()}(e,a):function(e,a){e.startSequence(),e.writeOID("1.2.840.10045.2.1");var t=a.part.curve.data.toString(),n=r.curves[t].pkcs8oid;i.string(n,"a known ECDSA named curve"),e.writeOID(n),e.endSequence();var c=s.ecNormalize(a.part.Q.data,!0);e.writeBuffer(c,o.Ber.BitString)}(e,a);break;case"ed25519":p.isPrivateKey(a)?function(e,a){var t=n.from([1]);e.writeBuffer(t,o.Ber.Integer),e.writeBuffer(a.part.k.data,o.Ber.OctetString),e.startSequence(160),e.writeOID("1.3.101.112"),e.endSequence(),e.startSequence(161),s.writeBitString(e,a.part.A.data),e.endSequence()}(e,a):function(e,a){throw new Error("Public keys are not supported for EdDSA PKCS#1")}();break;default:throw new Error("Unknown key algo: "+a.type)}e.endSequence()}};var i=t(0),o=t(14),n=t(3).Buffer,r=t(7),s=t(5),c=t(4),p=t(6),u=t(15),l=t(28).readECDSACurve;function m(e,a){return i.strictEqual(e.peek(),o.Ber.Integer,a+" is not an Integer"),s.mpNormalize(e.readString(o.Ber.Integer,!0))}},function(e,a,t){e.exports={read:function(e,a){"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var t=e.split("\n");if(t[0].match(/^Private-key-format\: v1/)){var c=t[1].split(" "),l=parseInt(c[1],10),m=c[2];if(!p[l])throw new Error("Unsupported algorithm: "+m);return function(e,a){if(p[e].match(/^RSA-/))return function(e){var a={};e.forEach(function(e){"Modulus:"===e.split(" ")[0]?a.n=u(e):"PublicExponent:"===e.split(" ")[0]?a.e=u(e):"PrivateExponent:"===e.split(" ")[0]?a.d=u(e):"Prime1:"===e.split(" ")[0]?a.p=u(e):"Prime2:"===e.split(" ")[0]?a.q=u(e):"Exponent1:"===e.split(" ")[0]?a.dmodp=u(e):"Exponent2:"===e.split(" ")[0]?a.dmodq=u(e):"Coefficient:"===e.split(" ")[0]&&(a.iqmp=u(e))});var t={type:"rsa",parts:[{name:"e",data:s.mpNormalize(a.e)},{name:"n",data:s.mpNormalize(a.n)},{name:"d",data:s.mpNormalize(a.d)},{name:"p",data:s.mpNormalize(a.p)},{name:"q",data:s.mpNormalize(a.q)},{name:"dmodp",data:s.mpNormalize(a.dmodp)},{name:"dmodq",data:s.mpNormalize(a.dmodq)},{name:"iqmp",data:s.mpNormalize(a.iqmp)}]};return new r(t)}(a);if("ECDSA-P384-SHA384"===p[e]||"ECDSA-P256-SHA256"===p[e]){var t=o.from(a[0].split(" ")[1],"base64"),i="nistp384",n=384;"ECDSA-P256-SHA256"===p[e]&&(i="nistp256",n=256);var c=s.publicFromPrivateECDSA(i,t),l=c.part.Q.data,m={type:"ecdsa",curve:i,size:n,parts:[{name:"curve",data:o.from(i)},{name:"d",data:t},{name:"Q",data:l}]};return new r(m)}throw new Error("Unsupported algorithm: "+p[e])}(l,t.slice(2))}var d=0;for(;t[d].match(/^\;/);)d++;if((t[d].match(/\. IN KEY /)||t[d].match(/\. IN DNSKEY /))&&0===t[d+1].length)return function(e){var a=e.split(" "),t=parseInt(a[5],10);if(!p[t])throw new Error("Unsupported algorithm: "+t);var i=a.slice(6,a.length).join(),r=o.from(i,"base64");if(p[t].match(/^RSA-/)){var c=r.readUInt8(0);if(3!=c&&1!=c)throw new Error("Cannot parse dnssec key: unsupported exponent length");var u=r.slice(1,c+1);u=s.mpNormalize(u);var l=r.slice(1+c);l=s.mpNormalize(l);var m={type:"rsa",parts:[]};return m.parts.push({name:"e",data:u}),m.parts.push({name:"n",data:l}),new n(m)}if("ECDSA-P384-SHA384"===p[t]||"ECDSA-P256-SHA256"===p[t]){var d="nistp384",h=384;p[t].match(/^ECDSA-P256-SHA256/)&&(d="nistp256",h=256);var f={type:"ecdsa",curve:d,size:h,parts:[{name:"curve",data:o.from(d)},{name:"Q",data:s.ecNormalize(r)}]};return new n(f)}throw new Error("Unsupported algorithm: "+p[t])}(t[d]);throw new Error("Cannot parse dnssec key")},write:function(e,a){if(r.isPrivateKey(e)){if("rsa"===e.type)return function(e,a){e.part.dmodp&&e.part.dmodq||s.addRSAMissing(e);var t="";t+="Private-key-format: v1.3\n",t+="Algorithm: "+function(e){if(e&&e.hashAlgo&&"sha1"!==e.hashAlgo){if("sha256"===e.hashAlgo)return"8 (RSASHA256)";if("sha512"===e.hashAlgo)return"10 (RSASHA512)";throw new Error("Unknown or unsupported hash: "+e.hashAlgo)}return"5 (RSASHA1)"}(a)+"\n";var i=s.mpDenormalize(e.part.n.data);t+="Modulus: "+i.toString("base64")+"\n";var n=s.mpDenormalize(e.part.e.data);t+="PublicExponent: "+n.toString("base64")+"\n";var r=s.mpDenormalize(e.part.d.data);t+="PrivateExponent: "+r.toString("base64")+"\n";var c=s.mpDenormalize(e.part.p.data);t+="Prime1: "+c.toString("base64")+"\n";var p=s.mpDenormalize(e.part.q.data);t+="Prime2: "+p.toString("base64")+"\n";var u=s.mpDenormalize(e.part.dmodp.data);t+="Exponent1: "+u.toString("base64")+"\n";var m=s.mpDenormalize(e.part.dmodq.data);t+="Exponent2: "+m.toString("base64")+"\n";var d=s.mpDenormalize(e.part.iqmp.data);t+="Coefficient: "+d.toString("base64")+"\n";var h=new Date;return t+="Created: "+l(h)+"\n",t+="Publish: "+l(h)+"\n",t+="Activate: "+l(h)+"\n",o.from(t,"ascii")}(e,a);if("ecdsa"===e.type)return function(e,a){var t="";if(t+="Private-key-format: v1.3\n","nistp256"===e.curve)t+="Algorithm: 13 (ECDSAP256SHA256)\n";else{if("nistp384"!==e.curve)throw new Error("Unsupported curve");t+="Algorithm: 14 (ECDSAP384SHA384)\n"}var i=e.part.d.data.toString("base64");t+="PrivateKey: "+i+"\n";var n=new Date;return t+="Created: "+l(n)+"\n",t+="Publish: "+l(n)+"\n",t+="Activate: "+l(n)+"\n",o.from(t,"ascii")}(e);throw new Error("Unsupported algorithm: "+e.type)}throw n.isKey(e)?new Error('Format "dnssec" only supports writing private keys'):new Error("key is not a Key or PrivateKey")}};var i=t(0),o=t(3).Buffer,n=t(4),r=t(6),s=t(5),c=(t(27),t(44),{"rsa-sha1":5,"rsa-sha256":8,"rsa-sha512":10,"ecdsa-p256-sha256":13,"ecdsa-p384-sha384":14}),p={};function u(e){return o.from(e.split(" ")[1],"base64")}function l(e){var a=e.getFullYear()+""+(e.getMonth()+1)+e.getUTCDate();return a+=""+e.getUTCHours()+e.getUTCMinutes(),a+=e.getUTCSeconds()}Object.keys(c).forEach(function(e){p[c[e]]=e.toUpperCase()})},function(e,a){function t(e){this.dict=e||{}}t.prototype.set=function(e,a,t){if("object"!=typeof e){void 0===t&&(t=!0);var i=this.has(e);return!t&&i?this.dict[i]=this.dict[i]+","+a:this.dict[i||e]=a,i}for(var o in e)this.set(o,e[o],a)},t.prototype.has=function(e){for(var a=Object.keys(this.dict),t=(e=e.toLowerCase(),0);t<a.length;t++)if(a[t].toLowerCase()===e)return a[t];return!1},t.prototype.get=function(e){var a,t;e=e.toLowerCase();var i=this.dict;return Object.keys(i).forEach(function(o){t=o.toLowerCase(),e===t&&(a=i[o])}),a},t.prototype.swap=function(e){var a=this.has(e);if(a!==e){if(!a)throw new Error('There is no header than matches "'+e+'"');this.dict[e]=this.dict[a],delete this.dict[a]}},t.prototype.del=function(e){var a=this.has(e);return delete this.dict[a||e]},e.exports=function(e){return new t(e)},e.exports.httpify=function(e,a){var i=new t(a);return e.setHeader=function(e,a,t){if(void 0!==a)return i.set(e,a,t)},e.hasHeader=function(e){return i.has(e)},e.getHeader=function(e){return i.get(e)},e.removeHeader=function(e){return i.del(e)},e.headers=i.dict,i}},function(e,a,t){"use strict";var i=t(163),o=t(49),n=t(21),r=t(79),s=t(165);function c(e,a,t){var i=this._refs[t];if("string"==typeof i){if(!this._refs[i])return c.call(this,e,a,i);i=this._refs[i]}if((i=i||this._schemas[t])instanceof r)return d(i.schema,this._opts.inlineRefs)?i.schema:i.validate||this._compile(i);var o,n,s,u=p.call(this,a,t);return u&&(o=u.schema,a=u.root,s=u.baseId),o instanceof r?n=o.validate||e.call(this,o.schema,a,void 0,s):void 0!==o&&(n=d(o,this._opts.inlineRefs)?o:e.call(this,o,a,void 0,s)),n}function p(e,a){var t=i.parse(a),o=f(t),n=h(this._getId(e.schema));if(0===Object.keys(e.schema).length||o!==n){var s=g(o),c=this._refs[s];if("string"==typeof c)return function(e,a,t){var i=p.call(this,e,a);if(i){var o=i.schema,n=i.baseId;e=i.root;var r=this._getId(o);return r&&(n=b(n,r)),l.call(this,t,n,o,e)}}.call(this,e,c,t);if(c instanceof r)c.validate||this._compile(c),e=c;else{if(!((c=this._schemas[s])instanceof r))return;if(c.validate||this._compile(c),s==g(a))return{schema:c,root:e,baseId:n};e=c}if(!e.schema)return;n=h(this._getId(e.schema))}return l.call(this,t,n,e.schema,e)}e.exports=c,c.normalizeId=g,c.fullPath=h,c.url=b,c.ids=function(e){var a=g(this._getId(e)),t={"":a},r={"":h(a,!1)},c={},p=this;return s(e,{allKeys:!0},function(e,a,s,u,l,m,d){if(""!==a){var h=p._getId(e),f=t[u],v=r[u]+"/"+l;if(void 0!==d&&(v+="/"+("number"==typeof d?d:n.escapeFragment(d))),"string"==typeof h){h=f=g(f?i.resolve(f,h):h);var b=p._refs[h];if("string"==typeof b&&(b=p._refs[b]),b&&b.schema){if(!o(e,b.schema))throw new Error('id "'+h+'" resolves to more than one schema')}else if(h!=g(v))if("#"==h[0]){if(c[h]&&!o(e,c[h]))throw new Error('id "'+h+'" resolves to more than one schema');c[h]=e}else p._refs[h]=v}t[a]=f,r[a]=v}}),c},c.inlineRef=d,c.schema=p;var u=n.toHash(["properties","patternProperties","enum","dependencies","definitions"]);function l(e,a,t,i){if(e.fragment=e.fragment||"","/"==e.fragment.slice(0,1)){for(var o=e.fragment.split("/"),r=1;r<o.length;r++){var s=o[r];if(s){if(void 0===(t=t[s=n.unescapeFragment(s)]))break;var c;if(!u[s]&&((c=this._getId(t))&&(a=b(a,c)),t.$ref)){var l=b(a,t.$ref),m=p.call(this,i,l);m&&(t=m.schema,i=m.root,a=m.baseId)}}}return void 0!==t&&t!==i.schema?{schema:t,root:i,baseId:a}:void 0}}var m=n.toHash(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum"]);function d(e,a){return!1!==a&&(void 0===a||!0===a?function e(a){var t;if(Array.isArray(a)){for(var i=0;i<a.length;i++)if("object"==typeof(t=a[i])&&!e(t))return!1}else for(var o in a){if("$ref"==o)return!1;if("object"==typeof(t=a[o])&&!e(t))return!1}return!0}(e):a?function e(a){var t,i=0;if(Array.isArray(a)){for(var o=0;o<a.length;o++)if("object"==typeof(t=a[o])&&(i+=e(t)),i==1/0)return 1/0}else for(var n in a){if("$ref"==n)return 1/0;if(m[n])i++;else if("object"==typeof(t=a[n])&&(i+=e(t)+1),i==1/0)return 1/0}return i}(e)<=a:void 0)}function h(e,a){return!1!==a&&(e=g(e)),f(i.parse(e))}function f(e){return i.serialize(e).split("#")[0]+"#"}var v=/#\/?$/;function g(e){return e?e.replace(v,""):""}function b(e,a){return a=g(a),i.resolve(e,a)}},function(e,a,t){"use strict";var i=Array.isArray,o=Object.keys,n=Object.prototype.hasOwnProperty;e.exports=function e(a,t){if(a===t)return!0;if(a&&t&&"object"==typeof a&&"object"==typeof t){var r,s,c,p=i(a),u=i(t);if(p&&u){if((s=a.length)!=t.length)return!1;for(r=s;0!=r--;)if(!e(a[r],t[r]))return!1;return!0}if(p!=u)return!1;var l=a instanceof Date,m=t instanceof Date;if(l!=m)return!1;if(l&&m)return a.getTime()==t.getTime();var d=a instanceof RegExp,h=t instanceof RegExp;if(d!=h)return!1;if(d&&h)return a.toString()==t.toString();var f=o(a);if((s=f.length)!==o(t).length)return!1;for(r=s;0!=r--;)if(!n.call(t,f[r]))return!1;for(r=s;0!=r--;)if(!e(a[c=f[r]],t[c]))return!1;return!0}return a!=a&&t!=t}},function(e,a,t){"use strict";var i=t(48);function o(e,a,t){this.message=t||o.message(e,a),this.missingRef=i.url(e,a),this.missingSchema=i.normalizeId(i.fullPath(this.missingRef))}function n(e){return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}e.exports={Validation:n(function(e){this.message="validation failed",this.errors=e,this.ajv=this.validation=!0}),MissingRef:n(o)},o.message=function(e,a){return"can't resolve reference "+a+" from id "+e}},function(e,a,t){var i=t(217),o=t(218);e.exports=function(e,a,t){var n=a&&t||0;"string"==typeof e&&(a="binary"===e?new Array(16):null,e=null);var r=(e=e||{}).random||(e.rng||i)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,a)for(var s=0;s<16;++s)a[n+s]=r[s];return a||o(r)}},function(e,a){e.exports=require("readline")},function(e,a,t){"use strict";var i=t(115),o=i.Cookie,n=i.CookieJar;function r(e){this._jar=new n(e,{looseMode:!0})}a.parse=function(e){if(e&&e.uri&&(e=e.uri),"string"!=typeof e)throw new Error("The cookie function only accepts STRING as param");return o.parse(e,{loose:!0})},r.prototype.setCookie=function(e,a,t){return this._jar.setCookieSync(e,a,t||{})},r.prototype.getCookieString=function(e){return this._jar.getCookieStringSync(e)},r.prototype.getCookies=function(e){return this._jar.getCookiesSync(e)},a.jar=function(e){return new r(e)}},function(e,a,t){"use strict";
/*!
 * Copyright (c) 2018, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=t(116);a.getPublicSuffix=function(e){return i.get(e)}},function(e,a){e.exports=require("punycode")},function(e,a,t){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */function i(){}a.Store=i,i.prototype.synchronous=!1,i.prototype.findCookie=function(e,a,t,i){throw new Error("findCookie is not implemented")},i.prototype.findCookies=function(e,a,t){throw new Error("findCookies is not implemented")},i.prototype.putCookie=function(e,a){throw new Error("putCookie is not implemented")},i.prototype.updateCookie=function(e,a,t){throw new Error("updateCookie is not implemented")},i.prototype.removeCookie=function(e,a,t,i){throw new Error("removeCookie is not implemented")},i.prototype.removeCookies=function(e,a,t){throw new Error("removeCookies is not implemented")},i.prototype.getAllCookies=function(e){throw new Error("getAllCookies is not implemented (therefore jar cannot be serialized)")}},function(e,a,t){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=t(54);a.permuteDomain=function(e){var a=i.getPublicSuffix(e);if(!a)return null;if(a==e)return[e];for(var t=e.slice(0,-(a.length+1)).split(".").reverse(),o=a,n=[o];t.length;)o=t.shift()+"."+o,n.push(o);return n}},function(e,a,t){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */a.pathMatch=function(e,a){if(a===e)return!0;if(0===e.indexOf(a)){if("/"===a.substr(-1))return!0;if("/"===e.substr(a.length,1))return!0}return!1}},function(e,a){e.exports=require("buffer")},function(e,a,t){e.exports={Verifier:p,Signer:u};var i=t(26),o=t(19),n=t(1),r=t(0),s=t(3).Buffer,c=t(13);function p(e,a){if("sha512"!==a.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=e,this.chunks=[],o.Writable.call(this,{})}function u(e,a){if("sha512"!==a.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=e,this.chunks=[],o.Writable.call(this,{})}n.inherits(p,o.Writable),p.prototype._write=function(e,a,t){this.chunks.push(e),t()},p.prototype.update=function(e){"string"==typeof e&&(e=s.from(e,"binary")),this.chunks.push(e)},p.prototype.verify=function(e,a){var t;if(c.isSignature(e,[2,0])){if("ed25519"!==e.type)return!1;t=e.toBuffer("raw")}else if("string"==typeof e)t=s.from(e,"base64");else if(c.isSignature(e,[1,0]))throw new Error("signature was created by too old a version of sshpk and cannot be verified");return r.buffer(t),i.sign.detached.verify(new Uint8Array(s.concat(this.chunks)),new Uint8Array(t),new Uint8Array(this.key.part.A.data))},n.inherits(u,o.Writable),u.prototype._write=function(e,a,t){this.chunks.push(e),t()},u.prototype.update=function(e){"string"==typeof e&&(e=s.from(e,"binary")),this.chunks.push(e)},u.prototype.sign=function(){var e=i.sign.detached(new Uint8Array(s.concat(this.chunks)),new Uint8Array(s.concat([this.key.part.k.data,this.key.part.A.data]))),a=s.from(e),t=c.parse(a,"ed25519","raw");return t.hashAlgorithm="sha512",t}},function(e,a,t){e.exports={read:function(e,a){if("string"==typeof e){if(e.trim().match(/^[-]+[ ]*BEGIN/))return n.read(e,a);if(e.match(/^\s*ssh-[a-z]/))return r.read(e,a);if(e.match(/^\s*ecdsa-/))return r.read(e,a);if(e.match(/^putty-user-key-file-2:/i))return p.read(e,a);if(l(e))return c.read(e,a);e=o.from(e,"binary")}else{if(i.buffer(e),function(e){var a=0;for(;a<e.length&&(32===e[a]||10===e[a]);)++a;if(45!==e[a])return!1;for(;a<e.length&&45===e[a];)++a;for(;a<e.length&&32===e[a];)++a;return!(a+5>e.length||"BEGIN"!==e.slice(a,a+5).toString("ascii"))}(e))return n.read(e,a);if(function(e){var a=0;for(;a<e.length&&(32===e[a]||10===e[a]||9===e[a]);)++a;return a+4<=e.length&&"ssh-"===e.slice(a,a+4).toString("ascii")||a+6<=e.length&&"ecdsa-"===e.slice(a,a+6).toString("ascii")}(e))return r.read(e,a);if(function(e){var a=0;for(;a<e.length&&(32===e[a]||10===e[a]||9===e[a]);)++a;return a+22<=e.length&&"putty-user-key-file-2:"===e.slice(a,a+22).toString("ascii").toLowerCase()}(e))return p.read(e,a);if(l(e))return c.read(e,a)}if(e.readUInt32BE(0)<e.length)return s.read(e,a);throw new Error("Failed to auto-detect format of key")},write:function(e,a){throw new Error('"auto" format cannot be used for writing')}};var i=t(0),o=t(3).Buffer,n=(t(5),t(4),t(6),t(15)),r=t(63),s=t(16),c=t(46),p=t(64),u="Private-key-format: v1";function l(e){if(e.length<=u.length)return!1;if(e.slice(0,u.length).toString("ascii")===u)return!0;"string"!=typeof e&&(e=e.toString("ascii"));for(var a=e.split("\n"),t=0;a[t].match(/^\;/);)t++;return!!a[t].toString("ascii").match(/\. IN KEY /)||!!a[t].toString("ascii").match(/\. IN DNSKEY /)}},function(e,a,t){"use strict";var i=t(26).lowlevel.crypto_hash,o=0,n=function(){this.S=[new Uint32Array([3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946]),new Uint32Array([1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055]),new Uint32Array([3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504]),new Uint32Array([976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462])],this.P=new Uint32Array([608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731])};function r(e,a,t){return(e[0][a[t+3]]+e[1][a[t+2]]^e[2][a[t+1]])+e[3][a[t]]}function s(e,a){var t,i=0;for(t=0;t<4;t++,o++)o>=a&&(o=0),i=i<<8|e[o];return i}n.prototype.encipher=function(e,a){void 0===a&&(a=new Uint8Array(e.buffer),0!==e.byteOffset&&(a=a.subarray(e.byteOffset))),e[0]^=this.P[0];for(var t=1;t<16;t+=2)e[1]^=r(this.S,a,0)^this.P[t],e[0]^=r(this.S,a,4)^this.P[t+1];var i=e[0];e[0]=e[1]^this.P[17],e[1]=i},n.prototype.decipher=function(e){var a=new Uint8Array(e.buffer);0!==e.byteOffset&&(a=a.subarray(e.byteOffset)),e[0]^=this.P[17];for(var t=16;t>0;t-=2)e[1]^=r(this.S,a,0)^this.P[t],e[0]^=r(this.S,a,4)^this.P[t-1];var i=e[0];e[0]=e[1]^this.P[0],e[1]=i},n.prototype.expand0state=function(e,a){var t,i,n=new Uint32Array(2),r=new Uint8Array(n.buffer);for(t=0,o=0;t<18;t++)this.P[t]^=s(e,a);for(o=0,t=0;t<18;t+=2)this.encipher(n,r),this.P[t]=n[0],this.P[t+1]=n[1];for(t=0;t<4;t++)for(i=0;i<256;i+=2)this.encipher(n,r),this.S[t][i]=n[0],this.S[t][i+1]=n[1]},n.prototype.expandstate=function(e,a,t,i){var n,r,c=new Uint32Array(2);for(n=0,o=0;n<18;n++)this.P[n]^=s(t,i);for(n=0,o=0;n<18;n+=2)c[0]^=s(e,a),c[1]^=s(e,a),this.encipher(c),this.P[n]=c[0],this.P[n+1]=c[1];for(n=0;n<4;n++)for(r=0;r<256;r+=2)c[0]^=s(e,a),c[1]^=s(e,a),this.encipher(c),this.S[n][r]=c[0],this.S[n][r+1]=c[1];o=0},n.prototype.enc=function(e,a){for(var t=0;t<a;t++)this.encipher(e.subarray(2*t))},n.prototype.dec=function(e,a){for(var t=0;t<a;t++)this.decipher(e.subarray(2*t))};var c=8,p=32;function u(e,a,t){var i,o=new n,r=new Uint32Array(c),p=new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,105,116,101]);for(o.expandstate(a,64,e,64),i=0;i<64;i++)o.expand0state(a,64),o.expand0state(e,64);for(i=0;i<c;i++)r[i]=s(p,p.byteLength);for(i=0;i<64;i++)o.enc(r,r.byteLength/8);for(i=0;i<c;i++)t[4*i+3]=r[i]>>>24,t[4*i+2]=r[i]>>>16,t[4*i+1]=r[i]>>>8,t[4*i+0]=r[i]}e.exports={BLOCKS:c,HASHSIZE:p,hash:u,pbkdf:function(e,a,t,o,n,r,s){var c,l,m,d,h,f,v=new Uint8Array(64),g=new Uint8Array(64),b=new Uint8Array(p),y=new Uint8Array(p),x=new Uint8Array(o+4),k=r;if(s<1)return-1;if(0===a||0===o||0===r||r>b.byteLength*b.byteLength||o>1<<20)return-1;for(d=Math.floor((r+b.byteLength-1)/b.byteLength),m=Math.floor((r+d-1)/d),c=0;c<o;c++)x[c]=t[c];for(i(v,e,a),f=1;r>0;f++){for(x[o+0]=f>>>24,x[o+1]=f>>>16,x[o+2]=f>>>8,x[o+3]=f,i(g,x,o+4),u(v,g,y),c=b.byteLength;c--;)b[c]=y[c];for(c=1;c<s;c++)for(i(g,y,y.byteLength),u(v,g,y),l=0;l<b.byteLength;l++)b[l]^=y[l];for(m=Math.min(m,r),c=0;c<m&&!((h=c*d+(f-1))>=k);c++)n[h]=b[c];r-=c}return 0}}},function(e,a,t){e.exports={read:function(e,a){"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var t=e.trim().replace(/[\\\r]/g,""),r=t.match(s);r||(r=t.match(c));i.ok(r,"key must match regex");var p,u=n.algToKeyType(r[1]),l=o.from(r[2],"base64"),m={};if(r[4])try{p=n.read(l)}catch(e){r=t.match(c),i.ok(r,"key must match regex"),l=o.from(r[2],"base64"),p=n.readInternal(m,"public",l)}else p=n.readInternal(m,"public",l);if(i.strictEqual(u,p.type),r[4]&&r[4].length>0)p.comment=r[4];else if(m.consumed){var d=r[2]+(r[3]?r[3]:""),h=4*Math.ceil(m.consumed/3);d=d.slice(0,h-2).replace(/[^a-zA-Z0-9+\/=]/g,"")+d.slice(h-2);var f=m.consumed%3;for(f>0&&"="!==d.slice(h-1,h)&&h--;"="===d.slice(h,h+1);)h++;var v=d.slice(h);(v=v.replace(/[\r\n]/g," ").replace(/^\s+/,"")).match(/^[a-zA-Z0-9]/)&&(p.comment=v)}return p},write:function(e,a){if(i.object(e),!r.isKey(e))throw new Error("Must be a public key");var t=[],s=n.keyTypeToAlg(e);t.push(s);var c=n.write(e);t.push(c.toString("base64")),e.comment&&t.push(e.comment);return o.from(t.join(" "))}};var i=t(0),o=t(3).Buffer,n=t(16),r=(t(5),t(4)),s=(t(6),t(35),/^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([ \t]+([^ \t][^\n]*[\n]*)?)?$/),c=/^([a-z0-9-]+)[ \t\n]+([a-zA-Z0-9+\/][a-zA-Z0-9+\/ \t\n=]*)([^a-zA-Z0-9+\/ \t\n=].*)?$/},function(e,a,t){e.exports={read:function(e,a){var t,r=e.toString("ascii").split(/[\r\n]+/),c=!1,p=0;for(;p<r.length;)if((t=s(r[p++]))&&"putty-user-key-file-2"===t[0].toLowerCase()){c=!0;break}if(!c)throw new Error("No PuTTY format first line found");var u=t[1];t=s(r[p++]),i.equal(t[0].toLowerCase(),"encryption"),t=s(r[p++]),i.equal(t[0].toLowerCase(),"comment");var l=t[1];t=s(r[p++]),i.equal(t[0].toLowerCase(),"public-lines");var m=parseInt(t[1],10);if(!isFinite(m)||m<0||m>r.length)throw new Error("Invalid public-lines count");var d=o.from(r.slice(p,p+m).join(""),"base64"),h=n.algToKeyType(u),f=n.read(d);if(f.type!==h)throw new Error("Outer key algorithm mismatch");return f.comment=l,f},write:function(e,a){if(i.object(e),!r.isKey(e))throw new Error("Must be a public key");var t=n.keyTypeToAlg(e),s=n.write(e),c=e.comment||"",p=function(e,a){var t=[],i=0;for(;i<e.length;)t.push(e.slice(i,i+64)),i+=64;return t}(s.toString("base64"));return p.unshift("Public-Lines: "+p.length),p.unshift("Comment: "+c),p.unshift("Encryption: none"),p.unshift("PuTTY-User-Key-File-2: "+t),o.from(p.join("\n")+"\n")}};var i=t(0),o=t(3).Buffer,n=t(16),r=t(4);t(10);function s(e){var a=e.indexOf(":");if(-1===a)return null;var t=e.slice(0,a);for(++a;" "===e[a];)++a;return[t,e.slice(a)]}},function(e,a,t){e.exports={read:function(e,a){"string"==typeof e&&(e=n.from(e,"binary"));i.buffer(e,"buf");var t=new o.BerReader(e);if(t.readSequence(),Math.abs(t.length-t.remain)>1)throw new Error("DER sequence does not contain whole byte stream");var m=t.offset;t.readSequence();var h=t.offset+t.length,v=h;if(t.peek()===l(0)){t.readSequence(l(0));var g=t.readInt();i.ok(g<=3,"only x.509 versions up to v3 supported")}var b={signatures:{}},y=b.signatures.x509={};y.extras={},b.serial=function(e,a){return i.strictEqual(e.peek(),o.Ber.Integer,a+" is not an Integer"),r.mpNormalize(e.readString(o.Ber.Integer,!0))}(t,"serial"),t.readSequence();var x=t.offset+t.length,w=t.readOID();if(void 0===d[w])throw new Error("unknown signature algorithm "+w);t._offset=x,b.issuer=s.parseAsn1(t),t.readSequence(),b.validFrom=f(t),b.validUntil=f(t),b.subjects=[s.parseAsn1(t)],t.readSequence(),x=t.offset+t.length,b.subjectKey=u.readPkcs8(void 0,"public",t),t._offset=x,t.peek()===l(1)&&(t.readSequence(l(1)),y.extras.issuerUniqueID=e.slice(t.offset,t.offset+t.length),t._offset+=t.length);t.peek()===l(2)&&(t.readSequence(l(2)),y.extras.subjectUniqueID=e.slice(t.offset,t.offset+t.length),t._offset+=t.length);if(t.peek()===l(3)){t.readSequence(l(3));var j=t.offset+t.length;for(t.readSequence();t.offset<j;)k(b,e,t);i.strictEqual(t.offset,j)}i.strictEqual(t.offset,h),t.readSequence(),x=t.offset+t.length;var E=t.readOID(),S=d[E];if(void 0===S)throw new Error("unknown signature algorithm "+E);t._offset=x;var _=t.readString(o.Ber.BitString,!0);0===_[0]&&(_=_.slice(1));var R=S.split("-");return y.signature=c.parse(_,R[0],"asn1"),y.signature.hashAlgorithm=R[1],y.algo=S,y.cache=e.slice(m,v),new p(b)},verify:function(e,a){var t=e.signatures.x509;i.object(t,"x509 signature");var n=t.algo.split("-");if(n[0]!==a.type)return!1;var r=t.cache;if(void 0===r){var s=new o.BerWriter;S(e,s),r=s.buffer}var c=a.createVerify(n[1]);return c.write(r),c.verify(t.signature)},sign:function(e,a){void 0===e.signatures.x509&&(e.signatures.x509={});var t=e.signatures.x509;if(t.algo=a.type+"-"+a.defaultHashAlgorithm(),void 0===d[t.algo])return!1;var i=new o.BerWriter;S(e,i);var n=i.buffer;t.cache=n;var r=a.createSign();return r.write(n),e.signatures.x509.signature=r.sign(),!0},signAsync:function(e,a,t){void 0===e.signatures.x509&&(e.signatures.x509={});var i=e.signatures.x509,n=new o.BerWriter;S(e,n);var r=n.buffer;i.cache=r,a(r,function(e,a){e?t(e):(i.algo=a.type+"-"+a.hashAlgorithm,void 0!==d[i.algo]?(i.signature=a,t()):t(new Error('Invalid signing algorithm "'+i.algo+'"')))})},write:function(e,a){var t=e.signatures.x509;i.object(t,"x509 signature");var r=new o.BerWriter;r.startSequence(),t.cache?(r._ensure(t.cache.length),t.cache.copy(r._buf,r._offset),r._offset+=t.cache.length):S(e,r);r.startSequence(),r.writeOID(d[t.algo]),t.algo.match(/^rsa-/)&&r.writeNull();r.endSequence();var s=t.signature.toBuffer("asn1"),c=n.alloc(s.length+1);return c[0]=0,s.copy(c,1),r.writeBuffer(c,o.Ber.BitString),r.endSequence(),r.buffer}};var i=t(0),o=t(14),n=t(3).Buffer,r=(t(7),t(5)),s=(t(4),t(6),t(15),t(30)),c=t(13),p=t(29),u=t(28);function l(e){return o.Ber.Context|o.Ber.Constructor|e}function m(e){return o.Ber.Context|e}var d={"rsa-md5":"1.2.840.113549.1.1.4","rsa-sha1":"1.2.840.113549.1.1.5","rsa-sha256":"1.2.840.113549.1.1.11","rsa-sha384":"1.2.840.113549.1.1.12","rsa-sha512":"1.2.840.113549.1.1.13","dsa-sha1":"1.2.840.10040.4.3","dsa-sha256":"2.16.840.1.101.3.4.3.2","ecdsa-sha1":"1.2.840.10045.4.1","ecdsa-sha256":"1.2.840.10045.4.3.2","ecdsa-sha384":"1.2.840.10045.4.3.3","ecdsa-sha512":"1.2.840.10045.4.3.4","ed25519-sha512":"1.3.101.112"};Object.keys(d).forEach(function(e){d[d[e]]=e}),d["1.3.14.3.2.3"]="rsa-md5",d["1.3.14.3.2.29"]="rsa-sha1";var h={issuerKeyId:"2.5.29.35",altName:"2.5.29.17",basicConstraints:"2.5.29.19",keyUsage:"2.5.29.15",extKeyUsage:"2.5.29.37"};function f(e){if(e.peek()===o.Ber.UTCTime)return function(e){var a=e.match(w);i.ok(a,"timestamps must be in UTC");var t=new Date,o=t.getUTCFullYear(),n=100*Math.floor(o/100),r=parseInt(a[1],10);r+=o%100<50&&r>=60?n-1:n;t.setUTCFullYear(r,parseInt(a[2],10)-1,parseInt(a[3],10)),t.setUTCHours(parseInt(a[4],10),parseInt(a[5],10)),a[6]&&a[6].length>0&&t.setUTCSeconds(parseInt(a[6],10));return t}(e.readString(o.Ber.UTCTime));if(e.peek()===o.Ber.GeneralizedTime)return function(e){var a=e.match(j);i.ok(a);var t=new Date;t.setUTCFullYear(parseInt(a[1],10),parseInt(a[2],10)-1,parseInt(a[3],10)),t.setUTCHours(parseInt(a[4],10),parseInt(a[5],10)),a[6]&&a[6].length>0&&t.setUTCSeconds(parseInt(a[6],10));return t}(e.readString(o.Ber.GeneralizedTime));throw new Error("Unsupported date format")}function v(e,a){var t,i;a.getUTCFullYear()>=2050||a.getUTCFullYear()<1950?e.writeString((i="",i+=E((t=a).getUTCFullYear(),4),i+=E(t.getUTCMonth()+1),i+=E(t.getUTCDate()),i+=E(t.getUTCHours()),i+=E(t.getUTCMinutes()),i+=E(t.getUTCSeconds()),i+="Z"),o.Ber.GeneralizedTime):e.writeString(function(e){var a="";return a+=E(e.getUTCFullYear()%100),a+=E(e.getUTCMonth()+1),a+=E(e.getUTCDate()),a+=E(e.getUTCHours()),a+=E(e.getUTCMinutes()),a+=E(e.getUTCSeconds()),a+="Z"}(a),o.Ber.UTCTime)}var g={OtherName:l(0),RFC822Name:m(1),DNSName:m(2),X400Address:l(3),DirectoryName:l(4),EDIPartyName:l(5),URI:m(6),IPAddress:m(7),OID:m(8)},b={serverAuth:"1.3.6.1.5.5.7.3.1",clientAuth:"1.3.6.1.5.5.7.3.2",codeSigning:"1.3.6.1.5.5.7.3.3",joyentDocker:"1.3.6.1.4.1.38678.1.4.1",joyentCmon:"1.3.6.1.4.1.38678.1.4.2"},y={};Object.keys(b).forEach(function(e){y[b[e]]=e});var x=["signature","identity","keyEncryption","encryption","keyAgreement","ca","crl"];function k(e,a,t){t.readSequence();var i,n,r=t.offset+t.length,c=t.readOID(),p=e.signatures.x509;switch(p.extras.exts||(p.extras.exts=[]),t.peek()===o.Ber.Boolean&&(n=t.readBoolean()),c){case h.basicConstraints:t.readSequence(o.Ber.OctetString),t.readSequence();var u=t.offset+t.length,l=!1;t.peek()===o.Ber.Boolean&&(l=t.readBoolean()),void 0===e.purposes&&(e.purposes=[]),!0===l&&e.purposes.push("ca");var m={oid:c,critical:n};t.offset<u&&t.peek()===o.Ber.Integer&&(m.pathLen=t.readInt()),p.extras.exts.push(m);break;case h.extKeyUsage:t.readSequence(o.Ber.OctetString),t.readSequence(),void 0===e.purposes&&(e.purposes=[]);for(var d=t.offset+t.length;t.offset<d;){var f=t.readOID();e.purposes.push(y[f]||f)}-1!==e.purposes.indexOf("serverAuth")&&-1===e.purposes.indexOf("clientAuth")?e.subjects.forEach(function(e){"host"!==e.type&&(e.type="host",e.hostname=e.uid||e.email||e.components[0].value)}):-1!==e.purposes.indexOf("clientAuth")&&-1===e.purposes.indexOf("serverAuth")&&e.subjects.forEach(function(e){"user"!==e.type&&(e.type="user",e.uid=e.hostname||e.email||e.components[0].value)}),p.extras.exts.push({oid:c,critical:n});break;case h.keyUsage:t.readSequence(o.Ber.OctetString);var v=t.readString(o.Ber.BitString,!0);(function(e,a){for(var t=8*(e.length-1)-e[0],i={},o=0;o<t;++o){var n=1+Math.floor(o/8),r=7-o%8,s=1<<r,c=0!=(e[n]&s),p=a[o];c&&"string"==typeof p&&(i[p]=!0)}return Object.keys(i)})(v,x).forEach(function(a){void 0===e.purposes&&(e.purposes=[]),-1===e.purposes.indexOf(a)&&e.purposes.push(a)}),p.extras.exts.push({oid:c,critical:n,bits:v});break;case h.altName:t.readSequence(o.Ber.OctetString),t.readSequence();for(var b=t.offset+t.length;t.offset<b;)switch(t.peek()){case g.OtherName:case g.EDIPartyName:t.readSequence(),t._offset+=t.length;break;case g.OID:t.readOID(g.OID);break;case g.RFC822Name:var k=t.readString(g.RFC822Name);i=s.forEmail(k),e.subjects[0].equals(i)||e.subjects.push(i);break;case g.DirectoryName:t.readSequence(g.DirectoryName),i=s.parseAsn1(t),e.subjects[0].equals(i)||e.subjects.push(i);break;case g.DNSName:var w=t.readString(g.DNSName);i=s.forHost(w),e.subjects[0].equals(i)||e.subjects.push(i);break;default:t.readString(t.peek())}p.extras.exts.push({oid:c,critical:n});break;default:p.extras.exts.push({oid:c,critical:n,data:t.readString(o.Ber.OctetString,!0)})}t._offset=r}var w=/^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;var j=/^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;function E(e,a){void 0===a&&(a=2);for(var t=""+e;t.length<a;)t="0"+t;return t}function S(e,a){var t=e.signatures.x509;i.object(t,"x509 signature"),a.startSequence(),a.startSequence(l(0)),a.writeInt(2),a.endSequence(),a.writeBuffer(r.mpNormalize(e.serial),o.Ber.Integer),a.startSequence(),a.writeOID(d[t.algo]),t.algo.match(/^rsa-/)&&a.writeNull(),a.endSequence(),e.issuer.toAsn1(a),a.startSequence(),v(a,e.validFrom),v(a,e.validUntil),a.endSequence();var n=e.subjects[0],s=e.subjects.slice(1);if(n.toAsn1(a),u.writePkcs8(a,e.subjectKey),t.extras&&t.extras.issuerUniqueID&&a.writeBuffer(t.extras.issuerUniqueID,l(1)),t.extras&&t.extras.subjectUniqueID&&a.writeBuffer(t.extras.subjectUniqueID,l(2)),s.length>0||"host"===n.type||void 0!==e.purposes&&e.purposes.length>0||t.extras&&t.extras.exts){a.startSequence(l(3)),a.startSequence();var c=[];void 0!==e.purposes&&e.purposes.length>0&&(c.push({oid:h.basicConstraints,critical:!0}),c.push({oid:h.keyUsage,critical:!0}),c.push({oid:h.extKeyUsage,critical:!0})),c.push({oid:h.altName}),t.extras&&t.extras.exts&&(c=t.extras.exts);for(var p=0;p<c.length;++p){if(a.startSequence(),a.writeOID(c[p].oid),void 0!==c[p].critical&&a.writeBoolean(c[p].critical),c[p].oid===h.altName){a.startSequence(o.Ber.OctetString),a.startSequence(),"host"===n.type&&a.writeString(n.hostname,m(2));for(var f=0;f<s.length;++f)"host"===s[f].type?a.writeString(s[f].hostname,g.DNSName):"email"===s[f].type?a.writeString(s[f].email,g.RFC822Name):(a.startSequence(g.DirectoryName),s[f].toAsn1(a),a.endSequence());a.endSequence(),a.endSequence()}else if(c[p].oid===h.basicConstraints){a.startSequence(o.Ber.OctetString),a.startSequence();var y=-1!==e.purposes.indexOf("ca"),k=c[p].pathLen;a.writeBoolean(y),void 0!==k&&a.writeInt(k),a.endSequence(),a.endSequence()}else if(c[p].oid===h.extKeyUsage)a.startSequence(o.Ber.OctetString),a.startSequence(),e.purposes.forEach(function(e){if("ca"!==e&&-1===x.indexOf(e)){var t=e;void 0!==b[e]&&(t=b[e]),a.writeOID(t)}}),a.endSequence(),a.endSequence();else if(c[p].oid===h.keyUsage){if(a.startSequence(o.Ber.OctetString),void 0!==c[p].bits)a.writeBuffer(c[p].bits,o.Ber.BitString);else{var w=_(e.purposes,x);a.writeBuffer(w,o.Ber.BitString)}a.endSequence()}else a.writeBuffer(c[p].data,o.Ber.OctetString);a.endSequence()}a.endSequence(),a.endSequence()}a.endSequence()}function _(e,a){var t=a.length,i=Math.ceil(t/8),o=8*i-t,r=n.alloc(1+i);r[0]=o;for(var s=0;s<t;++s){var c=1+Math.floor(s/8),p=1<<7-s%8,u=a[s];if(void 0!==u)-1!==e.indexOf(u)&&(r[c]|=p)}return r}},function(e,a,t){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i,o,n,r=t(143),s=t(8).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function u(e){if(!e||"string"!=typeof e)return!1;var a=c.exec(e),t=a&&r[a[1].toLowerCase()];return t&&t.charset?t.charset:!(!a||!p.test(a[1]))&&"UTF-8"}a.charset=u,a.charsets={lookup:u},a.contentType=function(e){if(!e||"string"!=typeof e)return!1;var t=-1===e.indexOf("/")?a.lookup(e):e;if(!t)return!1;if(-1===t.indexOf("charset")){var i=a.charset(t);i&&(t+="; charset="+i.toLowerCase())}return t},a.extension=function(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),i=t&&a.extensions[t[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},a.extensions=Object.create(null),a.lookup=function(e){if(!e||"string"!=typeof e)return!1;var t=s("x."+e).toLowerCase().substr(1);if(!t)return!1;return a.types[t]||!1},a.types=Object.create(null),i=a.extensions,o=a.types,n=["nginx","apache",void 0,"iana"],Object.keys(r).forEach(function(e){var a=r[e],t=a.extensions;if(t&&t.length){i[e]=t;for(var s=0;s<t.length;s++){var c=t[s];if(o[c]){var p=n.indexOf(r[o[c]].source),u=n.indexOf(a.source);if("application/octet-stream"!==o[c]&&(p>u||p===u&&"application/"===o[c].substr(0,12)))continue}o[c]=e}}})},function(e,a){e.exports=require("tls")},function(e,a,t){var i=t(1),o=t(19).Stream,n=t(147),r=t(148);function s(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null}e.exports=s,i.inherits(s,o),s.create=function(e){var a=new this;for(var t in e=e||{})a[t]=e[t];return a},s.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},s.prototype.append=function(e){if(s.isStreamLike(e)){if(!(e instanceof n)){var a=n.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=a}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},s.prototype.pipe=function(e,a){return o.prototype.pipe.call(this,e,a),this.resume(),e},s.prototype._getNext=function(){this._currentStream=null;var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){s.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),r(this._pipeNext.bind(this,e))}.bind(this)):this._pipeNext(e):this.end()},s.prototype._pipeNext=function(e){if(this._currentStream=e,s.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var a=e;this.write(a),this._getNext()},s.prototype._handleErrors=function(e){var a=this;e.on("error",function(e){a._emitError(e)})},s.prototype.write=function(e){this.emit("data",e)},s.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},s.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},s.prototype.end=function(){this._reset(),this.emit("end")},s.prototype.destroy=function(){this._reset(),this.emit("close")},s.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},s.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},s.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach(function(a){a.dataSize&&(e.dataSize+=a.dataSize)}),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},s.prototype._emitError=function(e){this._reset(),this.emit("error",e)}},function(e,a,t){var i=t(70),o=t(71);e.exports=function(e,a,t,n){var r=t.keyedList?t.keyedList[t.index]:t.index;t.jobs[r]=function(e,a,t,o){var n;n=2==e.length?e(t,i(o)):e(t,a,i(o));return n}(a,r,e[r],function(e,a){r in t.jobs&&(delete t.jobs[r],e?o(t):t.results[r]=a,n(e,t.results))})}},function(e,a,t){var i=t(151);e.exports=function(e){var a=!1;return i(function(){a=!0}),function(t,o){a?e(t,o):i(function(){e(t,o)})}}},function(e,a){e.exports=function(e){Object.keys(e.jobs).forEach(function(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}.bind(e)),e.jobs={}}},function(e,a){e.exports=function(e,a){var t=!Array.isArray(e),i={index:0,keyedList:t||a?Object.keys(e):null,jobs:{},results:t?{}:[],size:t?Object.keys(e).length:e.length};a&&i.keyedList.sort(t?a:function(t,i){return a(e[t],e[i])});return i}},function(e,a,t){var i=t(71),o=t(70);e.exports=function(e){if(!Object.keys(this.jobs).length)return;this.index=this.size,i(this),o(e)(null,this.results)}},function(e,a,t){var i=t(69),o=t(72),n=t(73);function r(e,a){return e<a?-1:e>a?1:0}e.exports=function(e,a,t,r){var s=o(e,t);return i(e,a,s,function t(o,n){o?r(o,n):(s.index++,s.index<(s.keyedList||e).length?i(e,a,s,t):r(null,s.results))}),n.bind(s,r)},e.exports.ascending=r,e.exports.descending=function(e,a){return-1*r(e,a)}},function(e,a,t){var i=t(19);function o(e){return e instanceof i.Stream}function n(e){return o(e)&&"function"==typeof e._read&&"object"==typeof e._readableState}function r(e){return o(e)&&"function"==typeof e._write&&"object"==typeof e._writableState}e.exports=o,e.exports.isReadable=n,e.exports.isWritable=r,e.exports.isDuplex=function(e){return n(e)&&r(e)}},function(e,a,t){"use strict";var i=t(157),o=t(158),n=t(78);e.exports={formats:n,parse:o,stringify:i}},function(e,a,t){"use strict";var i=Object.prototype.hasOwnProperty,o=function(){for(var e=[],a=0;a<256;++a)e.push("%"+((a<16?"0":"")+a.toString(16)).toUpperCase());return e}(),n=function(e,a){for(var t=a&&a.plainObjects?Object.create(null):{},i=0;i<e.length;++i)void 0!==e[i]&&(t[i]=e[i]);return t};e.exports={arrayToObject:n,assign:function(e,a){return Object.keys(a).reduce(function(e,t){return e[t]=a[t],e},e)},compact:function(e){for(var a=[{obj:{o:e},prop:"o"}],t=[],i=0;i<a.length;++i)for(var o=a[i],n=o.obj[o.prop],r=Object.keys(n),s=0;s<r.length;++s){var c=r[s],p=n[c];"object"==typeof p&&null!==p&&-1===t.indexOf(p)&&(a.push({obj:n,prop:c}),t.push(p))}return function(e){for(var a;e.length;){var t=e.pop();if(a=t.obj[t.prop],Array.isArray(a)){for(var i=[],o=0;o<a.length;++o)void 0!==a[o]&&i.push(a[o]);t.obj[t.prop]=i}}return a}(a)},decode:function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(a){return e}},encode:function(e){if(0===e.length)return e;for(var a="string"==typeof e?e:String(e),t="",i=0;i<a.length;++i){var n=a.charCodeAt(i);45===n||46===n||95===n||126===n||n>=48&&n<=57||n>=65&&n<=90||n>=97&&n<=122?t+=a.charAt(i):n<128?t+=o[n]:n<2048?t+=o[192|n>>6]+o[128|63&n]:n<55296||n>=57344?t+=o[224|n>>12]+o[128|n>>6&63]+o[128|63&n]:(i+=1,n=65536+((1023&n)<<10|1023&a.charCodeAt(i)),t+=o[240|n>>18]+o[128|n>>12&63]+o[128|n>>6&63]+o[128|63&n])}return t},isBuffer:function(e){return null!=e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(a,t,o){if(!t)return a;if("object"!=typeof t){if(Array.isArray(a))a.push(t);else{if("object"!=typeof a)return[a,t];(o.plainObjects||o.allowPrototypes||!i.call(Object.prototype,t))&&(a[t]=!0)}return a}if("object"!=typeof a)return[a].concat(t);var r=a;return Array.isArray(a)&&!Array.isArray(t)&&(r=n(a,o)),Array.isArray(a)&&Array.isArray(t)?(t.forEach(function(t,n){i.call(a,n)?a[n]&&"object"==typeof a[n]?a[n]=e(a[n],t,o):a.push(t):a[n]=t}),a):Object.keys(t).reduce(function(a,n){var r=t[n];return i.call(a,n)?a[n]=e(a[n],r,o):a[n]=r,a},r)}}},function(e,a,t){"use strict";var i=String.prototype.replace,o=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return i.call(e,o,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,a,t){"use strict";var i=t(21);e.exports=function(e){i.copy(e,this)}},function(e,a,t){"use strict";e.exports=function(e,a){a||(a={}),"function"==typeof a&&(a={cmp:a});var t,i="boolean"==typeof a.cycles&&a.cycles,o=a.cmp&&(t=a.cmp,function(e){return function(a,i){var o={key:a,value:e[a]},n={key:i,value:e[i]};return t(o,n)}}),n=[];return function e(a){if(a&&a.toJSON&&"function"==typeof a.toJSON&&(a=a.toJSON()),void 0!==a){if("number"==typeof a)return isFinite(a)?""+a:"null";if("object"!=typeof a)return JSON.stringify(a);var t,r;if(Array.isArray(a)){for(r="[",t=0;t<a.length;t++)t&&(r+=","),r+=e(a[t])||"null";return r+"]"}if(null===a)return"null";if(-1!==n.indexOf(a)){if(i)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var s=n.push(a)-1,c=Object.keys(a).sort(o&&o(a));for(r="",t=0;t<c.length;t++){var p=c[t],u=e(a[p]);u&&(r&&(r+=","),r+=JSON.stringify(p)+":"+u)}return n.splice(s,1),"{"+r+"}"}}(e)}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i="",o=!0===e.schema.$async,n=e.util.schemaHasRulesExcept(e.schema,e.RULES.all,"$ref"),r=e.self._getId(e.schema);if(e.isTop&&(i+=" var validate = ",o&&(e.async=!0,i+="async "),i+="function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ",r&&(e.opts.sourceCode||e.opts.processCode)&&(i+=" /*# sourceURL="+r+" */ ")),"boolean"==typeof e.schema||!n&&!e.schema.$ref){var s=e.level,c=e.dataLevel,p=e.schema["false schema"],u=e.schemaPath+e.util.getProperty("false schema"),l=e.errSchemaPath+"/false schema",m=!e.opts.allErrors,d="data"+(c||""),h="valid"+s;if(!1===e.schema){e.isTop?m=!0:i+=" var "+h+" = false; ",(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'false schema' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'boolean schema is false' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";var f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else e.isTop?i+=o?" return data; ":" validate.errors = null; return true; ":i+=" var "+h+" = true; ";return e.isTop&&(i+=" }; return validate; "),i}if(e.isTop){var v=e.isTop;s=e.level=0,c=e.dataLevel=0,d="data";e.rootId=e.resolve.fullPath(e.self._getId(e.root.schema)),e.baseId=e.baseId||e.rootId,delete e.isTop,e.dataPathArr=[void 0],i+=" var vErrors = null; ",i+=" var errors = 0;     ",i+=" if (rootData === undefined) rootData = data; "}else{s=e.level,d="data"+((c=e.dataLevel)||"");if(r&&(e.baseId=e.resolve.url(e.baseId,r)),o&&!e.async)throw new Error("async schema in sync schema");i+=" var errs_"+s+" = errors;"}h="valid"+s,m=!e.opts.allErrors;var g="",b="",y=e.schema.type,x=Array.isArray(y);if(y&&e.opts.nullable&&!0===e.schema.nullable&&(x?-1==y.indexOf("null")&&(y=y.concat("null")):"null"!=y&&(y=[y,"null"],x=!0)),x&&1==y.length&&(y=y[0],x=!1),e.schema.$ref&&n){if("fail"==e.opts.extendRefs)throw new Error('$ref: validation keywords used in schema at path "'+e.errSchemaPath+'" (see option extendRefs)');!0!==e.opts.extendRefs&&(n=!1,e.logger.warn('$ref: keywords ignored in schema at path "'+e.errSchemaPath+'"'))}if(e.schema.$comment&&e.opts.$comment&&(i+=" "+e.RULES.all.$comment.code(e,"$comment")),y){if(e.opts.coerceTypes)var k=e.util.coerceToTypes(e.opts.coerceTypes,y);var w=e.RULES.types[y];if(k||x||!0===w||w&&!W(w)){u=e.schemaPath+".type",l=e.errSchemaPath+"/type",u=e.schemaPath+".type",l=e.errSchemaPath+"/type";var j=x?"checkDataTypes":"checkDataType";if(i+=" if ("+e.util[j](y,d,!0)+") { ",k){var E="dataType"+s,S="coerced"+s;i+=" var "+E+" = typeof "+d+"; ","array"==e.opts.coerceTypes&&(i+=" if ("+E+" == 'object' && Array.isArray("+d+")) "+E+" = 'array'; "),i+=" var "+S+" = undefined; ";var _="",R=k;if(R)for(var A,C=-1,q=R.length-1;C<q;)A=R[C+=1],C&&(i+=" if ("+S+" === undefined) { ",_+="}"),"array"==e.opts.coerceTypes&&"array"!=A&&(i+=" if ("+E+" == 'array' && "+d+".length == 1) { "+S+" = "+d+" = "+d+"[0]; "+E+" = typeof "+d+";  } "),"string"==A?i+=" if ("+E+" == 'number' || "+E+" == 'boolean') "+S+" = '' + "+d+"; else if ("+d+" === null) "+S+" = ''; ":"number"==A||"integer"==A?(i+=" if ("+E+" == 'boolean' || "+d+" === null || ("+E+" == 'string' && "+d+" && "+d+" == +"+d+" ","integer"==A&&(i+=" && !("+d+" % 1)"),i+=")) "+S+" = +"+d+"; "):"boolean"==A?i+=" if ("+d+" === 'false' || "+d+" === 0 || "+d+" === null) "+S+" = false; else if ("+d+" === 'true' || "+d+" === 1) "+S+" = true; ":"null"==A?i+=" if ("+d+" === '' || "+d+" === 0 || "+d+" === false) "+S+" = null; ":"array"==e.opts.coerceTypes&&"array"==A&&(i+=" if ("+E+" == 'string' || "+E+" == 'number' || "+E+" == 'boolean' || "+d+" == null) "+S+" = ["+d+"]; ");i+=" "+_+" if ("+S+" === undefined) {   ",(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=x?""+y.join(","):""+y,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=x?""+y.join(","):""+y,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+u+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else {  ";var O=c?"data"+(c-1||""):"parentData";i+=" "+d+" = "+S+"; ",c||(i+="if ("+O+" !== undefined)"),i+=" "+O+"["+(c?e.dataPathArr[c]:"parentDataProperty")+"] = "+S+"; } "}else{(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=x?""+y.join(","):""+y,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=x?""+y.join(","):""+y,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+u+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}i+=" } "}}if(e.schema.$ref&&!n)i+=" "+e.RULES.all.$ref.code(e,"$ref")+" ",m&&(i+=" } if (errors === ",i+=v?"0":"errs_"+s,i+=") { ",b+="}");else{var z=e.RULES;if(z)for(var P=-1,F=z.length-1;P<F;)if(W(w=z[P+=1])){if(w.type&&(i+=" if ("+e.util.checkDataType(w.type,d)+") { "),e.opts.useDefaults&&!e.compositeRule)if("object"==w.type&&e.schema.properties){p=e.schema.properties;var T=Object.keys(p);if(T)for(var I,D=-1,B=T.length-1;D<B;){if(void 0!==(U=p[I=T[D+=1]]).default)i+="  if ("+(H=d+e.util.getProperty(I))+" === undefined ","empty"==e.opts.useDefaults&&(i+=" || "+H+" === null || "+H+" === '' "),i+=" ) "+H+" = ","shared"==e.opts.useDefaults?i+=" "+e.useDefault(U.default)+" ":i+=" "+JSON.stringify(U.default)+" ",i+="; "}}else if("array"==w.type&&Array.isArray(e.schema.items)){var L=e.schema.items;if(L){C=-1;for(var U,N=L.length-1;C<N;){var H;if(void 0!==(U=L[C+=1]).default)i+="  if ("+(H=d+"["+C+"]")+" === undefined ","empty"==e.opts.useDefaults&&(i+=" || "+H+" === null || "+H+" === '' "),i+=" ) "+H+" = ","shared"==e.opts.useDefaults?i+=" "+e.useDefault(U.default)+" ":i+=" "+JSON.stringify(U.default)+" ",i+="; "}}}var M=w.rules;if(M)for(var K,$=-1,G=M.length-1;$<G;)if(Y(K=M[$+=1])){var V=K.code(e,K.keyword,w.type);V&&(i+=" "+V+" ",m&&(g+="}"))}if(m&&(i+=" "+g+" ",g=""),w.type&&(i+=" } ",y&&y===w.type&&!k)){i+=" else { ";var Q;u=e.schemaPath+".type",l=e.errSchemaPath+"/type";(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=x?""+y.join(","):""+y,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=x?""+y.join(","):""+y,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+u+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } "}m&&(i+=" if (errors === ",i+=v?"0":"errs_"+s,i+=") { ",b+="}")}}function W(e){for(var a=e.rules,t=0;t<a.length;t++)if(Y(a[t]))return!0}function Y(a){return void 0!==e.schema[a.keyword]||a.implements&&function(a){for(var t=a.implements,i=0;i<t.length;i++)if(void 0!==e.schema[t[i]])return!0}(a)}return m&&(i+=" "+b+" "),v?(o?(i+=" if (errors === 0) return data;           ",i+=" else throw new ValidationError(vErrors); "):(i+=" validate.errors = vErrors; ",i+=" return errors === 0;       "),i+=" }; return validate;"):i+=" var "+h+" = errors === errs_"+s+";",i=e.util.cleanUpCode(i),v&&(i=e.util.finalCleanUpCode(i,o)),i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o=" ",n=e.level,r=e.dataLevel,s=e.schema[a],c=e.schemaPath+e.util.getProperty(a),p=e.errSchemaPath+"/"+a,u=!e.opts.allErrors,l="data"+(r||""),m=e.opts.$data&&s&&s.$data;m?(o+=" var schema"+n+" = "+e.util.getData(s.$data,r,e.dataPathArr)+"; ",i="schema"+n):i=s;var d="maximum"==a,h=d?"exclusiveMaximum":"exclusiveMinimum",f=e.schema[h],v=e.opts.$data&&f&&f.$data,g=d?"<":">",b=d?">":"<",y=void 0;if(v){var x=e.util.getData(f.$data,r,e.dataPathArr),k="exclusive"+n,w="exclType"+n,j="exclIsNumber"+n,E="' + "+(R="op"+n)+" + '";o+=" var schemaExcl"+n+" = "+x+"; ",o+=" var "+k+"; var "+w+" = typeof "+(x="schemaExcl"+n)+"; if ("+w+" != 'boolean' && "+w+" != 'undefined' && "+w+" != 'number') { ";var S;y=h;(S=S||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(y||"_exclusiveLimit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: {} ",!1!==e.opts.messages&&(o+=" , message: '"+h+" should be boolean' "),e.opts.verbose&&(o+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var _=o;o=S.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+_+"]); ":o+=" validate.errors = ["+_+"]; return false; ":o+=" var err = "+_+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",o+=" } else if ( ",m&&(o+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),o+=" "+w+" == 'number' ? ( ("+k+" = "+i+" === undefined || "+x+" "+g+"= "+i+") ? "+l+" "+b+"= "+x+" : "+l+" "+b+" "+i+" ) : ( ("+k+" = "+x+" === true) ? "+l+" "+b+"= "+i+" : "+l+" "+b+" "+i+" ) || "+l+" !== "+l+") { var op"+n+" = "+k+" ? '"+g+"' : '"+g+"='; ",void 0===s&&(y=h,p=e.errSchemaPath+"/"+h,i=x,m=v)}else{E=g;if((j="number"==typeof f)&&m){var R="'"+E+"'";o+=" if ( ",m&&(o+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),o+=" ( "+i+" === undefined || "+f+" "+g+"= "+i+" ? "+l+" "+b+"= "+f+" : "+l+" "+b+" "+i+" ) || "+l+" !== "+l+") { "}else{j&&void 0===s?(k=!0,y=h,p=e.errSchemaPath+"/"+h,i=f,b+="="):(j&&(i=Math[d?"min":"max"](f,s)),f===(!j||i)?(k=!0,y=h,p=e.errSchemaPath+"/"+h,b+="="):(k=!1,E+="="));R="'"+E+"'";o+=" if ( ",m&&(o+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),o+=" "+l+" "+b+" "+i+" || "+l+" !== "+l+") { "}}y=y||a,(S=S||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(y||"_limit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { comparison: "+R+", limit: "+i+", exclusive: "+k+" } ",!1!==e.opts.messages&&(o+=" , message: 'should be "+E+" ",o+=m?"' + "+i:i+"'"),e.opts.verbose&&(o+=" , schema:  ",o+=m?"validate.schema"+c:""+s,o+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";_=o;return o=S.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+_+"]); ":o+=" validate.errors = ["+_+"]; return false; ":o+=" var err = "+_+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",o+=" } ",u&&(o+=" else { "),o}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o=" ",n=e.level,r=e.dataLevel,s=e.schema[a],c=e.schemaPath+e.util.getProperty(a),p=e.errSchemaPath+"/"+a,u=!e.opts.allErrors,l="data"+(r||""),m=e.opts.$data&&s&&s.$data;m?(o+=" var schema"+n+" = "+e.util.getData(s.$data,r,e.dataPathArr)+"; ",i="schema"+n):i=s,o+="if ( ",m&&(o+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),o+=" "+l+".length "+("maxItems"==a?">":"<")+" "+i+") { ";var d=a,h=h||[];h.push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(d||"_limitItems")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(o+=" , message: 'should NOT have ",o+="maxItems"==a?"more":"fewer",o+=" than ",o+=m?"' + "+i+" + '":""+s,o+=" items' "),e.opts.verbose&&(o+=" , schema:  ",o+=m?"validate.schema"+c:""+s,o+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var f=o;return o=h.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+f+"]); ":o+=" validate.errors = ["+f+"]; return false; ":o+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",o+="} ",u&&(o+=" else { "),o}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o=" ",n=e.level,r=e.dataLevel,s=e.schema[a],c=e.schemaPath+e.util.getProperty(a),p=e.errSchemaPath+"/"+a,u=!e.opts.allErrors,l="data"+(r||""),m=e.opts.$data&&s&&s.$data;m?(o+=" var schema"+n+" = "+e.util.getData(s.$data,r,e.dataPathArr)+"; ",i="schema"+n):i=s;var d="maxLength"==a?">":"<";o+="if ( ",m&&(o+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),!1===e.opts.unicode?o+=" "+l+".length ":o+=" ucs2length("+l+") ",o+=" "+d+" "+i+") { ";var h=a,f=f||[];f.push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(h||"_limitLength")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(o+=" , message: 'should NOT be ",o+="maxLength"==a?"longer":"shorter",o+=" than ",o+=m?"' + "+i+" + '":""+s,o+=" characters' "),e.opts.verbose&&(o+=" , schema:  ",o+=m?"validate.schema"+c:""+s,o+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var v=o;return o=f.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+v+"]); ":o+=" validate.errors = ["+v+"]; return false; ":o+=" var err = "+v+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",o+="} ",u&&(o+=" else { "),o}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o=" ",n=e.level,r=e.dataLevel,s=e.schema[a],c=e.schemaPath+e.util.getProperty(a),p=e.errSchemaPath+"/"+a,u=!e.opts.allErrors,l="data"+(r||""),m=e.opts.$data&&s&&s.$data;m?(o+=" var schema"+n+" = "+e.util.getData(s.$data,r,e.dataPathArr)+"; ",i="schema"+n):i=s,o+="if ( ",m&&(o+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),o+=" Object.keys("+l+").length "+("maxProperties"==a?">":"<")+" "+i+") { ";var d=a,h=h||[];h.push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(d||"_limitProperties")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(o+=" , message: 'should NOT have ",o+="maxProperties"==a?"more":"fewer",o+=" than ",o+=m?"' + "+i+" + '":""+s,o+=" properties' "),e.opts.verbose&&(o+=" , schema:  ",o+=m?"validate.schema"+c:""+s,o+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var f=o;return o=h.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+f+"]); ":o+=" validate.errors = ["+f+"]; return false; ":o+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",o+="} ",u&&(o+=" else { "),o}},function(e,a,t){"use strict";var i=t(259),o=t(9),n=t(11);function r(e){var a=(e.path_prefix?e.path_prefix:"")+"/plugins/servlet";if(!e.host)throw new Error(n.NO_HOST_ERROR);if(!e.oauth.consumer_key)throw new Error(n.NO_CONSUMER_KEY_ERROR);if(!e.oauth.private_key)throw new Error(n.NO_PRIVATE_KEY_ERROR);var t=e.oauth.consumer_key,r=e.oauth.private_key,s=o.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:a+"/oauth/request-token"}),c=o.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:a+"/oauth/access-token"}),p=e.oauth.callback_url?e.oauth.callback_url:"oob";return new i.OAuth(s,c,t,r,"1.0",p,"RSA-SHA1")}a.getAuthorizeURL=function(e,a){var t=(e.path_prefix?e.path_prefix:"")+"/plugins/servlet",i=o.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:t+"/oauth/authorize"});r(e).getOAuthRequestToken(function(e,t,o){return e?a(e):a(null,{url:i+"?oauth_token="+t,token:t,token_secret:o})})},a.swapRequestTokenWithAccessToken=function(e,a){if(!e.oauth.oauth_verifier)throw new Error(n.NO_VERIFIER_ERROR);var t=r(e),i=e.oauth.token,o=e.oauth.token_secret,s=e.oauth.oauth_verifier;t.getOAuthAccessToken(i,o,s,a)}},function(e,a,t){var i=t(2),o=t(260),n=t(17),r=t(18),s=t(9),c=t(23),p=t(88);a.OAuth=function(e,a,t,i,o,n,r,s,c){if(this._isEcho=!1,this._requestUrl=e,this._accessUrl=a,this._consumerKey=t,this._consumerSecret=this._encodeData(i),"RSA-SHA1"==r&&(this._privateKey=i),this._version=o,this._authorize_callback=void 0===n?"oob":n,"PLAINTEXT"!=r&&"HMAC-SHA1"!=r&&"RSA-SHA1"!=r)throw new Error("Un-supported signature method: "+r);this._signatureMethod=r,this._nonceSize=s||32,this._headers=c||{Accept:"*/*",Connection:"close","User-Agent":"Node authentication"},this._clientOptions=this._defaultClientOptions={requestTokenHttpMethod:"POST",accessTokenHttpMethod:"POST",followRedirects:!0},this._oauthParameterSeperator=","},a.OAuthEcho=function(e,a,t,i,o,n,r,s){if(this._isEcho=!0,this._realm=e,this._verifyCredentials=a,this._consumerKey=t,this._consumerSecret=this._encodeData(i),"RSA-SHA1"==n&&(this._privateKey=i),this._version=o,"PLAINTEXT"!=n&&"HMAC-SHA1"!=n&&"RSA-SHA1"!=n)throw new Error("Un-supported signature method: "+n);this._signatureMethod=n,this._nonceSize=r||32,this._headers=s||{Accept:"*/*",Connection:"close","User-Agent":"Node authentication"},this._oauthParameterSeperator=","},a.OAuthEcho.prototype=a.OAuth.prototype,a.OAuth.prototype._getTimestamp=function(){return Math.floor((new Date).getTime()/1e3)},a.OAuth.prototype._encodeData=function(e){return null==e||""==e?"":encodeURIComponent(e).replace(/\!/g,"%21").replace(/\'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A")},a.OAuth.prototype._decodeData=function(e){return null!=e&&(e=e.replace(/\+/g," ")),decodeURIComponent(e)},a.OAuth.prototype._getSignature=function(e,a,t,i){var o=this._createSignatureBase(e,a,t);return this._createSignature(o,i)},a.OAuth.prototype._normalizeUrl=function(e){var a=s.parse(e,!0),t="";return a.port&&("http:"==a.protocol&&"80"!=a.port||"https:"==a.protocol&&"443"!=a.port)&&(t=":"+a.port),a.pathname&&""!=a.pathname||(a.pathname="/"),a.protocol+"//"+a.hostname+t+a.pathname},a.OAuth.prototype._isParameterNameAnOAuthParameter=function(e){var a=e.match("^oauth_");return!(!a||"oauth_"!==a[0])},a.OAuth.prototype._buildAuthorizationHeaders=function(e){var a="OAuth ";this._isEcho&&(a+='realm="'+this._realm+'",');for(var t=0;t<e.length;t++)this._isParameterNameAnOAuthParameter(e[t][0])&&(a+=this._encodeData(e[t][0])+'="'+this._encodeData(e[t][1])+'"'+this._oauthParameterSeperator);return a=a.substring(0,a.length-this._oauthParameterSeperator.length)},a.OAuth.prototype._makeArrayOfArgumentsHash=function(e){var a=[];for(var t in e)if(e.hasOwnProperty(t)){var i=e[t];if(Array.isArray(i))for(var o=0;o<i.length;o++)a[a.length]=[t,i[o]];else a[a.length]=[t,i]}return a},a.OAuth.prototype._sortRequestParams=function(e){return e.sort(function(e,a){return e[0]==a[0]?e[1]<a[1]?-1:1:e[0]<a[0]?-1:1}),e},a.OAuth.prototype._normaliseRequestParams=function(e){for(var a=this._makeArrayOfArgumentsHash(e),t=0;t<a.length;t++)a[t][0]=this._encodeData(a[t][0]),a[t][1]=this._encodeData(a[t][1]);a=this._sortRequestParams(a);for(e="",t=0;t<a.length;t++)e+=a[t][0],e+="=",e+=a[t][1],t<a.length-1&&(e+="&");return e},a.OAuth.prototype._createSignatureBase=function(e,a,t){return a=this._encodeData(this._normalizeUrl(a)),t=this._encodeData(t),e.toUpperCase()+"&"+a+"&"+t},a.OAuth.prototype._createSignature=function(e,a){if(void 0===a)a="";else a=this._encodeData(a);var t=this._consumerSecret+"&"+a,n="";return"PLAINTEXT"==this._signatureMethod?n=t:"RSA-SHA1"==this._signatureMethod?(t=this._privateKey||"",n=i.createSign("RSA-SHA1").update(e).sign(t,"base64")):n=i.Hmac?i.createHmac("sha1",t).update(e).digest("base64"):o.HMACSHA1(t,e),n},a.OAuth.prototype.NONCE_CHARS=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","0","1","2","3","4","5","6","7","8","9"],a.OAuth.prototype._getNonce=function(e){for(var a,t=[],i=this.NONCE_CHARS,o=i.length,n=0;n<e;n++)a=Math.floor(Math.random()*o),t[n]=i[a];return t.join("")},a.OAuth.prototype._createClient=function(e,a,t,i,o,s){var c={host:a,port:e,path:i,method:t,headers:o};return(s?r:n).request(c)},a.OAuth.prototype._prepareParameters=function(e,a,t,i,o){var n,r={oauth_timestamp:this._getTimestamp(),oauth_nonce:this._getNonce(this._nonceSize),oauth_version:this._version,oauth_signature_method:this._signatureMethod,oauth_consumer_key:this._consumerKey};if(e&&(r.oauth_token=e),this._isEcho)n=this._getSignature("GET",this._verifyCredentials,this._normaliseRequestParams(r),a);else{if(o)for(var p in o)o.hasOwnProperty(p)&&(r[p]=o[p]);var u=s.parse(i,!1);if(u.query){var l,m=c.parse(u.query);for(var p in m){var d=m[p];if("object"==typeof d)for(l in d)r[p+"["+l+"]"]=d[l];else r[p]=d}}n=this._getSignature(t,i,this._normaliseRequestParams(r),a)}var h=this._sortRequestParams(this._makeArrayOfArgumentsHash(r));return h[h.length]=["oauth_signature",n],h},a.OAuth.prototype._performSecureRequest=function(e,a,t,i,o,n,r,u){var l=this._prepareParameters(e,a,t,i,o);r||(r="application/x-www-form-urlencoded");var m=s.parse(i,!1);"http:"!=m.protocol||m.port||(m.port=80),"https:"!=m.protocol||m.port||(m.port=443);var d,h,f={},v=this._buildAuthorizationHeaders(l);for(var g in this._isEcho?f["X-Verify-Credentials-Authorization"]=v:f.Authorization=v,f.Host=m.host,this._headers)this._headers.hasOwnProperty(g)&&(f[g]=this._headers[g]);for(var g in o)this._isParameterNameAnOAuthParameter(g)&&delete o[g];"POST"!=t&&"PUT"!=t||null!=n||null==o||(n=c.stringify(o).replace(/\!/g,"%21").replace(/\'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A")),n?Buffer.isBuffer(n)?f["Content-length"]=n.length:f["Content-length"]=Buffer.byteLength(n):f["Content-length"]=0,f["Content-Type"]=r,m.pathname&&""!=m.pathname||(m.pathname="/"),d=m.query?m.pathname+"?"+m.query:m.pathname,h="https:"==m.protocol?this._createClient(m.port,m.hostname,t,d,f,!0):this._createClient(m.port,m.hostname,t,d,f);var b=this._clientOptions;if(!u)return"POST"!=t&&"PUT"!=t||null==n||""==n||h.write(n),h;var y="",x=this,k=p.isAnEarlyCloseHost(m.hostname),w=!1,j=function(i){w||(w=!0,i.statusCode>=200&&i.statusCode<=299?u(null,y,i):(301==i.statusCode||302==i.statusCode)&&b.followRedirects&&i.headers&&i.headers.location?x._performSecureRequest(e,a,t,i.headers.location,o,n,r,u):u({statusCode:i.statusCode,data:y},y,i))};h.on("response",function(e){e.setEncoding("utf8"),e.on("data",function(e){y+=e}),e.on("end",function(){j(e)}),e.on("close",function(){k&&j(e)})}),h.on("error",function(e){w||(w=!0,u(e))}),"POST"!=t&&"PUT"!=t||null==n||""==n||h.write(n),h.end()},a.OAuth.prototype.setClientOptions=function(e){var a,t={},i=Object.prototype.hasOwnProperty;for(a in this._defaultClientOptions)i.call(e,a)?t[a]=e[a]:t[a]=this._defaultClientOptions[a];this._clientOptions=t},a.OAuth.prototype.getOAuthAccessToken=function(e,a,t,i){var o={};"function"==typeof t?i=t:o.oauth_verifier=t,this._performSecureRequest(e,a,this._clientOptions.accessTokenHttpMethod,this._accessUrl,o,null,null,function(e,a,t){if(e)i(e);else{var o=c.parse(a),n=o.oauth_token;delete o.oauth_token;var r=o.oauth_token_secret;delete o.oauth_token_secret,i(null,n,r,o)}})},a.OAuth.prototype.getProtectedResource=function(e,a,t,i,o){this._performSecureRequest(t,i,a,e,null,"",null,o)},a.OAuth.prototype.delete=function(e,a,t,i){return this._performSecureRequest(a,t,"DELETE",e,null,"",null,i)},a.OAuth.prototype.get=function(e,a,t,i){return this._performSecureRequest(a,t,"GET",e,null,"",null,i)},a.OAuth.prototype._putOrPost=function(e,a,t,i,o,n,r){var s=null;return"function"==typeof n&&(r=n,n=null),"string"==typeof o||Buffer.isBuffer(o)||(n="application/x-www-form-urlencoded",s=o,o=null),this._performSecureRequest(t,i,e,a,s,o,n,r)},a.OAuth.prototype.put=function(e,a,t,i,o,n){return this._putOrPost("PUT",e,a,t,i,o,n)},a.OAuth.prototype.post=function(e,a,t,i,o,n){return this._putOrPost("POST",e,a,t,i,o,n)},a.OAuth.prototype.getOAuthRequestToken=function(e,a){"function"==typeof e&&(a=e,e={}),this._authorize_callback&&(e.oauth_callback=this._authorize_callback),this._performSecureRequest(null,null,this._clientOptions.requestTokenHttpMethod,this._requestUrl,e,null,null,function(e,t,i){if(e)a(e);else{var o=c.parse(t),n=o.oauth_token,r=o.oauth_token_secret;delete o.oauth_token,delete o.oauth_token_secret,a(null,n,r,o)}})},a.OAuth.prototype.signUrl=function(e,a,t,i){if(void 0===i)i="GET";for(var o=this._prepareParameters(a,t,i,e,{}),n=s.parse(e,!1),r="",c=0;c<o.length;c++)r+=o[c][0]+"="+this._encodeData(o[c][1])+"&";return r=r.substring(0,r.length-1),n.protocol+"//"+n.host+n.pathname+"?"+r},a.OAuth.prototype.authHeader=function(e,a,t,i){if(void 0===i)i="GET";var o=this._prepareParameters(a,t,i,e,{});return this._buildAuthorizationHeaders(o)}},function(e,a){e.exports.isAnEarlyCloseHost=function(e){return e&&e.match(".*google(apis)?.com$")}},function(e,a,t){var i=t(92),o=t(93),n=t(8),r=t(94),s=t(1);function c(e,a){a||(a={}),e=r(e);var c=function(e){var a=[],t=!0,i={};Object.keys(e).forEach(function(t){a.push([].concat(e[t],t))});for(;t;){t=!1;for(var o=0;o<a.length;o++)for(var n=o+1;n<a.length;n++){var r=a[o].filter(function(e){return-1!==a[n].indexOf(e)});if(r.length){a[o]=a[o].concat(a[n]),a.splice(n,1),t=!0;break}}}return a.forEach(function(e){e=e.filter(function(e,a,t){return t.indexOf(e)===a}),i[e.pop()]=e}),i}(a.alias||{}),u=function(e,a){var t={};return a=a||{},Object.keys(e).forEach(function(a){t[a]=e[a]}),Object.keys(a).forEach(function(e){t[e]=a[e]}),t}({"short-option-groups":!0,"camel-case-expansion":!0,"dot-notation":!0,"parse-numbers":!0,"boolean-negation":!0,"negation-prefix":"no-","duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"populate--":!1,"combine-arrays":!1,"set-placeholder-key":!1,"halt-at-non-option":!1},a.configuration),l=a.default||{},m=a.configObjects||[],d=a.envPrefix,h=u["populate--"],f=h?"--":"_",v={},g=a.__||function(e){return s.format.apply(s,Array.prototype.slice.call(arguments))},b=null,y={aliases:{},arrays:{},bools:{},strings:{},numbers:{},counts:{},normalize:{},configs:{},defaulted:{},nargs:{},coercions:{},keys:[]},x=/^-[0-9]+(\.[0-9]+)?/,k=new RegExp("^--"+u["negation-prefix"]+"(.+)");[].concat(a.array).filter(Boolean).forEach(function(e){var a=e.key||e;const t=Object.keys(e).map(function(e){return{boolean:"bools",string:"strings",number:"numbers"}[e]}).filter(Boolean).pop();t&&(y[t][a]=!0),y.arrays[a]=!0,y.keys.push(a)}),[].concat(a.boolean).filter(Boolean).forEach(function(e){y.bools[e]=!0,y.keys.push(e)}),[].concat(a.string).filter(Boolean).forEach(function(e){y.strings[e]=!0,y.keys.push(e)}),[].concat(a.number).filter(Boolean).forEach(function(e){y.numbers[e]=!0,y.keys.push(e)}),[].concat(a.count).filter(Boolean).forEach(function(e){y.counts[e]=!0,y.keys.push(e)}),[].concat(a.normalize).filter(Boolean).forEach(function(e){y.normalize[e]=!0,y.keys.push(e)}),Object.keys(a.narg||{}).forEach(function(e){y.nargs[e]=a.narg[e],y.keys.push(e)}),Object.keys(a.coerce||{}).forEach(function(e){y.coercions[e]=a.coerce[e],y.keys.push(e)}),Array.isArray(a.config)||"string"==typeof a.config?[].concat(a.config).filter(Boolean).forEach(function(e){y.configs[e]=!0}):Object.keys(a.config||{}).forEach(function(e){y.configs[e]=a.config[e]}),function(){Array.prototype.slice.call(arguments).forEach(function(e){Object.keys(e||{}).forEach(function(e){y.aliases[e]||(y.aliases[e]=[].concat(c[e]||[]),y.aliases[e].concat(e).forEach(function(a){if(/-/.test(a)&&u["camel-case-expansion"]){var t=i(a);t!==e&&-1===y.aliases[e].indexOf(t)&&(y.aliases[e].push(t),v[t]=!0)}}),y.aliases[e].concat(e).forEach(function(a){if(a.length>1&&/[A-Z]/.test(a)&&u["camel-case-expansion"]){var t=o(a,"-");t!==e&&-1===y.aliases[e].indexOf(t)&&(y.aliases[e].push(t),v[t]=!0)}}),y.aliases[e].forEach(function(a){y.aliases[a]=[e].concat(y.aliases[e].filter(function(e){return a!==e}))}))})})}(a.key,c,a.default,y.arrays),Object.keys(l).forEach(function(e){(y.aliases[e]||[]).forEach(function(a){l[a]=l[e]})});var w={_:[]};Object.keys(y.bools).forEach(function(e){Object.prototype.hasOwnProperty.call(l,e)&&(T(e,l[e]),function(e){[].concat(y.aliases[e]||[],e).forEach(function(e){y.defaulted[e]=!0})}(e))});for(var j=[],E=0;E<e.length;E++){var S,_,R,A,C,q,O=e[E];if(O.match(/^--.+=/)||!u["short-option-groups"]&&O.match(/^-.+=/))M((A=O.match(/^--?([^=]+)=([\s\S]*)$/))[1],y.nargs)?(e.splice(E+1,0,A[2]),E=P(E,A[1],e)):M(A[1],y.arrays)&&e.length>E+1?(e.splice(E+1,0,A[2]),E=F(E,A[1],e)):T(A[1],A[2]);else if(O.match(k)&&u["boolean-negation"])T(_=O.match(k)[1],!1);else if(O.match(/^--.+/)||!u["short-option-groups"]&&O.match(/^-.+/))M(_=O.match(/^--?(.+)/)[1],y.nargs)?E=P(E,_,e):M(_,y.arrays)&&e.length>E+1?E=F(E,_,e):void 0===(C=e[E+1])||C.match(/^-/)&&!C.match(x)||M(_,y.bools)||M(_,y.counts)?/^(true|false)$/.test(C)?(T(_,C),E++):T(_,K(_)):(T(_,C),E++);else if(O.match(/^-.\..+=/))T((A=O.match(/^-([^=]+)=([\s\S]*)$/))[1],A[2]);else if(O.match(/^-.\..+/))C=e[E+1],_=O.match(/^-(.\..+)/)[1],void 0===C||C.match(/^-/)||M(_,y.bools)||M(_,y.counts)?T(_,K(_)):(T(_,C),E++);else if(O.match(/^-[^-]+/)&&!O.match(x)){R=O.slice(1,-1).split(""),S=!1;for(var z=0;z<R.length;z++){if(C=O.slice(z+2),R[z+1]&&"="===R[z+1]){q=O.slice(z+3),M(_=R[z],y.nargs)?(e.splice(E+1,0,q),E=P(E,_,e)):M(_,y.arrays)&&e.length>E+1?(e.splice(E+1,0,q),E=F(E,_,e)):T(_,q),S=!0;break}if("-"!==C){if(/[A-Za-z]/.test(R[z])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(C)){T(R[z],C),S=!0;break}if(R[z+1]&&R[z+1].match(/\W/)){T(R[z],C),S=!0;break}T(R[z],K(R[z]))}else T(R[z],C)}_=O.slice(-1)[0],S||"-"===_||(M(_,y.nargs)?E=P(E,_,e):M(_,y.arrays)&&e.length>E+1?E=F(E,_,e):void 0===(C=e[E+1])||/^(-|--)[^-]/.test(C)&&!C.match(x)||M(_,y.bools)||M(_,y.counts)?/^(true|false)$/.test(C)?(T(_,C),E++):T(_,K(_)):(T(_,C),E++))}else{if("--"===O){j=e.slice(E+1);break}if(u["halt-at-non-option"]){j=e.slice(E);break}w._.push(D("_",O))}}function P(e,a,t){var i;const o=M(a,y.nargs);var n=0;for(i=e+1;i<t.length&&!t[i].match(/^-[^0-9]/);i++)n++;n<o&&(b=Error(g("Not enough arguments following: %s",a)));const r=Math.min(n,o);for(i=e+1;i<r+e+1;i++)T(a,t[i]);return e+r}function F(e,a,t){for(var i=e+1,o=[],n=e>0,r=e+1;r<t.length;r++){if(/^-/.test(t[r])&&!x.test(t[r])){r===i&&T(a,$("array")),n=!0;break}e=r,o.push(t[r])}return n?T(a,o.map(function(e){return I(a,e)})):o.forEach(function(e){T(a,e)}),e}function T(e,a){if(function(e){[].concat(y.aliases[e]||[],e).forEach(function(e){delete y.defaulted[e]})}(e),/-/.test(e)&&u["camel-case-expansion"]){var t=e.split(".").map(function(e){return i(e)}).join(".");!function e(a,t){y.aliases[a]&&y.aliases[a].length||(y.aliases[a]=[t],v[t]=!0);y.aliases[t]&&y.aliases[t].length||e(t,a)}(e,t)}var o=I(e,a),r=e.split(".");(H(w,r,o),y.aliases[e]&&y.aliases[e].forEach(function(e){e=e.split("."),H(w,e,o)}),r.length>1&&u["dot-notation"]&&(y.aliases[r[0]]||[]).forEach(function(e){e=e.split(".");var a=[].concat(r);a.shift(),e=e.concat(a),H(w,e,o)}),M(e,y.normalize)&&!M(e,y.arrays))&&[e].concat(y.aliases[e]||[]).forEach(function(e){w.__defineSetter__(e,function(e){a=n.normalize(e)}),w.__defineGetter__(e,function(){return"string"==typeof a?n.normalize(a):a})})}function I(e,a){"string"!=typeof a||"'"!==a[0]&&'"'!==a[0]||a[a.length-1]!==a[0]||(a=a.substring(1,a.length-1)),(M(e,y.bools)||M(e,y.counts))&&"string"==typeof a&&(a="true"===a);var t=D(e,a);return M(e,y.counts)&&(G(t)||"boolean"==typeof t)&&(t=p),M(e,y.normalize)&&M(e,y.arrays)&&(t=Array.isArray(a)?a.map(n.normalize):n.normalize(a)),t}function D(e,a){if(!M(e,y.strings)&&!M(e,y.coercions)){(null!=(t=a)&&("number"==typeof t||!!/^0x[0-9a-f]+$/i.test(t)||!(t.length>1&&"0"===t[0])&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t))&&u["parse-numbers"]&&Number.isSafeInteger(Math.floor(a))||!G(a)&&M(e,y.numbers))&&(a=Number(a))}var t;return a}function B(e,a){Object.keys(e).forEach(function(t){var i=e[t],o=a?a+"."+t:t;"object"==typeof i&&null!==i&&!Array.isArray(i)&&u["dot-notation"]?B(i,o):(!N(w,o.split("."))||y.defaulted[o]||y.arrays[o]&&u["combine-arrays"])&&T(o,i)})}function L(e,a){if(void 0!==d){var t="string"==typeof d?d:"";Object.keys(process.env).forEach(function(o){if(""===t||0===o.lastIndexOf(t,0)){var n=o.split("__").map(function(e,a){return 0===a&&(e=e.substring(t.length)),i(e)});!(a&&y.configs[n.join(".")]||!a)||N(e,n)&&!y.defaulted[n.join(".")]||T(n.join("."),process.env[o])}})}}function U(e,a,t){Object.keys(t).forEach(function(i){N(e,i.split("."))||(H(e,i.split("."),t[i]),(a[i]||[]).forEach(function(a){N(e,a.split("."))||H(e,a.split("."),t[i])}))})}function N(e,a){var t=e;u["dot-notation"]||(a=[a.join(".")]),a.slice(0,-1).forEach(function(e){t=t[e]||{}});var i=a[a.length-1];return"object"==typeof t&&i in t}function H(e,a,t){var i=e;u["dot-notation"]||(a=[a.join(".")]),a.slice(0,-1).forEach(function(e,a){"object"==typeof i&&void 0===i[e]&&(i[e]={}),"object"!=typeof i[e]||Array.isArray(i[e])?(Array.isArray(i[e])?i[e].push({}):i[e]=[i[e],{}],i=i[e][i[e].length-1]):i=i[e]});var o=a[a.length-1],n=M(a.join("."),y.arrays),r=Array.isArray(t),s=u["duplicate-arguments-array"];t===p?i[o]=p(i[o]):Array.isArray(i[o])?s&&n&&r?i[o]=u["flatten-duplicate-arrays"]?i[o].concat(t):(Array.isArray(i[o][0])?i[o]:[i[o]]).concat([t]):s||Boolean(n)!==Boolean(r)?i[o]=i[o].concat([t]):i[o]=t:void 0===i[o]&&n?i[o]=r?t:[t]:s&&!(void 0===i[o]||M(o,y.bools)||M(a.join("."),y.bools)||M(o,y.counts))?i[o]=[i[o],t]:i[o]=t}function M(e,a){var t=!1;return[].concat(y.aliases[e]||[],e).forEach(function(e){a[e]&&(t=a[e])}),t}function K(e){return!M(e,y.bools)&&!M(e,y.counts)&&`${e}`in l?l[e]:$(function(e){var a="boolean";M(e,y.strings)?a="string":M(e,y.numbers)?a="number":M(e,y.arrays)&&(a="array");return a}(e))}function $(e){return{boolean:!0,string:"",number:void 0,array:[]}[e]}function G(e){return void 0===e}return L(w,!0),L(w,!1),function(e){var a={};U(a,y.aliases,l),Object.keys(y.configs).forEach(function(i){var o=e[i]||a[i];if(o)try{var r=null,s=n.resolve(process.cwd(),o);if("function"==typeof y.configs[i]){try{r=y.configs[i](s)}catch(e){r=e}if(r instanceof Error)return void(b=r)}else r=t(95)(s);B(r)}catch(a){e[i]&&(b=Error(g("Invalid JSON config file: %s",o)))}})}(w),function(){if(void 0===m)return;m.forEach(function(e){B(e)})}(),U(w,y.aliases,l),function(e){var a,t={};Object.keys(e).forEach(function(i){if(!t.hasOwnProperty(i)&&"function"==typeof(a=M(i,y.coercions)))try{var o=a(e[i]);[].concat(y.aliases[i]||[],i).forEach(a=>{t[a]=e[a]=o})}catch(e){b=e}})}(w),u["set-placeholder-key"]&&function(e){y.keys.forEach(a=>{~a.indexOf(".")||void 0===e[a]&&(e[a]=void 0)})}(w),Object.keys(y.counts).forEach(function(e){N(w,e.split("."))||T(e,0)}),h&&j.length&&(w[f]=[]),j.forEach(function(e){w[f].push(e)}),{argv:w,error:b,aliases:y.aliases,newAliases:v,configuration:u}}function p(e){return void 0!==e?e+1:1}function u(e,a){return c(e.slice(),a).argv}u.detailed=function(e,a){return c(e.slice(),a)},e.exports=u},function(e,a,t){"use strict";var i=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},o=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},r=n(t(96)),s=n(t(108)),c=n(t(111)),p=n(t(112)),u=n(t(113)),l=t(31),m=t(1),d=t(12),h=n(t(8)),f=function(){function e(){this._workingDir=l.randomTempDir(),this._service=new r.default(this._workingDir),this.chat=new s.default(this._workingDir),this.wallet=new c.default(this._workingDir),this.team=new p.default(this._workingDir)}return e.prototype.init=function(e,a,t){return i(this,void 0,void 0,function(){return o(this,function(i){switch(i.label){case 0:return[4,this._prepWorkingDir()];case 1:return i.sent(),[4,this._service.init(e,a,t)];case 2:return i.sent(),[4,this._initSubBots(t)];case 3:return i.sent(),[2]}})})},e.prototype.initFromRunningService=function(e,a){return i(this,void 0,void 0,function(){return o(this,function(t){switch(t.label){case 0:return[4,this._prepWorkingDir()];case 1:return t.sent(),[4,this._service.initFromRunningService(e,a)];case 2:return t.sent(),[4,this._initSubBots(a)];case 3:return t.sent(),[2]}})})},e.prototype.myInfo=function(){return this._service.myInfo()},e.prototype.deinit=function(){return i(this,void 0,void 0,function(){return o(this,function(e){switch(e.label){case 0:return[4,this.chat._deinit()];case 1:return e.sent(),[4,this._service.deinit()];case 2:return e.sent(),[4,l.rmdirRecursive(this._workingDir)];case 3:return e.sent(),[2]}})})},e.prototype._prepWorkingDir=function(){return i(this,void 0,void 0,function(){var e,a;return o(this,function(t){switch(t.label){case 0:return[4,l.whichKeybase()];case 1:return e=t.sent(),a=h.default.join(this._workingDir,"keybase"),[4,m.promisify(u.default)(this._workingDir)];case 2:return t.sent(),[4,m.promisify(d.copyFile)(e,a)];case 3:return t.sent(),[2]}})})},e.prototype._initSubBots=function(e){return i(this,void 0,void 0,function(){var a;return o(this,function(t){switch(t.label){case 0:return(a=this.myInfo())?[4,this.chat._init(a.homeDir,e)]:[3,4];case 1:return t.sent(),[4,this.wallet._init(a.homeDir,e)];case 2:return t.sent(),[4,this.team._init(a.homeDir,e)];case 3:return t.sent(),[3,5];case 4:throw new Error("Issue initializing bot.");case 5:return[2]}})})},e}();e.exports=f},function(e,a,t){"use strict";var i=t(9),o=t(114),n=t(228),r=t(229),s=t(230),c=t(231),p=t(232),u=t(233),l=t(234),m=t(235),d=t(236),h=t(237),f=t(238),v=t(239),g=t(11),b=t(240),y=t(241),x=t(242),k=t(243),w=t(244),j=t(245),E=t(249),S=t(250),_=t(251),R=t(252),A=t(253),C=t(254),q=t(255),O=t(256),z=t(257),P=t(258),F=t(86),T=t(262),I=t(263),D=t(264),B=t(265),L=t(266),U=t(267),N=t(268),H=t(269),M=t(270),K=t(271),$=t(272),G=t(273),V=t(274),Q=t(275),W=t(276),Y=t(277),Z=t(278),J=t(279),X=t(280),ee=t(281),ae=t(282),te=t(283),ie=t(284),oe=t(285),ne=e.exports=function(e){if(!e.host)throw new Error(g.NO_HOST_ERROR);if(this.host=e.host,this.timeout=e.timeout,this.protocol=e.protocol?e.protocol:"https",this.path_prefix=e.path_prefix?e.path_prefix:"/",this.port=e.port,this.apiVersion=2,this.strictSSL=e.strictSSL||!0,this.agileApiVersion="1.0",this.authApiVersion="1",this.webhookApiVersion="1.0",this.promise=e.promise||Promise,this.requestLib=e.request||o,this.rejectUnauthorized=e.rejectUnauthorized,e.oauth){if(!e.oauth.consumer_key)throw new Error(g.NO_CONSUMER_KEY_ERROR);if(!e.oauth.private_key)throw new Error(g.NO_PRIVATE_KEY_ERROR);if(!e.oauth.token)throw new Error(g.NO_OAUTH_TOKEN_ERROR);if(!e.oauth.token_secret)throw new Error(g.NO_OAUTH_TOKEN_SECRET_ERROR);this.oauthConfig=e.oauth,this.oauthConfig.signature_method="RSA-SHA1"}else if(e.basic_auth)if(e.basic_auth.base64)this.basic_auth={base64:e.basic_auth.base64};else if(e.basic_auth.api_token||e.basic_auth.email){if(!e.basic_auth.email)throw new Error(g.NO_EMAIL_ERROR);if(!e.basic_auth.api_token)throw new Error(g.NO_APITOKEN_ERROR);this.basic_auth={user:e.basic_auth.email,pass:e.basic_auth.api_token}}else{if(!e.basic_auth.username)throw new Error(g.NO_USERNAME_ERROR);if(!e.basic_auth.password)throw new Error(g.NO_PASSWORD_ERROR);this.basic_auth={user:e.basic_auth.username,pass:e.basic_auth.password}}e.cookie_jar&&(this.cookie_jar=e.cookie_jar),this.applicationProperties=new n(this),this.attachment=new r(this),this.auditing=new s(this),this.auth=new c(this),this.avatar=new p(this),this.backlog=new u(this),this.board=new l(this),this.comment=new m(this),this.component=new d(this),this.customFieldOption=new h(this),this.dashboard=new f(this),this.epic=new v(this),this.field=new b(this),this.filter=new y(this),this.group=new x(this),this.groupUserPicker=new k(this),this.groups=new w(this),this.issue=new j(this),this.issueLink=new E(this),this.issueLinkType=new S(this),this.issueType=new _(this),this.jql=new R(this),this.labels=new A(this),this.licenseRole=new C(this),this.licenseValidator=new q(this),this.myPermissions=new O(this),this.myPreferences=new z(this),this.myself=new P(this),this.password=new T(this),this.permissions=new I(this),this.permissionScheme=new D(this),this.priority=new B(this),this.project=new L(this),this.projectCategory=new U(this),this.projectValidate=new N(this),this.reindex=new H(this),this.resolution=new M(this),this.roles=new K(this),this.screens=new $(this),this.search=new G(this),this.securityLevel=new V(this),this.serverInfo=new Q(this),this.settings=new W(this),this.sprint=new Y(this),this.status=new Z(this),this.statusCategory=new J(this),this.user=new X(this),this.version=new ee(this),this.webhook=new ae(this),this.workflow=new te(this),this.workflowScheme=new ie(this),this.worklog=new oe(this)};(function(){this.buildURL=function(e,a){var t=this.path_prefix+"rest/api/",o=a||this.apiVersion,n=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+o+e});return decodeURIComponent(n)},this.buildAgileURL=function(e,a){var t=this.path_prefix+"rest/agile/",o=a||this.agileApiVersion,n=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+o+e});return decodeURIComponent(n)},this.buildAuthURL=function(e,a){var t=this.path_prefix+"rest/auth/",o=a||this.authApiVersion,n=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+o+e});return decodeURIComponent(n)},this.buildWebhookURL=function(e,a){var t=this.path_prefix+"rest/webhooks/",o=a||this.webhookApiVersion,n=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+o+e});return decodeURIComponent(n)},this.makeRequest=function(e,a,t){let i=this.requestLib;if(e.rejectUnauthorized=this.rejectUnauthorized,e.strictSSL=this.strictSSL,e.timeout=this.timeout,this.oauthConfig?e.oauth=this.oauthConfig:this.basic_auth&&(this.basic_auth.base64?(e.headers||(e.headers={}),e.headers.Authorization="Basic "+this.basic_auth.base64):e.auth=this.basic_auth),this.cookie_jar&&(e.jar=this.cookie_jar),a)i(e,function(e,i,o){if(e||i.statusCode<200||i.statusCode>399)return a(e||o,null,i);if("string"==typeof o)try{o=JSON.parse(o)}catch(e){return a(e,null,i)}return a(null,t||o,i)});else if(this.promise)return new this.promise(function(a,t){var o=i(e),n=null;o.on("request",function(e){n=e}),o.on("response",function(i){var o=i.statusCode<200||i.statusCode>399,r=[],s=r.push.bind(r);i.on("data",s),i.on("end",function(){var s=r.join("");if("["===s[0]||"{"===s[0])try{s=JSON.parse(s)}catch(e){}if(o)return i.body=s,void(e.debug?t({result:JSON.stringify(i),debug:{options:e,request:{headers:n._headers},response:{headers:i.headers}}}):t(JSON.stringify(i)));e.debug?a({result:s,debug:{options:e,request:{headers:n._headers},response:{headers:i.headers}}}):a(s)})}),o.on("error",t)})}}).call(ne.prototype),ne.oauth_util=t(86),a.oauth_util=F},function(e,a,t){"use strict";e.exports=((e,a)=>{a=Object.assign({pascalCase:!1},a);const t=e=>a.pascalCase?e.charAt(0).toUpperCase()+e.slice(1):e;return 0===(e=Array.isArray(e)?e.map(e=>e.trim()).filter(e=>e.length).join("-"):e.trim()).length?"":1===e.length?a.pascalCase?e.toUpperCase():e.toLowerCase():/^[a-z\d]+$/.test(e)?t(e):(e!==e.toLowerCase()&&(e=(e=>{let a=!1,t=!1,i=!1;for(let o=0;o<e.length;o++){const n=e[o];a&&/[a-zA-Z]/.test(n)&&n.toUpperCase()===n?(e=e.slice(0,o)+"-"+e.slice(o),a=!1,i=t,t=!0,o++):t&&i&&/[a-zA-Z]/.test(n)&&n.toLowerCase()===n?(e=e.slice(0,o-1)+"-"+e.slice(o-1),i=t,t=!1,a=!0):(a=n.toLowerCase()===n,i=t,t=n.toUpperCase()===n)}return e})(e)),t(e=e.replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,(e,a)=>a.toUpperCase())))})},function(e,a,t){"use strict";e.exports=function(e,a){if("string"!=typeof e)throw new TypeError("Expected a string");return a=void 0===a?"_":a,e.replace(/([a-z\d])([A-Z])/g,"$1"+a+"$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1"+a+"$2").toLowerCase()}},function(e,a){e.exports=function(e){if(Array.isArray(e))return e;e=e.trim();for(var a=0,t=null,i=null,o=null,n=[],r=0;r<e.length;r++)t=i," "!==(i=e.charAt(r))||o?(i===o?(n[a]||(n[a]=""),o=null):"'"!==i&&'"'!==i||o||(o=i),n[a]||(n[a]=""),n[a]+=i):" "!==t&&a++;return n}},function(e,a){function t(e){var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=95},function(e,a,t){"use strict";var i=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},o=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var r=t(31),s=t(32),c=n(t(8)),p=function(){function e(e){this.workingDir=e,this.initialized=!1,this.verbose=!1,this.botLite=!0,this.disableTyping=!0,this.autoLogSendOnCrash=!1}return e.prototype.init=function(e,a,t){return i(this,void 0,void 0,function(){var i,n;return o(this,function(o){switch(o.label){case 0:if(!e||"string"!=typeof e)throw new Error("Please provide a username to initialize the bot. Got: "+JSON.stringify(e));if(!a||"string"!=typeof a)throw new Error("Please provide a paperkey to initialize the bot.");if(this.initialized)throw new Error("Cannot initialize an already initialized bot.");this.homeDir=this.workingDir,this.serviceLogFile=c.default.join(this.homeDir,"logs","keybase.service.log"),this.botLite=!t||Boolean("boolean"!=typeof t.botLite||t.botLite),this.disableTyping=!t||Boolean("boolean"!=typeof t.disableTyping||t.disableTyping),this.autoLogSendOnCrash=!!t&&Boolean("boolean"==typeof t.autoLogSendOnCrash&&t.autoLogSendOnCrash),o.label=1;case 1:return o.trys.push([1,6,,8]),[4,this.startupService()];case 2:return o.sent(),[4,r.keybaseExec(this.workingDir,this.homeDir,["oneshot","--username",e],{stdinBuffer:a})];case 3:return o.sent(),[4,r.keybaseExec(this.workingDir,this.homeDir,["chat","notification-settings","disable-typing",this.disableTyping.toString()])];case 4:return o.sent(),[4,r.keybaseStatus(this.workingDir,this.homeDir)];case 5:if((i=o.sent())&&i.username&&i.devicename&&(this.initialized="paperkey",this.username=i.username,this._paperkey=a,this.devicename=i.devicename,this.verbose=!!t&&Boolean(t.verbose)),this.username!==e)throw new Error("Failed to initialize service.");return[3,8];case 6:return n=o.sent(),[4,this._killCustomService()];case 7:throw o.sent(),n;case 8:return[2]}})})},e.prototype.initFromRunningService=function(e,a){return i(this,void 0,void 0,function(){var t;return o(this,function(i){switch(i.label){case 0:if(this.initialized)throw new Error("Cannot initialize an already initialized bot.");return this.homeDir=e,[4,r.keybaseStatus(this.workingDir,this.homeDir)];case 1:return(t=i.sent())&&t.username&&t.devicename&&(this.initialized="runningService",this.username=t.username,this.devicename=t.devicename,this.verbose=!!a&&Boolean(a.verbose)),[2]}})})},e.prototype._killCustomService=function(){return i(this,void 0,void 0,function(){var e;return o(this,function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),[4,r.keybaseExec(this.workingDir,this.homeDir,["logout"])];case 1:return a.sent(),[3,3];case 2:return a.sent(),[3,3];case 3:return a.trys.push([3,5,,6]),[4,r.keybaseExec(this.workingDir,this.homeDir,["ctl","stop","--shutdown"])];case 4:return a.sent(),[3,6];case 5:return a.sent(),[3,6];case 6:e=0,a.label=7;case 7:return[4,r.timeout(100)];case 8:if(a.sent(),!this.running)return[3,9];if(++e>=100)throw new Error("The service didn't finish shutting down in time ("+this.workingDir+")");return[3,7];case 9:return[2]}})})},e.prototype.deinit=function(){return i(this,void 0,void 0,function(){return o(this,function(e){switch(e.label){case 0:if(!this.initialized)throw new Error("Cannot deinitialize an uninitialized bot.");return"paperkey"!==this.initialized?[3,2]:[4,this._killCustomService()];case 1:e.sent(),e.label=2;case 2:return this.initialized=!1,[2]}})})},e.prototype.myInfo=function(){return this.username&&this.devicename?{username:this.username,devicename:this.devicename,homeDir:this.homeDir?this.homeDir:void 0,botLite:this.botLite,disableTyping:this.disableTyping}:null},e.prototype.startupService=function(){return i(this,void 0,void 0,function(){var e,a,t=this;return o(this,function(n){return e=["service"],this.homeDir&&e.unshift("--home",this.homeDir),this.serviceLogFile&&e.unshift("--log-file",this.serviceLogFile),this.botLite&&e.unshift("--enable-bot-lite-mode"),a=s.spawn(c.default.join(this.workingDir,"keybase"),e,{env:process.env}),this.running=!0,a.on("exit",function(e){return i(t,void 0,void 0,function(){return o(this,function(a){switch(a.label){case 0:return this.running=!1,0!==e&&this.autoLogSendOnCrash?[4,this.logSend()]:[3,2];case 1:a.sent(),a.label=2;case 2:return[2]}})})}),[2,new Promise(function(e,n){return i(t,void 0,void 0,function(){var t,i=this;return o(this,function(o){switch(o.label){case 0:a.on("close",function(e){n(new Error("keybase service exited with code "+e+" ("+i.workingDir+")"))}),t=0,o.label=1;case 1:return[4,r.pingKeybaseService(this.workingDir,this.homeDir)];case 2:return o.sent()?[3,4]:[4,r.timeout(100)];case 3:if(o.sent(),++t>=100)throw new Error("Couldn't start up service fast enough");return[3,1];case 4:return e(),[2]}})})})]})})},e.prototype.logSend=function(){return i(this,void 0,void 0,function(){var e,a,t;return o(this,function(i){switch(i.label){case 0:if(e=this.running)return[3,6];i.label=1;case 1:return i.trys.push([1,5,,6]),[4,this.startupService()];case 2:return i.sent(),"paperkey"===this.initialized&&this.username&&this._paperkey?[4,r.keybaseExec(this.workingDir,this.homeDir,["oneshot","--username",this.username],{stdinBuffer:this._paperkey})]:[3,4];case 3:i.sent(),i.label=4;case 4:return[3,6];case 5:return i.sent(),[3,6];case 6:return a="keybase-bot auto log send\nusername: "+(this.username||"none")+"\ninitialized: "+(this.initialized||"false"),t=["log","send","--no-confirm","--feedback",a],this.serviceLogFile&&t.unshift("--log-file",this.serviceLogFile),[4,r.keybaseExec(this.workingDir,this.homeDir,t)];case 7:return i.sent(),e?[3,9]:[4,this._killCustomService()];case 8:i.sent(),i.label=9;case 9:return[2]}})})},e}();a.default=p},function(e,a,t){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var a,t=1,i=arguments.length;t<i;t++)for(var o in a=arguments[t])Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var n=o(t(98)),r=o(t(99)),s=o(t(100));a.formatAPIObjectInput=function e(a,t){return null==a||"object"!=typeof a?a:Array.isArray(a)?a.map(function(a){return e(a,t)}):Object.keys(a).reduce(function(o,r){var c,p,u;return u="wallet"===t?s.default(r):n.default(r),"object"==typeof a[r]?i({},o,((c={})[u]=e(a[r],t),c)):i({},o,((p={})[u]=a[r],p))},{})};var c={team:{},wallet:{},chat:{read:[["messages",null,"msg","reactions","reactions",null]]}};function p(e,a){if(!e)return e;var t=i({},e);return t.parent?(t.parent=t.parent.slice(),t.parent.push(a)):t.parent=[a],t}a.formatAPIObjectOutput=function e(a,t){return null==a||"object"!=typeof a?a:Array.isArray(a)?a.map(function(a,i){return e(a,p(t,i))}):Object.keys(a).reduce(function(o,n){var s,u,l=function(e){if(!e||!c[e.apiName]||!c[e.apiName][e.method])return!1;for(var a=e.parent?e.parent.length:0,t=0,i=c[e.apiName][e.method];t<i.length;t++){var o=i[t];if(o.length===a){for(var n=!1,r=0,s=o.entries();r<s.length;r++){var p=s[r],u=p[0],l=p[1];if(null!==l&&"object"==typeof e.parent&&e.parent[u]!==l){n=!0;break}}if(!n)return!0}}return!1}(t)?n:r.default(n);return"object"==typeof a[n]?i({},o,((s={})[l]=e(a[n],p(t,n)),s)):i({},o,((u={})[l]=a[n],u))},{})}},function(e,a){var t=1/0,i="[object Symbol]",o=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,n=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,r="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="["+r+"]",c="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",p="\\d+",u="[\\u2700-\\u27bf]",l="[a-z\\xdf-\\xf6\\xf8-\\xff]",m="[^\\ud800-\\udfff"+r+p+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",d="(?:\\ud83c[\\udde6-\\uddff]){2}",h="[\\ud800-\\udbff][\\udc00-\\udfff]",f="[A-Z\\xc0-\\xd6\\xd8-\\xde]",v="(?:"+l+"|"+m+")",g="(?:"+f+"|"+m+")",b="(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?",y="[\\ufe0e\\ufe0f]?"+b+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",d,h].join("|")+")[\\ufe0e\\ufe0f]?"+b+")*"),x="(?:"+[u,d,h].join("|")+")"+y,k=RegExp("['’]","g"),w=RegExp(c,"g"),j=RegExp([f+"?"+l+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[s,f,"$"].join("|")+")",g+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[s,f+v,"$"].join("|")+")",f+"?"+v+"+(?:['’](?:d|ll|m|re|s|t|ve))?",f+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",p,x].join("|"),"g"),E=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,S="object"==typeof global&&global&&global.Object===Object&&global,_="object"==typeof self&&self&&self.Object===Object&&self,R=S||_||Function("return this")();var A,C=(A={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==A?void 0:A[e]});var q=Object.prototype.toString,O=R.Symbol,z=O?O.prototype:void 0,P=z?z.toString:void 0;function F(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&q.call(e)==i}(e))return P?P.call(e):"";var a=e+"";return"0"==a&&1/e==-t?"-0":a}function T(e){return null==e?"":F(e)}var I,D=(I=function(e,a,t){return e+(t?"_":"")+a.toLowerCase()},function(e){return function(e,a,t,i){var o=-1,n=e?e.length:0;for(i&&n&&(t=e[++o]);++o<n;)t=a(t,e[o],o,e);return t}(function(e,a,t){return e=T(e),void 0===(a=t?void 0:a)?function(e){return E.test(e)}(e)?function(e){return e.match(j)||[]}(e):function(e){return e.match(o)||[]}(e):e.match(a)||[]}(function(e){return(e=T(e))&&e.replace(n,C).replace(w,"")}(e).replace(k,"")),I,"")});e.exports=D},function(e,a){var t=1/0,i="[object Symbol]",o=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,n=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,r="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="[\\ud800-\\udfff]",c="["+r+"]",p="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",u="\\d+",l="[\\u2700-\\u27bf]",m="[a-z\\xdf-\\xf6\\xf8-\\xff]",d="[^\\ud800-\\udfff"+r+u+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",h="\\ud83c[\\udffb-\\udfff]",f="[^\\ud800-\\udfff]",v="(?:\\ud83c[\\udde6-\\uddff]){2}",g="[\\ud800-\\udbff][\\udc00-\\udfff]",b="[A-Z\\xc0-\\xd6\\xd8-\\xde]",y="(?:"+m+"|"+d+")",x="(?:"+b+"|"+d+")",k="(?:"+p+"|"+h+")"+"?",w="[\\ufe0e\\ufe0f]?"+k+("(?:\\u200d(?:"+[f,v,g].join("|")+")[\\ufe0e\\ufe0f]?"+k+")*"),j="(?:"+[l,v,g].join("|")+")"+w,E="(?:"+[f+p+"?",p,v,g,s].join("|")+")",S=RegExp("['’]","g"),_=RegExp(p,"g"),R=RegExp(h+"(?="+h+")|"+E+w,"g"),A=RegExp([b+"?"+m+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[c,b,"$"].join("|")+")",x+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[c,b+y,"$"].join("|")+")",b+"?"+y+"+(?:['’](?:d|ll|m|re|s|t|ve))?",b+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",u,j].join("|"),"g"),C=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),q=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,O="object"==typeof global&&global&&global.Object===Object&&global,z="object"==typeof self&&self&&self.Object===Object&&self,P=O||z||Function("return this")();var F,T=(F={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==F?void 0:F[e]});function I(e){return C.test(e)}function D(e){return I(e)?function(e){return e.match(R)||[]}(e):function(e){return e.split("")}(e)}var B=Object.prototype.toString,L=P.Symbol,U=L?L.prototype:void 0,N=U?U.toString:void 0;function H(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&B.call(e)==i}(e))return N?N.call(e):"";var a=e+"";return"0"==a&&1/e==-t?"-0":a}function M(e,a,t){var i=e.length;return t=void 0===t?i:t,!a&&t>=i?e:function(e,a,t){var i=-1,o=e.length;a<0&&(a=-a>o?0:o+a),(t=t>o?o:t)<0&&(t+=o),o=a>t?0:t-a>>>0,a>>>=0;for(var n=Array(o);++i<o;)n[i]=e[i+a];return n}(e,a,t)}function K(e){return null==e?"":H(e)}var $,G=($=function(e,a,t){return a=a.toLowerCase(),e+(t?Q(K(a).toLowerCase()):a)},function(e){return function(e,a,t,i){var o=-1,n=e?e.length:0;for(i&&n&&(t=e[++o]);++o<n;)t=a(t,e[o],o,e);return t}(function(e,a,t){return e=K(e),void 0===(a=t?void 0:a)?function(e){return q.test(e)}(e)?function(e){return e.match(A)||[]}(e):function(e){return e.match(o)||[]}(e):e.match(a)||[]}(function(e){return(e=K(e))&&e.replace(n,T).replace(_,"")}(e).replace(S,"")),$,"")});var V,Q=(V="toUpperCase",function(e){var a=I(e=K(e))?D(e):void 0,t=a?a[0]:e.charAt(0),i=a?M(a,1).join(""):e.slice(1);return t[V]()+i});e.exports=G},function(e,a){var t=1/0,i="[object Symbol]",o=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,n=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,r="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="["+r+"]",c="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",p="\\d+",u="[\\u2700-\\u27bf]",l="[a-z\\xdf-\\xf6\\xf8-\\xff]",m="[^\\ud800-\\udfff"+r+p+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",d="(?:\\ud83c[\\udde6-\\uddff]){2}",h="[\\ud800-\\udbff][\\udc00-\\udfff]",f="[A-Z\\xc0-\\xd6\\xd8-\\xde]",v="(?:"+l+"|"+m+")",g="(?:"+f+"|"+m+")",b="(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?",y="[\\ufe0e\\ufe0f]?"+b+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",d,h].join("|")+")[\\ufe0e\\ufe0f]?"+b+")*"),x="(?:"+[u,d,h].join("|")+")"+y,k=RegExp("['’]","g"),w=RegExp(c,"g"),j=RegExp([f+"?"+l+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[s,f,"$"].join("|")+")",g+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[s,f+v,"$"].join("|")+")",f+"?"+v+"+(?:['’](?:d|ll|m|re|s|t|ve))?",f+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",p,x].join("|"),"g"),E=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,S="object"==typeof global&&global&&global.Object===Object&&global,_="object"==typeof self&&self&&self.Object===Object&&self,R=S||_||Function("return this")();var A,C=(A={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==A?void 0:A[e]});var q=Object.prototype.toString,O=R.Symbol,z=O?O.prototype:void 0,P=z?z.toString:void 0;function F(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&q.call(e)==i}(e))return P?P.call(e):"";var a=e+"";return"0"==a&&1/e==-t?"-0":a}function T(e){return null==e?"":F(e)}var I,D=(I=function(e,a,t){return e+(t?"-":"")+a.toLowerCase()},function(e){return function(e,a,t,i){var o=-1,n=e?e.length:0;for(i&&n&&(t=e[++o]);++o<n;)t=a(t,e[o],o,e);return t}(function(e,a,t){return e=T(e),void 0===(a=t?void 0:a)?function(e){return E.test(e)}(e)?function(e){return e.match(j)||[]}(e):function(e){return e.match(o)||[]}(e):e.match(a)||[]}(function(e){return(e=T(e))&&e.replace(n,C).replace(w,"")}(e).replace(k,"")),I,"")});e.exports=D},function(e,a,t){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var o=i(t(102)),n=i(t(8)),r=i(t(2));a.default=function(){var e=r.default.randomBytes(16).toString("hex");return n.default.join(o.default.tmpdir(),"keybase_bot_"+e)}},function(e,a){e.exports=require("os")},function(e,a,t){"use strict";var i=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},o=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var r=n(t(12)),s=n(t(8)),c=t(1);a.default=function e(a){return i(this,void 0,void 0,function(){var t,i,n,p,u,l,m,d;return o(this,function(o){switch(o.label){case 0:return t=c.promisify(r.default.lstat),i=c.promisify(r.default.unlink),n=c.promisify(r.default.rmdir),p=c.promisify(r.default.readdir),[4,t(a)];case 1:return o.sent()?(u=0,[4,p(a)]):[3,11];case 2:l=o.sent(),o.label=3;case 3:return u<l.length?(m=l[u],d=s.default.join(a,m),[4,t(d)]):[3,9];case 4:return o.sent().isDirectory()?[4,e(d)]:[3,6];case 5:return o.sent(),[3,8];case 6:return[4,i(d)];case 7:o.sent(),o.label=8;case 8:return u++,[3,3];case 9:return[4,n(a)];case 10:o.sent(),o.label=11;case 11:return[2]}})})}},function(e,a,t){"use strict";var i=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},o=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var r=n(t(36));a.default=function(e,a){return i(this,void 0,void 0,function(){var t;return o(this,function(i){switch(i.label){case 0:return[4,r.default(e,a,["status","--json"],{json:!0})];case 1:if((t=i.sent())&&t.Username&&t.Device&&t.Device.name)return[2,{username:t.Username,devicename:t.Device.name,homeDir:a}];throw new Error("Failed to get current username and device name.")}})})}},function(e,a,t){"use strict";var i=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},o=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var r=n(t(36));a.default=function(e,a){return i(this,void 0,void 0,function(){return o(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,r.default(e,a,["--no-auto-fork","status","--json"],{json:!0})];case 1:return t.sent(),[2,!0];case 2:return t.sent(),[2,!1];case 3:return[2]}})})}},function(e,a,t){"use strict";var i=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},o=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}};Object.defineProperty(a,"__esModule",{value:!0});var n=t(32),r=t(1).promisify(n.exec);a.default=function(){return i(this,void 0,void 0,function(){var e;return o(this,function(a){switch(a.label){case 0:return[4,r("which keybase")];case 1:if(!(e=a.sent().stdout)||!e.trim().length)throw new Error("Could not find keybase binary");return[2,e.trim()]}})})}},function(e,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.default=function(e){return new Promise(function(a){setTimeout(function(){a()},e)})}},function(e,a,t){"use strict";var i,o=this&&this.__extends||(i=function(e,a){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,a){e.__proto__=a}||function(e,a){for(var t in a)a.hasOwnProperty(t)&&(e[t]=a[t])})(e,a)},function(e,a){function t(){this.constructor=e}i(e,a),e.prototype=null===a?Object.create(a):(t.prototype=a.prototype,new t)}),n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var a,t=1,i=arguments.length;t<i;t++)for(var o in a=arguments[t])Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o]);return e}).apply(this,arguments)},r=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},s=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var p=t(32),u=c(t(52)),l=c(t(37)),m=t(31),d=function(e){function a(){return null!==e&&e.apply(this,arguments)||this}return o(a,e),a.prototype.list=function(e){return r(this,void 0,void 0,function(){var a;return s(this,function(t){switch(t.label){case 0:return[4,this._guardInitialized()];case 1:return t.sent(),[4,this._runApiCommand({apiName:"chat",method:"list",options:e})];case 2:if(!(a=t.sent()))throw new Error("Keybase chat list returned nothing.");return[2,a.conversations||[]]}})})},a.prototype.listChannels=function(e,a){return r(this,void 0,void 0,function(){var t,i;return s(this,function(o){switch(o.label){case 0:return[4,this._guardInitialized()];case 1:return o.sent(),t=n({},a,{name:e,membersType:a&&a.membersType?a.membersType:"team"}),[4,this._runApiCommand({apiName:"chat",method:"listconvsonname",options:t})];case 2:if(!(i=o.sent()))throw new Error("Keybase chat list convs on name returned nothing.");return[2,i.conversations||[]]}})})},a.prototype.read=function(e,a){return r(this,void 0,void 0,function(){var t,i;return s(this,function(o){switch(o.label){case 0:return[4,this._guardInitialized()];case 1:return o.sent(),t=n({},a,{channel:e,peek:!(!a||!a.peek)&&a.peek,unreadOnly:!(!a||void 0===a.unreadOnly)&&a.unreadOnly}),[4,this._runApiCommand({apiName:"chat",method:"read",options:t})];case 2:if(!(i=o.sent()))throw new Error("Keybase chat read returned nothing.");return[2,{pagination:i.pagination,messages:i.messages.map(function(e){return e.msg})}]}})})},a.prototype.joinChannel=function(e){return r(this,void 0,void 0,function(){return s(this,function(a){switch(a.label){case 0:return[4,this._guardInitialized()];case 1:return a.sent(),[4,this._runApiCommand({apiName:"chat",method:"join",options:{channel:e}})];case 2:if(!a.sent())throw new Error("Keybase chat join returned nothing");return[2]}})})},a.prototype.leaveChannel=function(e){return r(this,void 0,void 0,function(){return s(this,function(a){switch(a.label){case 0:return[4,this._guardInitialized()];case 1:return a.sent(),[4,this._runApiCommand({apiName:"chat",method:"leave",options:{channel:e}})];case 2:if(!a.sent())throw new Error("Keybase chat leave returned nothing");return[2]}})})},a.prototype.send=function(e,a,t){return r(this,void 0,void 0,function(){var i,o;return s(this,function(r){switch(r.label){case 0:return[4,this._guardInitialized()];case 1:return r.sent(),i=n({},t,{channel:e,message:a}),[4,this._runApiCommand({apiName:"chat",method:"send",options:i})];case 2:if(!(o=r.sent()))throw new Error("Keybase chat send returned nothing");return[2,{id:o.id}]}})})},a.prototype.createChannel=function(e){return r(this,void 0,void 0,function(){var a;return s(this,function(t){switch(t.label){case 0:return[4,this._guardInitialized()];case 1:return t.sent(),a={channel:e},[4,this._runApiCommand({apiName:"chat",method:"newconv",options:a})];case 2:if(!t.sent())throw new Error("Keybase chat newconv returned nothing");return[2]}})})},a.prototype.attach=function(e,a,t){return r(this,void 0,void 0,function(){var i,o;return s(this,function(r){switch(r.label){case 0:return[4,this._guardInitialized()];case 1:return r.sent(),i=n({},t,{channel:e,filename:a}),[4,this._runApiCommand({apiName:"chat",method:"attach",options:i})];case 2:if(!(o=r.sent()))throw new Error("Keybase chat attach returned nothing");return[2,{id:o.id}]}})})},a.prototype.download=function(e,a,t,i){return r(this,void 0,void 0,function(){var o;return s(this,function(r){switch(r.label){case 0:return[4,this._guardInitialized()];case 1:return r.sent(),o=n({},i,{channel:e,messageId:a,output:t}),[4,this._runApiCommand({apiName:"chat",method:"download",options:o})];case 2:if(!r.sent())throw new Error("Keybase chat download returned nothing");return[2]}})})},a.prototype.react=function(e,a,t,i){return r(this,void 0,void 0,function(){var o,r;return s(this,function(s){switch(s.label){case 0:return[4,this._guardInitialized()];case 1:return s.sent(),o=n({},i,{channel:e,messageId:a,message:{body:t}}),[4,this._runApiCommand({apiName:"chat",method:"reaction",options:o})];case 2:if(!(r=s.sent()))throw new Error("Keybase chat react returned nothing.");return[2,{id:r.id}]}})})},a.prototype.delete=function(e,a,t){return r(this,void 0,void 0,function(){var i;return s(this,function(o){switch(o.label){case 0:return[4,this._guardInitialized()];case 1:return o.sent(),i=n({},t,{channel:e,messageId:a}),[4,this._runApiCommand({apiName:"chat",method:"delete",options:i})];case 2:if(!o.sent())throw new Error("Keybase chat delete returned nothing.");return[2]}})})},a.prototype.getUnfurlSettings=function(){return r(this,void 0,void 0,function(){var e;return s(this,function(a){switch(a.label){case 0:return[4,this._guardInitialized()];case 1:return a.sent(),[4,this._runApiCommand({apiName:"chat",method:"getunfurlsettings",options:{}})];case 2:if(!(e=a.sent()))throw new Error("Keybase chat get unfurl mode returned nothing.");return[2,e]}})})},a.prototype.setUnfurlSettings=function(e){return r(this,void 0,void 0,function(){return s(this,function(a){switch(a.label){case 0:return[4,this._guardInitialized()];case 1:return a.sent(),[4,this._runApiCommand({apiName:"chat",method:"setunfurlsettings",options:e})];case 2:if(!a.sent())throw new Error("Keybase chat set unfurl mode returned nothing.");return[2]}})})},a.prototype.loadFlip=function(e,a,t,i){return r(this,void 0,void 0,function(){var o;return s(this,function(n){switch(n.label){case 0:return[4,this._guardInitialized()];case 1:return n.sent(),[4,this._runApiCommand({apiName:"chat",method:"loadflip",options:m.formatAPIObjectInput({conversationID:e,flipConversationID:a,messageID:t,gameID:i},"chat"),timeout:2e3})];case 2:if(!(o=n.sent()))throw new Error("Keybase chat load flip returned nothing.");return[2,o.status]}})})},a.prototype.watchChannelForNewMessages=function(e,a,t,i){return r(this,void 0,void 0,function(){return s(this,function(o){switch(o.label){case 0:return[4,this._guardInitialized()];case 1:return o.sent(),this._chatListen(a,t,e,i),[2]}})})},a.prototype.watchAllChannelsForNewMessages=function(e,a,t){return r(this,void 0,void 0,function(){return s(this,function(i){switch(i.label){case 0:return[4,this._guardInitialized()];case 1:return i.sent(),this._chatListen(e,a,void 0,t),[2]}})})},a.prototype._chatListen=function(e,a,t,i){var o=this,n=["chat","api-listen"];this.homeDir&&n.unshift("--home",this.homeDir),(!i||i&&!1!==i.hideExploding)&&n.push("--hide-exploding"),i&&!0===i.showLocal&&n.push("--local"),t&&n.push("--filter-channel",JSON.stringify(m.formatAPIObjectInput(t,"chat")));var r=p.spawn(this._pathToKeybaseBinary(),n);this._spawnedProcesses.push(r);u.default.createInterface({input:r.stdout}).on("line",function(t){try{var n=m.formatAPIObjectOutput(JSON.parse(t));if(n.hasOwnProperty("error"))throw new Error(n.error);(i&&i.showLocal||o.username&&o.devicename&&(n.msg.sender.username!==o.username.toLowerCase()||n.msg.sender.deviceName!==o.devicename))&&e(n.msg)}catch(e){a&&a(e)}})},a}(l.default);a.default=d},function(e,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.default=function(e){return JSON.stringify(e).replace(/[\u007F-\uFFFF]/g,function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).substr(-4)})}},function(e,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.API_VERSIONS={chat:1,team:1,wallet:1}},function(e,a,t){"use strict";var i,o=this&&this.__extends||(i=function(e,a){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,a){e.__proto__=a}||function(e,a){for(var t in a)a.hasOwnProperty(t)&&(e[t]=a[t])})(e,a)},function(e,a){function t(){this.constructor=e}i(e,a),e.prototype=null===a?Object.create(a):(t.prototype=a.prototype,new t)}),n=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},r=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var c=function(e){function a(){return null!==e&&e.apply(this,arguments)||this}return o(a,e),a.prototype.balances=function(){return n(this,void 0,void 0,function(){var e;return r(this,function(a){switch(a.label){case 0:return[4,this._guardInitialized()];case 1:return a.sent(),[4,this._runApiCommand({apiName:"wallet",method:"balances"})];case 2:if(!(e=a.sent()))throw new Error("Keybase wallet balanaces returned nothing.");return[2,e||[]]}})})},a.prototype.history=function(e){return n(this,void 0,void 0,function(){var a,t;return r(this,function(i){switch(i.label){case 0:return[4,this._guardInitialized()];case 1:return i.sent(),a={accountId:e},[4,this._runApiCommand({apiName:"wallet",method:"history",options:a})];case 2:if(!(t=i.sent()))throw new Error("Keybase wallet history returned nothing.");return[2,t.map(function(e){return e.payment})]}})})},a.prototype.details=function(e){return n(this,void 0,void 0,function(){var a,t;return r(this,function(i){switch(i.label){case 0:return[4,this._guardInitialized()];case 1:return i.sent(),a={txid:e},[4,this._runApiCommand({apiName:"wallet",method:"details",options:a})];case 2:if(!(t=i.sent()))throw new Error("Keybase wallet details returned nothing.");return[2,t]}})})},a.prototype.lookup=function(e){return n(this,void 0,void 0,function(){var a,t;return r(this,function(i){switch(i.label){case 0:return[4,this._guardInitialized()];case 1:return i.sent(),a={name:e},[4,this._runApiCommand({apiName:"wallet",method:"lookup",options:a})];case 2:if(!(t=i.sent()))throw new Error("Keybase wallet lookup returned nothing.");return[2,t]}})})},a.prototype.send=function(e,a,t,i){return n(this,void 0,void 0,function(){var o,n;return r(this,function(r){switch(r.label){case 0:return[4,this._guardInitialized()];case 1:return r.sent(),o={recipient:e,amount:a,currency:t,message:i},[4,this._runApiCommand({apiName:"wallet",method:"send",options:o})];case 2:if(!(n=r.sent()))throw new Error("Keybase wallet send returned nothing.");return[2,n]}})})},a.prototype.batch=function(e,a){return n(this,void 0,void 0,function(){var t,i;return r(this,function(o){switch(o.label){case 0:return[4,this._guardInitialized()];case 1:return o.sent(),t={batchId:e,payments:a},[4,this._runApiCommand({apiName:"wallet",method:"batch",options:t})];case 2:if(!(i=o.sent()))throw new Error("Keybase wallet batch returned nothing.");return[2,i]}})})},a.prototype.cancel=function(e){return n(this,void 0,void 0,function(){var a;return r(this,function(t){switch(t.label){case 0:return[4,this._guardInitialized()];case 1:return t.sent(),a={txid:e},[4,this._runApiCommand({apiName:"wallet",method:"cancel",options:a})];case 2:if(!t.sent())throw new Error("Keybase wallet cancel returned nothing.");return[2]}})})},a}(s(t(37)).default);a.default=c},function(e,a,t){"use strict";var i,o=this&&this.__extends||(i=function(e,a){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,a){e.__proto__=a}||function(e,a){for(var t in a)a.hasOwnProperty(t)&&(e[t]=a[t])})(e,a)},function(e,a){function t(){this.constructor=e}i(e,a),e.prototype=null===a?Object.create(a):(t.prototype=a.prototype,new t)}),n=this&&this.__awaiter||function(e,a,t,i){return new(t||(t=Promise))(function(o,n){function r(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){e.done?o(e.value):new t(function(a){a(e.value)}).then(r,s)}c((i=i.apply(e,a||[])).next())})},r=this&&this.__generator||function(e,a){var t,i,o,n,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(o=2&n[0]?i.return:n[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,n[1])).done)return o;switch(i=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return r.label++,{value:n[1],done:!1};case 5:r.label++,i=n[1],n=[0];continue;case 7:n=r.ops.pop(),r.trys.pop();continue;default:if(!(o=(o=r.trys).length>0&&o[o.length-1])&&(6===n[0]||2===n[0])){r=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){r.label=n[1];break}if(6===n[0]&&r.label<o[1]){r.label=o[1],o=n;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(n);break}o[2]&&r.ops.pop(),r.trys.pop();continue}n=a.call(e,r)}catch(e){n=[6,e],i=0}finally{t=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,"__esModule",{value:!0});var c=function(e){function a(){return null!==e&&e.apply(this,arguments)||this}return o(a,e),a.prototype.addMembers=function(e){return n(this,void 0,void 0,function(){var a,t;return r(this,function(i){switch(i.label){case 0:return[4,this._guardInitialized()];case 1:return i.sent(),a=e,[4,this._runApiCommand({apiName:"team",method:"add-members",options:a})];case 2:if(!(t=i.sent()))throw new Error("addMembers");return[2,t]}})})},a.prototype.removeMember=function(e){return n(this,void 0,void 0,function(){var a;return r(this,function(t){switch(t.label){case 0:return[4,this._guardInitialized()];case 1:return t.sent(),a=e,[4,this._runApiCommand({apiName:"team",method:"remove-member",options:a})];case 2:return[2,t.sent()]}})})},a.prototype.listTeamMemberships=function(e){return n(this,void 0,void 0,function(){var a,t;return r(this,function(i){switch(i.label){case 0:return[4,this._guardInitialized()];case 1:return i.sent(),a=e,[4,this._runApiCommand({apiName:"team",method:"list-team-memberships",options:a})];case 2:if(!(t=i.sent()))throw new Error("listTeamMemberships");return[2,t]}})})},a}(s(t(37)).default);a.default=c},function(e,a,t){var i=t(8),o=t(12),n=parseInt("0777",8);function r(e,a,t,s){"function"==typeof a?(t=a,a={}):a&&"object"==typeof a||(a={mode:a});var c=a.mode,p=a.fs||o;void 0===c&&(c=n&~process.umask()),s||(s=null);var u=t||function(){};e=i.resolve(e),p.mkdir(e,c,function(t){if(!t)return u(null,s=s||e);switch(t.code){case"ENOENT":r(i.dirname(e),a,function(t,i){t?u(t,i):r(e,a,u,i)});break;default:p.stat(e,function(e,a){e||!a.isDirectory()?u(t,s):u(null,s)})}})}e.exports=r.mkdirp=r.mkdirP=r,r.sync=function e(a,t,r){t&&"object"==typeof t||(t={mode:t});var s=t.mode,c=t.fs||o;void 0===s&&(s=n&~process.umask()),r||(r=null),a=i.resolve(a);try{c.mkdirSync(a,s),r=r||a}catch(o){switch(o.code){case"ENOENT":r=e(i.dirname(a),t,r),e(a,t,r);break;default:var p;try{p=c.statSync(a)}catch(e){throw o}if(!p.isDirectory())throw o}}return r}},function(e,a,t){"use strict";var i=t(38),o=t(53),n=t(40).paramsHaveRequestBody;function r(e,a,t){"function"==typeof a&&(t=a);var o={};return"object"==typeof a?i(o,a,{uri:e}):i(o,"string"==typeof e?{uri:e}:e),o.callback=t||o.callback,o}function s(e,a,t){if(void 0===e)throw new Error("undefined is not a valid uri or options object.");var i=r(e,a,t);if("HEAD"===i.method&&n(i))throw new Error("HTTP HEAD requests MUST NOT include a request body.");return new s.Request(i)}function c(e){var a=e.toUpperCase();return function(e,t,i){var o=r(e,t,i);return o.method=a,s(o,o.callback)}}function p(e,a,t,o){return function(n,s,c){var p=r(n,s,c),u={};return i(!0,u,a,p),u.pool=p.pool||a.pool,o&&(u.method=o.toUpperCase()),"function"==typeof t&&(e=t),e(u,u.callback)}}s.get=c("get"),s.head=c("head"),s.options=c("options"),s.post=c("post"),s.put=c("put"),s.patch=c("patch"),s.del=c("delete"),s.delete=c("delete"),s.jar=function(e){return o.jar(e)},s.cookie=function(e){return o.parse(e)},s.defaults=function(e,a){var t=this;"function"==typeof(e=e||{})&&(a=e,e={});var i=p(t,e,a);return["get","head","post","put","patch","del","delete"].forEach(function(o){i[o]=p(t[o],e,a,o)}),i.cookie=p(t.cookie,e,a),i.jar=t.jar,i.defaults=t.defaults,i},s.forever=function(e,a){var t={};return a&&i(t,a),e&&(t.agentOptions=e),t.forever=!0,s.defaults(t)},e.exports=s,s.Request=t(121),s.initParams=r,Object.defineProperty(s,"debug",{enumerable:!0,get:function(){return s.Request.debug},set:function(e){s.Request.debug=e}})},function(e,a,t){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i,o=t(39),n=t(9).parse,r=t(1),s=t(54),c=t(56).Store,p=t(118).MemoryCookieStore,u=t(58).pathMatch,l=t(119).version;try{i=t(55)}catch(e){console.warn("tough-cookie: can't load punycode; won't use punycode for domain normalization")}var m=/^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/,d=/[\x00-\x1F]/,h=["\n","\r","\0"],f=/[\x20-\x3A\x3C-\x7E]+/,v=/[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/,g={jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11},b=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],y=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],x=2147483647e3;function k(e,a,t,i){for(var o=0;o<e.length;){var n=e.charCodeAt(o);if(n<=47||n>=58)break;o++}return o<a||o>t?null:i||o==e.length?parseInt(e.substr(0,o),10):null}function w(e){var a=e.split(":"),t=[0,0,0];if(3!==a.length)return null;for(var i=0;i<3;i++){var o=2==i,n=k(a[i],1,2,o);if(null===n)return null;t[i]=n}return t}function j(e){e=String(e).substr(0,3).toLowerCase();var a=g[e];return a>=0?a:null}function E(e){if(e){var a=e.split(v);if(a){for(var t=null,i=null,o=null,n=null,r=null,s=null,c=0;c<a.length;c++){var p,u=a[c].trim();if(u.length)null===o&&(p=w(u))?(t=p[0],i=p[1],o=p[2]):null!==n||null===(p=k(u,1,2,!0))?null!==r||null===(p=j(u))?null===s&&null!==(p=k(u,2,4,!0))&&((s=p)>=70&&s<=99?s+=1900:s>=0&&s<=69&&(s+=2e3)):r=p:n=p}if(!(null===n||null===r||null===s||null===o||n<1||n>31||s<1601||t>23||i>59||o>59))return new Date(Date.UTC(s,r,n,t,i,o))}}}function S(e){var a=e.getUTCDate();a=a>=10?a:"0"+a;var t=e.getUTCHours();t=t>=10?t:"0"+t;var i=e.getUTCMinutes();i=i>=10?i:"0"+i;var o=e.getUTCSeconds();return o=o>=10?o:"0"+o,y[e.getUTCDay()]+", "+a+" "+b[e.getUTCMonth()]+" "+e.getUTCFullYear()+" "+t+":"+i+":"+o+" GMT"}function _(e){return null==e?null:(e=e.trim().replace(/^\./,""),i&&/[^\u0001-\u007f]/.test(e)&&(e=i.toASCII(e)),e.toLowerCase())}function R(e,a,t){if(null==e||null==a)return null;if(!1!==t&&(e=_(e),a=_(a)),e==a)return!0;if(o.isIP(e))return!1;var i=e.indexOf(a);return!(i<=0)&&(e.length===a.length+i&&"."===e.substr(i-1,1))}function A(e){if(!e||"/"!==e.substr(0,1))return"/";if("/"===e)return e;var a=e.lastIndexOf("/");return 0===a?"/":e.slice(0,a)}function C(e,a){var t,i,o=(e=function(e){for(var a=0;a<h.length;a++){var t=e.indexOf(h[a]);-1!==t&&(e=e.substr(0,t))}return e}(e)).indexOf("=");if(a)0===o&&(o=(e=e.substr(1)).indexOf("="));else if(o<=0)return;if(o<=0?(t="",i=e.trim()):(t=e.substr(0,o).trim(),i=e.substr(o+1).trim()),!d.test(t)&&!d.test(i)){var n=new T;return n.key=t,n.value=i,n}}function q(e,a){a&&"object"==typeof a||(a={});var t=(e=e.trim()).indexOf(";"),i=C(-1===t?e:e.substr(0,t),!!a.loose);if(i){if(-1===t)return i;var o=e.slice(t+1).trim();if(0===o.length)return i;for(var n=o.split(";");n.length;){var r=n.shift().trim();if(0!==r.length){var s,c,p=r.indexOf("=");switch(-1===p?(s=r,c=null):(s=r.substr(0,p),c=r.substr(p+1)),s=s.trim().toLowerCase(),c&&(c=c.trim()),s){case"expires":if(c){var u=E(c);u&&(i.expires=u)}break;case"max-age":if(c&&/^-?[0-9]+$/.test(c)){var l=parseInt(c,10);i.setMaxAge(l)}break;case"domain":if(c){var m=c.trim().replace(/^\./,"");m&&(i.domain=m.toLowerCase())}break;case"path":i.path=c&&"/"===c[0]?c:null;break;case"secure":i.secure=!0;break;case"httponly":i.httpOnly=!0;break;default:i.extensions=i.extensions||[],i.extensions.push(r)}}}return i}}function O(e){var a;try{a=JSON.parse(e)}catch(e){return e}return a}function z(e){if(!e)return null;var a;if("string"==typeof e){if((a=O(e))instanceof Error)return null}else a=e;for(var t=new T,i=0;i<T.serializableProperties.length;i++){var o=T.serializableProperties[i];void 0!==a[o]&&a[o]!==T.prototype[o]&&("expires"===o||"creation"===o||"lastAccessed"===o?null===a[o]?t[o]=null:t[o]="Infinity"==a[o]?"Infinity":new Date(a[o]):t[o]=a[o])}return t}function P(e,a){var t=0,i=e.path?e.path.length:0;return 0!==(t=(a.path?a.path.length:0)-i)?t:0!==(t=(e.creation?e.creation.getTime():x)-(a.creation?a.creation.getTime():x))?t:t=e.creationIndex-a.creationIndex}function F(e){if(e instanceof Object)return e;try{e=decodeURI(e)}catch(e){}return n(e)}function T(e){e=e||{},Object.keys(e).forEach(function(a){T.prototype.hasOwnProperty(a)&&T.prototype[a]!==e[a]&&"_"!==a.substr(0,1)&&(this[a]=e[a])},this),this.creation=this.creation||new Date,Object.defineProperty(this,"creationIndex",{configurable:!1,enumerable:!1,writable:!0,value:++T.cookiesCreated})}function I(e,a){"boolean"==typeof a?a={rejectPublicSuffixes:a}:null==a&&(a={}),null!=a.rejectPublicSuffixes&&(this.rejectPublicSuffixes=a.rejectPublicSuffixes),null!=a.looseMode&&(this.enableLooseMode=a.looseMode),e||(e=new p),this.store=e}T.cookiesCreated=0,T.parse=q,T.fromJSON=z,T.prototype.key="",T.prototype.value="",T.prototype.expires="Infinity",T.prototype.maxAge=null,T.prototype.domain=null,T.prototype.path=null,T.prototype.secure=!1,T.prototype.httpOnly=!1,T.prototype.extensions=null,T.prototype.hostOnly=null,T.prototype.pathIsDefault=null,T.prototype.creation=null,T.prototype.lastAccessed=null,Object.defineProperty(T.prototype,"creationIndex",{configurable:!0,enumerable:!1,writable:!0,value:0}),T.serializableProperties=Object.keys(T.prototype).filter(function(e){return!(T.prototype[e]instanceof Function||"creationIndex"===e||"_"===e.substr(0,1))}),T.prototype.inspect=function(){var e=Date.now();return'Cookie="'+this.toString()+"; hostOnly="+(null!=this.hostOnly?this.hostOnly:"?")+"; aAge="+(this.lastAccessed?e-this.lastAccessed.getTime()+"ms":"?")+"; cAge="+(this.creation?e-this.creation.getTime()+"ms":"?")+'"'},r.inspect.custom&&(T.prototype[r.inspect.custom]=T.prototype.inspect),T.prototype.toJSON=function(){for(var e={},a=T.serializableProperties,t=0;t<a.length;t++){var i=a[t];this[i]!==T.prototype[i]&&("expires"===i||"creation"===i||"lastAccessed"===i?null===this[i]?e[i]=null:e[i]="Infinity"==this[i]?"Infinity":this[i].toISOString():"maxAge"===i?null!==this[i]&&(e[i]=this[i]==1/0||this[i]==-1/0?this[i].toString():this[i]):this[i]!==T.prototype[i]&&(e[i]=this[i]))}return e},T.prototype.clone=function(){return z(this.toJSON())},T.prototype.validate=function(){if(!m.test(this.value))return!1;if(!(this.expires==1/0||this.expires instanceof Date||E(this.expires)))return!1;if(null!=this.maxAge&&this.maxAge<=0)return!1;if(null!=this.path&&!f.test(this.path))return!1;var e=this.cdomain();if(e){if(e.match(/\.$/))return!1;if(null==s.getPublicSuffix(e))return!1}return!0},T.prototype.setExpires=function(e){e instanceof Date?this.expires=e:this.expires=E(e)||"Infinity"},T.prototype.setMaxAge=function(e){this.maxAge=e===1/0||e===-1/0?e.toString():e},T.prototype.cookieString=function(){var e=this.value;return null==e&&(e=""),""===this.key?e:this.key+"="+e},T.prototype.toString=function(){var e=this.cookieString();return this.expires!=1/0&&(this.expires instanceof Date?e+="; Expires="+S(this.expires):e+="; Expires="+this.expires),null!=this.maxAge&&this.maxAge!=1/0&&(e+="; Max-Age="+this.maxAge),this.domain&&!this.hostOnly&&(e+="; Domain="+this.domain),this.path&&(e+="; Path="+this.path),this.secure&&(e+="; Secure"),this.httpOnly&&(e+="; HttpOnly"),this.extensions&&this.extensions.forEach(function(a){e+="; "+a}),e},T.prototype.TTL=function(e){if(null!=this.maxAge)return this.maxAge<=0?0:1e3*this.maxAge;var a=this.expires;return a!=1/0?(a instanceof Date||(a=E(a)||1/0),a==1/0?1/0:a.getTime()-(e||Date.now())):1/0},T.prototype.expiryTime=function(e){if(null!=this.maxAge){var a=e||this.creation||new Date,t=this.maxAge<=0?-1/0:1e3*this.maxAge;return a.getTime()+t}return this.expires==1/0?1/0:this.expires.getTime()},T.prototype.expiryDate=function(e){var a=this.expiryTime(e);return a==1/0?new Date(x):a==-1/0?new Date(0):new Date(a)},T.prototype.isPersistent=function(){return null!=this.maxAge||this.expires!=1/0},T.prototype.cdomain=T.prototype.canonicalizedDomain=function(){return null==this.domain?null:_(this.domain)},I.prototype.store=null,I.prototype.rejectPublicSuffixes=!0,I.prototype.enableLooseMode=!1;var D=[];D.push("setCookie"),I.prototype.setCookie=function(e,a,t,i){var o,n=F(a);t instanceof Function&&(i=t,t={});var r=_(n.hostname),c=this.enableLooseMode;if(null!=t.loose&&(c=t.loose),e instanceof T||(e=T.parse(e,{loose:c})),!e)return o=new Error("Cookie failed to parse"),i(t.ignoreError?null:o);var p=t.now||new Date;if(this.rejectPublicSuffixes&&e.domain&&null==s.getPublicSuffix(e.cdomain()))return o=new Error("Cookie has domain set to a public suffix"),i(t.ignoreError?null:o);if(e.domain){if(!R(r,e.cdomain(),!1))return o=new Error("Cookie not in this host's domain. Cookie:"+e.cdomain()+" Request:"+r),i(t.ignoreError?null:o);null==e.hostOnly&&(e.hostOnly=!1)}else e.hostOnly=!0,e.domain=r;if(e.path&&"/"===e.path[0]||(e.path=A(n.pathname),e.pathIsDefault=!0),!1===t.http&&e.httpOnly)return o=new Error("Cookie is HttpOnly and this isn't an HTTP API"),i(t.ignoreError?null:o);var u=this.store;u.updateCookie||(u.updateCookie=function(e,a,t){this.putCookie(a,t)}),u.findCookie(e.domain,e.path,e.key,function(a,o){if(a)return i(a);var n=function(a){if(a)return i(a);i(null,e)};if(o){if(!1===t.http&&o.httpOnly)return a=new Error("old Cookie is HttpOnly and this isn't an HTTP API"),i(t.ignoreError?null:a);e.creation=o.creation,e.creationIndex=o.creationIndex,e.lastAccessed=p,u.updateCookie(o,e,n)}else e.creation=e.lastAccessed=p,u.putCookie(e,n)})},D.push("getCookies"),I.prototype.getCookies=function(e,a,t){var i=F(e);a instanceof Function&&(t=a,a={});var o=_(i.hostname),n=i.pathname||"/",r=a.secure;null!=r||!i.protocol||"https:"!=i.protocol&&"wss:"!=i.protocol||(r=!0);var s=a.http;null==s&&(s=!0);var c=a.now||Date.now(),p=!1!==a.expire,l=!!a.allPaths,m=this.store;function d(e){if(e.hostOnly){if(e.domain!=o)return!1}else if(!R(o,e.domain,!1))return!1;return!(!l&&!u(n,e.path))&&(!(e.secure&&!r)&&(!(e.httpOnly&&!s)&&(!(p&&e.expiryTime()<=c)||(m.removeCookie(e.domain,e.path,e.key,function(){}),!1))))}m.findCookies(o,l?null:n,function(e,i){if(e)return t(e);i=i.filter(d),!1!==a.sort&&(i=i.sort(P));var o=new Date;i.forEach(function(e){e.lastAccessed=o}),t(null,i)})},D.push("getCookieString"),I.prototype.getCookieString=function(){var e=Array.prototype.slice.call(arguments,0),a=e.pop();e.push(function(e,t){e?a(e):a(null,t.sort(P).map(function(e){return e.cookieString()}).join("; "))}),this.getCookies.apply(this,e)},D.push("getSetCookieStrings"),I.prototype.getSetCookieStrings=function(){var e=Array.prototype.slice.call(arguments,0),a=e.pop();e.push(function(e,t){e?a(e):a(null,t.map(function(e){return e.toString()}))}),this.getCookies.apply(this,e)},D.push("serialize"),I.prototype.serialize=function(e){var a=this.store.constructor.name;"Object"===a&&(a=null);var t={version:"tough-cookie@"+l,storeType:a,rejectPublicSuffixes:!!this.rejectPublicSuffixes,cookies:[]};if(!this.store.getAllCookies||"function"!=typeof this.store.getAllCookies)return e(new Error("store does not support getAllCookies and cannot be serialized"));this.store.getAllCookies(function(a,i){return a?e(a):(t.cookies=i.map(function(e){return delete(e=e instanceof T?e.toJSON():e).creationIndex,e}),e(null,t))})},I.prototype.toJSON=function(){return this.serializeSync()},D.push("_importCookies"),I.prototype._importCookies=function(e,a){var t=this,i=e.cookies;if(!i||!Array.isArray(i))return a(new Error("serialized jar has no cookies array"));i=i.slice(),function e(o){if(o)return a(o);if(!i.length)return a(o,t);var n;try{n=z(i.shift())}catch(e){return a(e)}if(null===n)return e(null);t.store.putCookie(n,e)}()},I.deserialize=function(e,a,t){var i;if(3!==arguments.length&&(t=a,a=null),"string"==typeof e){if((i=O(e))instanceof Error)return t(i)}else i=e;var o=new I(a,i.rejectPublicSuffixes);o._importCookies(i,function(e){if(e)return t(e);t(null,o)})},I.deserializeSync=function(e,a){var t="string"==typeof e?JSON.parse(e):e,i=new I(a,t.rejectPublicSuffixes);if(!i.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");return i._importCookiesSync(t),i},I.fromJSON=I.deserializeSync,D.push("clone"),I.prototype.clone=function(e,a){1===arguments.length&&(a=e,e=null),this.serialize(function(t,i){if(t)return a(t);I.deserialize(e,i,a)})},D.forEach(function(e){I.prototype[e+"Sync"]=function(e){return function(){if(!this.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");var a,t,i=Array.prototype.slice.call(arguments);if(i.push(function(e,i){a=e,t=i}),this[e].apply(this,i),a)throw a;return t}}(e)}),a.CookieJar=I,a.Cookie=T,a.Store=c,a.MemoryCookieStore=p,a.parseDate=E,a.formatDate=S,a.parse=q,a.fromJSON=z,a.domainMatch=R,a.defaultPath=A,a.pathMatch=u,a.getPublicSuffix=s.getPublicSuffix,a.cookieCompare=P,a.permuteDomain=t(57).permuteDomain,a.permutePath=function(e){if("/"===e)return["/"];e.lastIndexOf("/")===e.length-1&&(e=e.substr(0,e.length-1));for(var a=[e];e.length>1;){var t=e.lastIndexOf("/");if(0===t)break;e=e.substr(0,t),a.push(e)}return a.push("/"),a},a.canonicalDomain=_},function(e,a,t){"use strict";var i=t(55),o={};o.rules=t(117).map(function(e){return{rule:e,suffix:e.replace(/^(\*\.|\!)/,""),punySuffix:-1,wildcard:"*"===e.charAt(0),exception:"!"===e.charAt(0)}}),o.endsWith=function(e,a){return-1!==e.indexOf(a,e.length-a.length)},o.findRule=function(e){var a=i.toASCII(e);return o.rules.reduce(function(e,t){return-1===t.punySuffix&&(t.punySuffix=i.toASCII(t.suffix)),o.endsWith(a,"."+t.punySuffix)||a===t.punySuffix?t:e},null)},a.errorCodes={DOMAIN_TOO_SHORT:"Domain name too short.",DOMAIN_TOO_LONG:"Domain name too long. It should be no more than 255 chars.",LABEL_STARTS_WITH_DASH:"Domain name label can not start with a dash.",LABEL_ENDS_WITH_DASH:"Domain name label can not end with a dash.",LABEL_TOO_LONG:"Domain name label should be at most 63 chars long.",LABEL_TOO_SHORT:"Domain name label should be at least 1 character long.",LABEL_INVALID_CHARS:"Domain name label can only contain alphanumeric characters or dashes."},o.validate=function(e){var a=i.toASCII(e);if(a.length<1)return"DOMAIN_TOO_SHORT";if(a.length>255)return"DOMAIN_TOO_LONG";for(var t,o=a.split("."),n=0;n<o.length;++n){if(!(t=o[n]).length)return"LABEL_TOO_SHORT";if(t.length>63)return"LABEL_TOO_LONG";if("-"===t.charAt(0))return"LABEL_STARTS_WITH_DASH";if("-"===t.charAt(t.length-1))return"LABEL_ENDS_WITH_DASH";if(!/^[a-z0-9\-]+$/.test(t))return"LABEL_INVALID_CHARS"}},a.parse=function(e){if("string"!=typeof e)throw new TypeError("Domain name must be a string.");var t=e.slice(0).toLowerCase();"."===t.charAt(t.length-1)&&(t=t.slice(0,t.length-1));var n=o.validate(t);if(n)return{input:e,error:{message:a.errorCodes[n],code:n}};var r={input:e,tld:null,sld:null,domain:null,subdomain:null,listed:!1},s=t.split(".");if("local"===s[s.length-1])return r;var c=function(){return/xn--/.test(t)?(r.domain&&(r.domain=i.toASCII(r.domain)),r.subdomain&&(r.subdomain=i.toASCII(r.subdomain)),r):r},p=o.findRule(t);if(!p)return s.length<2?r:(r.tld=s.pop(),r.sld=s.pop(),r.domain=[r.sld,r.tld].join("."),s.length&&(r.subdomain=s.pop()),c());r.listed=!0;var u=p.suffix.split("."),l=s.slice(0,s.length-u.length);return p.exception&&l.push(u.shift()),r.tld=u.join("."),l.length?(p.wildcard&&(u.unshift(l.pop()),r.tld=u.join(".")),l.length?(r.sld=l.pop(),r.domain=[r.sld,r.tld].join("."),l.length&&(r.subdomain=l.join(".")),c()):c()):c()},a.get=function(e){return e&&a.parse(e).domain||null},a.isValid=function(e){var t=a.parse(e);return Boolean(t.domain&&t.listed)}},function(e){e.exports=["ac","com.ac","edu.ac","gov.ac","net.ac","mil.ac","org.ac","ad","nom.ad","ae","co.ae","net.ae","org.ae","sch.ae","ac.ae","gov.ae","mil.ae","aero","accident-investigation.aero","accident-prevention.aero","aerobatic.aero","aeroclub.aero","aerodrome.aero","agents.aero","aircraft.aero","airline.aero","airport.aero","air-surveillance.aero","airtraffic.aero","air-traffic-control.aero","ambulance.aero","amusement.aero","association.aero","author.aero","ballooning.aero","broker.aero","caa.aero","cargo.aero","catering.aero","certification.aero","championship.aero","charter.aero","civilaviation.aero","club.aero","conference.aero","consultant.aero","consulting.aero","control.aero","council.aero","crew.aero","design.aero","dgca.aero","educator.aero","emergency.aero","engine.aero","engineer.aero","entertainment.aero","equipment.aero","exchange.aero","express.aero","federation.aero","flight.aero","freight.aero","fuel.aero","gliding.aero","government.aero","groundhandling.aero","group.aero","hanggliding.aero","homebuilt.aero","insurance.aero","journal.aero","journalist.aero","leasing.aero","logistics.aero","magazine.aero","maintenance.aero","media.aero","microlight.aero","modelling.aero","navigation.aero","parachuting.aero","paragliding.aero","passenger-association.aero","pilot.aero","press.aero","production.aero","recreation.aero","repbody.aero","res.aero","research.aero","rotorcraft.aero","safety.aero","scientist.aero","services.aero","show.aero","skydiving.aero","software.aero","student.aero","trader.aero","trading.aero","trainer.aero","union.aero","workinggroup.aero","works.aero","af","gov.af","com.af","org.af","net.af","edu.af","ag","com.ag","org.ag","net.ag","co.ag","nom.ag","ai","off.ai","com.ai","net.ai","org.ai","al","com.al","edu.al","gov.al","mil.al","net.al","org.al","am","ao","ed.ao","gv.ao","og.ao","co.ao","pb.ao","it.ao","aq","ar","com.ar","edu.ar","gob.ar","gov.ar","int.ar","mil.ar","musica.ar","net.ar","org.ar","tur.ar","arpa","e164.arpa","in-addr.arpa","ip6.arpa","iris.arpa","uri.arpa","urn.arpa","as","gov.as","asia","at","ac.at","co.at","gv.at","or.at","au","com.au","net.au","org.au","edu.au","gov.au","asn.au","id.au","info.au","conf.au","oz.au","act.au","nsw.au","nt.au","qld.au","sa.au","tas.au","vic.au","wa.au","act.edu.au","nsw.edu.au","nt.edu.au","qld.edu.au","sa.edu.au","tas.edu.au","vic.edu.au","wa.edu.au","qld.gov.au","sa.gov.au","tas.gov.au","vic.gov.au","wa.gov.au","aw","com.aw","ax","az","com.az","net.az","int.az","gov.az","org.az","edu.az","info.az","pp.az","mil.az","name.az","pro.az","biz.az","ba","com.ba","edu.ba","gov.ba","mil.ba","net.ba","org.ba","bb","biz.bb","co.bb","com.bb","edu.bb","gov.bb","info.bb","net.bb","org.bb","store.bb","tv.bb","*.bd","be","ac.be","bf","gov.bf","bg","a.bg","b.bg","c.bg","d.bg","e.bg","f.bg","g.bg","h.bg","i.bg","j.bg","k.bg","l.bg","m.bg","n.bg","o.bg","p.bg","q.bg","r.bg","s.bg","t.bg","u.bg","v.bg","w.bg","x.bg","y.bg","z.bg","0.bg","1.bg","2.bg","3.bg","4.bg","5.bg","6.bg","7.bg","8.bg","9.bg","bh","com.bh","edu.bh","net.bh","org.bh","gov.bh","bi","co.bi","com.bi","edu.bi","or.bi","org.bi","biz","bj","asso.bj","barreau.bj","gouv.bj","bm","com.bm","edu.bm","gov.bm","net.bm","org.bm","bn","com.bn","edu.bn","gov.bn","net.bn","org.bn","bo","com.bo","edu.bo","gob.bo","int.bo","org.bo","net.bo","mil.bo","tv.bo","web.bo","academia.bo","agro.bo","arte.bo","blog.bo","bolivia.bo","ciencia.bo","cooperativa.bo","democracia.bo","deporte.bo","ecologia.bo","economia.bo","empresa.bo","indigena.bo","industria.bo","info.bo","medicina.bo","movimiento.bo","musica.bo","natural.bo","nombre.bo","noticias.bo","patria.bo","politica.bo","profesional.bo","plurinacional.bo","pueblo.bo","revista.bo","salud.bo","tecnologia.bo","tksat.bo","transporte.bo","wiki.bo","br","9guacu.br","abc.br","adm.br","adv.br","agr.br","aju.br","am.br","anani.br","aparecida.br","arq.br","art.br","ato.br","b.br","barueri.br","belem.br","bhz.br","bio.br","blog.br","bmd.br","boavista.br","bsb.br","campinagrande.br","campinas.br","caxias.br","cim.br","cng.br","cnt.br","com.br","contagem.br","coop.br","cri.br","cuiaba.br","curitiba.br","def.br","ecn.br","eco.br","edu.br","emp.br","eng.br","esp.br","etc.br","eti.br","far.br","feira.br","flog.br","floripa.br","fm.br","fnd.br","fortal.br","fot.br","foz.br","fst.br","g12.br","ggf.br","goiania.br","gov.br","ac.gov.br","al.gov.br","am.gov.br","ap.gov.br","ba.gov.br","ce.gov.br","df.gov.br","es.gov.br","go.gov.br","ma.gov.br","mg.gov.br","ms.gov.br","mt.gov.br","pa.gov.br","pb.gov.br","pe.gov.br","pi.gov.br","pr.gov.br","rj.gov.br","rn.gov.br","ro.gov.br","rr.gov.br","rs.gov.br","sc.gov.br","se.gov.br","sp.gov.br","to.gov.br","gru.br","imb.br","ind.br","inf.br","jab.br","jampa.br","jdf.br","joinville.br","jor.br","jus.br","leg.br","lel.br","londrina.br","macapa.br","maceio.br","manaus.br","maringa.br","mat.br","med.br","mil.br","morena.br","mp.br","mus.br","natal.br","net.br","niteroi.br","*.nom.br","not.br","ntr.br","odo.br","ong.br","org.br","osasco.br","palmas.br","poa.br","ppg.br","pro.br","psc.br","psi.br","pvh.br","qsl.br","radio.br","rec.br","recife.br","ribeirao.br","rio.br","riobranco.br","riopreto.br","salvador.br","sampa.br","santamaria.br","santoandre.br","saobernardo.br","saogonca.br","sjc.br","slg.br","slz.br","sorocaba.br","srv.br","taxi.br","teo.br","the.br","tmp.br","trd.br","tur.br","tv.br","udi.br","vet.br","vix.br","vlog.br","wiki.br","zlg.br","bs","com.bs","net.bs","org.bs","edu.bs","gov.bs","bt","com.bt","edu.bt","gov.bt","net.bt","org.bt","bv","bw","co.bw","org.bw","by","gov.by","mil.by","com.by","of.by","bz","com.bz","net.bz","org.bz","edu.bz","gov.bz","ca","ab.ca","bc.ca","mb.ca","nb.ca","nf.ca","nl.ca","ns.ca","nt.ca","nu.ca","on.ca","pe.ca","qc.ca","sk.ca","yk.ca","gc.ca","cat","cc","cd","gov.cd","cf","cg","ch","ci","org.ci","or.ci","com.ci","co.ci","edu.ci","ed.ci","ac.ci","net.ci","go.ci","asso.ci","aéroport.ci","int.ci","presse.ci","md.ci","gouv.ci","*.ck","!www.ck","cl","gov.cl","gob.cl","co.cl","mil.cl","cm","co.cm","com.cm","gov.cm","net.cm","cn","ac.cn","com.cn","edu.cn","gov.cn","net.cn","org.cn","mil.cn","公司.cn","网络.cn","網絡.cn","ah.cn","bj.cn","cq.cn","fj.cn","gd.cn","gs.cn","gz.cn","gx.cn","ha.cn","hb.cn","he.cn","hi.cn","hl.cn","hn.cn","jl.cn","js.cn","jx.cn","ln.cn","nm.cn","nx.cn","qh.cn","sc.cn","sd.cn","sh.cn","sn.cn","sx.cn","tj.cn","xj.cn","xz.cn","yn.cn","zj.cn","hk.cn","mo.cn","tw.cn","co","arts.co","com.co","edu.co","firm.co","gov.co","info.co","int.co","mil.co","net.co","nom.co","org.co","rec.co","web.co","com","coop","cr","ac.cr","co.cr","ed.cr","fi.cr","go.cr","or.cr","sa.cr","cu","com.cu","edu.cu","org.cu","net.cu","gov.cu","inf.cu","cv","cw","com.cw","edu.cw","net.cw","org.cw","cx","gov.cx","cy","ac.cy","biz.cy","com.cy","ekloges.cy","gov.cy","ltd.cy","name.cy","net.cy","org.cy","parliament.cy","press.cy","pro.cy","tm.cy","cz","de","dj","dk","dm","com.dm","net.dm","org.dm","edu.dm","gov.dm","do","art.do","com.do","edu.do","gob.do","gov.do","mil.do","net.do","org.do","sld.do","web.do","dz","com.dz","org.dz","net.dz","gov.dz","edu.dz","asso.dz","pol.dz","art.dz","ec","com.ec","info.ec","net.ec","fin.ec","k12.ec","med.ec","pro.ec","org.ec","edu.ec","gov.ec","gob.ec","mil.ec","edu","ee","edu.ee","gov.ee","riik.ee","lib.ee","med.ee","com.ee","pri.ee","aip.ee","org.ee","fie.ee","eg","com.eg","edu.eg","eun.eg","gov.eg","mil.eg","name.eg","net.eg","org.eg","sci.eg","*.er","es","com.es","nom.es","org.es","gob.es","edu.es","et","com.et","gov.et","org.et","edu.et","biz.et","name.et","info.et","net.et","eu","fi","aland.fi","*.fj","*.fk","fm","fo","fr","com.fr","asso.fr","nom.fr","prd.fr","presse.fr","tm.fr","aeroport.fr","assedic.fr","avocat.fr","avoues.fr","cci.fr","chambagri.fr","chirurgiens-dentistes.fr","experts-comptables.fr","geometre-expert.fr","gouv.fr","greta.fr","huissier-justice.fr","medecin.fr","notaires.fr","pharmacien.fr","port.fr","veterinaire.fr","ga","gb","gd","ge","com.ge","edu.ge","gov.ge","org.ge","mil.ge","net.ge","pvt.ge","gf","gg","co.gg","net.gg","org.gg","gh","com.gh","edu.gh","gov.gh","org.gh","mil.gh","gi","com.gi","ltd.gi","gov.gi","mod.gi","edu.gi","org.gi","gl","co.gl","com.gl","edu.gl","net.gl","org.gl","gm","gn","ac.gn","com.gn","edu.gn","gov.gn","org.gn","net.gn","gov","gp","com.gp","net.gp","mobi.gp","edu.gp","org.gp","asso.gp","gq","gr","com.gr","edu.gr","net.gr","org.gr","gov.gr","gs","gt","com.gt","edu.gt","gob.gt","ind.gt","mil.gt","net.gt","org.gt","gu","com.gu","edu.gu","gov.gu","guam.gu","info.gu","net.gu","org.gu","web.gu","gw","gy","co.gy","com.gy","edu.gy","gov.gy","net.gy","org.gy","hk","com.hk","edu.hk","gov.hk","idv.hk","net.hk","org.hk","公司.hk","教育.hk","敎育.hk","政府.hk","個人.hk","个人.hk","箇人.hk","網络.hk","网络.hk","组織.hk","網絡.hk","网絡.hk","组织.hk","組織.hk","組织.hk","hm","hn","com.hn","edu.hn","org.hn","net.hn","mil.hn","gob.hn","hr","iz.hr","from.hr","name.hr","com.hr","ht","com.ht","shop.ht","firm.ht","info.ht","adult.ht","net.ht","pro.ht","org.ht","med.ht","art.ht","coop.ht","pol.ht","asso.ht","edu.ht","rel.ht","gouv.ht","perso.ht","hu","co.hu","info.hu","org.hu","priv.hu","sport.hu","tm.hu","2000.hu","agrar.hu","bolt.hu","casino.hu","city.hu","erotica.hu","erotika.hu","film.hu","forum.hu","games.hu","hotel.hu","ingatlan.hu","jogasz.hu","konyvelo.hu","lakas.hu","media.hu","news.hu","reklam.hu","sex.hu","shop.hu","suli.hu","szex.hu","tozsde.hu","utazas.hu","video.hu","id","ac.id","biz.id","co.id","desa.id","go.id","mil.id","my.id","net.id","or.id","ponpes.id","sch.id","web.id","ie","gov.ie","il","ac.il","co.il","gov.il","idf.il","k12.il","muni.il","net.il","org.il","im","ac.im","co.im","com.im","ltd.co.im","net.im","org.im","plc.co.im","tt.im","tv.im","in","co.in","firm.in","net.in","org.in","gen.in","ind.in","nic.in","ac.in","edu.in","res.in","gov.in","mil.in","info","int","eu.int","io","com.io","iq","gov.iq","edu.iq","mil.iq","com.iq","org.iq","net.iq","ir","ac.ir","co.ir","gov.ir","id.ir","net.ir","org.ir","sch.ir","ایران.ir","ايران.ir","is","net.is","com.is","edu.is","gov.is","org.is","int.is","it","gov.it","edu.it","abr.it","abruzzo.it","aosta-valley.it","aostavalley.it","bas.it","basilicata.it","cal.it","calabria.it","cam.it","campania.it","emilia-romagna.it","emiliaromagna.it","emr.it","friuli-v-giulia.it","friuli-ve-giulia.it","friuli-vegiulia.it","friuli-venezia-giulia.it","friuli-veneziagiulia.it","friuli-vgiulia.it","friuliv-giulia.it","friulive-giulia.it","friulivegiulia.it","friulivenezia-giulia.it","friuliveneziagiulia.it","friulivgiulia.it","fvg.it","laz.it","lazio.it","lig.it","liguria.it","lom.it","lombardia.it","lombardy.it","lucania.it","mar.it","marche.it","mol.it","molise.it","piedmont.it","piemonte.it","pmn.it","pug.it","puglia.it","sar.it","sardegna.it","sardinia.it","sic.it","sicilia.it","sicily.it","taa.it","tos.it","toscana.it","trentin-sud-tirol.it","trentin-süd-tirol.it","trentin-sudtirol.it","trentin-südtirol.it","trentin-sued-tirol.it","trentin-suedtirol.it","trentino-a-adige.it","trentino-aadige.it","trentino-alto-adige.it","trentino-altoadige.it","trentino-s-tirol.it","trentino-stirol.it","trentino-sud-tirol.it","trentino-süd-tirol.it","trentino-sudtirol.it","trentino-südtirol.it","trentino-sued-tirol.it","trentino-suedtirol.it","trentino.it","trentinoa-adige.it","trentinoaadige.it","trentinoalto-adige.it","trentinoaltoadige.it","trentinos-tirol.it","trentinostirol.it","trentinosud-tirol.it","trentinosüd-tirol.it","trentinosudtirol.it","trentinosüdtirol.it","trentinosued-tirol.it","trentinosuedtirol.it","trentinsud-tirol.it","trentinsüd-tirol.it","trentinsudtirol.it","trentinsüdtirol.it","trentinsued-tirol.it","trentinsuedtirol.it","tuscany.it","umb.it","umbria.it","val-d-aosta.it","val-daosta.it","vald-aosta.it","valdaosta.it","valle-aosta.it","valle-d-aosta.it","valle-daosta.it","valleaosta.it","valled-aosta.it","valledaosta.it","vallee-aoste.it","vallée-aoste.it","vallee-d-aoste.it","vallée-d-aoste.it","valleeaoste.it","valléeaoste.it","valleedaoste.it","valléedaoste.it","vao.it","vda.it","ven.it","veneto.it","ag.it","agrigento.it","al.it","alessandria.it","alto-adige.it","altoadige.it","an.it","ancona.it","andria-barletta-trani.it","andria-trani-barletta.it","andriabarlettatrani.it","andriatranibarletta.it","ao.it","aosta.it","aoste.it","ap.it","aq.it","aquila.it","ar.it","arezzo.it","ascoli-piceno.it","ascolipiceno.it","asti.it","at.it","av.it","avellino.it","ba.it","balsan-sudtirol.it","balsan-südtirol.it","balsan-suedtirol.it","balsan.it","bari.it","barletta-trani-andria.it","barlettatraniandria.it","belluno.it","benevento.it","bergamo.it","bg.it","bi.it","biella.it","bl.it","bn.it","bo.it","bologna.it","bolzano-altoadige.it","bolzano.it","bozen-sudtirol.it","bozen-südtirol.it","bozen-suedtirol.it","bozen.it","br.it","brescia.it","brindisi.it","bs.it","bt.it","bulsan-sudtirol.it","bulsan-südtirol.it","bulsan-suedtirol.it","bulsan.it","bz.it","ca.it","cagliari.it","caltanissetta.it","campidano-medio.it","campidanomedio.it","campobasso.it","carbonia-iglesias.it","carboniaiglesias.it","carrara-massa.it","carraramassa.it","caserta.it","catania.it","catanzaro.it","cb.it","ce.it","cesena-forli.it","cesena-forlì.it","cesenaforli.it","cesenaforlì.it","ch.it","chieti.it","ci.it","cl.it","cn.it","co.it","como.it","cosenza.it","cr.it","cremona.it","crotone.it","cs.it","ct.it","cuneo.it","cz.it","dell-ogliastra.it","dellogliastra.it","en.it","enna.it","fc.it","fe.it","fermo.it","ferrara.it","fg.it","fi.it","firenze.it","florence.it","fm.it","foggia.it","forli-cesena.it","forlì-cesena.it","forlicesena.it","forlìcesena.it","fr.it","frosinone.it","ge.it","genoa.it","genova.it","go.it","gorizia.it","gr.it","grosseto.it","iglesias-carbonia.it","iglesiascarbonia.it","im.it","imperia.it","is.it","isernia.it","kr.it","la-spezia.it","laquila.it","laspezia.it","latina.it","lc.it","le.it","lecce.it","lecco.it","li.it","livorno.it","lo.it","lodi.it","lt.it","lu.it","lucca.it","macerata.it","mantova.it","massa-carrara.it","massacarrara.it","matera.it","mb.it","mc.it","me.it","medio-campidano.it","mediocampidano.it","messina.it","mi.it","milan.it","milano.it","mn.it","mo.it","modena.it","monza-brianza.it","monza-e-della-brianza.it","monza.it","monzabrianza.it","monzaebrianza.it","monzaedellabrianza.it","ms.it","mt.it","na.it","naples.it","napoli.it","no.it","novara.it","nu.it","nuoro.it","og.it","ogliastra.it","olbia-tempio.it","olbiatempio.it","or.it","oristano.it","ot.it","pa.it","padova.it","padua.it","palermo.it","parma.it","pavia.it","pc.it","pd.it","pe.it","perugia.it","pesaro-urbino.it","pesarourbino.it","pescara.it","pg.it","pi.it","piacenza.it","pisa.it","pistoia.it","pn.it","po.it","pordenone.it","potenza.it","pr.it","prato.it","pt.it","pu.it","pv.it","pz.it","ra.it","ragusa.it","ravenna.it","rc.it","re.it","reggio-calabria.it","reggio-emilia.it","reggiocalabria.it","reggioemilia.it","rg.it","ri.it","rieti.it","rimini.it","rm.it","rn.it","ro.it","roma.it","rome.it","rovigo.it","sa.it","salerno.it","sassari.it","savona.it","si.it","siena.it","siracusa.it","so.it","sondrio.it","sp.it","sr.it","ss.it","suedtirol.it","südtirol.it","sv.it","ta.it","taranto.it","te.it","tempio-olbia.it","tempioolbia.it","teramo.it","terni.it","tn.it","to.it","torino.it","tp.it","tr.it","trani-andria-barletta.it","trani-barletta-andria.it","traniandriabarletta.it","tranibarlettaandria.it","trapani.it","trento.it","treviso.it","trieste.it","ts.it","turin.it","tv.it","ud.it","udine.it","urbino-pesaro.it","urbinopesaro.it","va.it","varese.it","vb.it","vc.it","ve.it","venezia.it","venice.it","verbania.it","vercelli.it","verona.it","vi.it","vibo-valentia.it","vibovalentia.it","vicenza.it","viterbo.it","vr.it","vs.it","vt.it","vv.it","je","co.je","net.je","org.je","*.jm","jo","com.jo","org.jo","net.jo","edu.jo","sch.jo","gov.jo","mil.jo","name.jo","jobs","jp","ac.jp","ad.jp","co.jp","ed.jp","go.jp","gr.jp","lg.jp","ne.jp","or.jp","aichi.jp","akita.jp","aomori.jp","chiba.jp","ehime.jp","fukui.jp","fukuoka.jp","fukushima.jp","gifu.jp","gunma.jp","hiroshima.jp","hokkaido.jp","hyogo.jp","ibaraki.jp","ishikawa.jp","iwate.jp","kagawa.jp","kagoshima.jp","kanagawa.jp","kochi.jp","kumamoto.jp","kyoto.jp","mie.jp","miyagi.jp","miyazaki.jp","nagano.jp","nagasaki.jp","nara.jp","niigata.jp","oita.jp","okayama.jp","okinawa.jp","osaka.jp","saga.jp","saitama.jp","shiga.jp","shimane.jp","shizuoka.jp","tochigi.jp","tokushima.jp","tokyo.jp","tottori.jp","toyama.jp","wakayama.jp","yamagata.jp","yamaguchi.jp","yamanashi.jp","栃木.jp","愛知.jp","愛媛.jp","兵庫.jp","熊本.jp","茨城.jp","北海道.jp","千葉.jp","和歌山.jp","長崎.jp","長野.jp","新潟.jp","青森.jp","静岡.jp","東京.jp","石川.jp","埼玉.jp","三重.jp","京都.jp","佐賀.jp","大分.jp","大阪.jp","奈良.jp","宮城.jp","宮崎.jp","富山.jp","山口.jp","山形.jp","山梨.jp","岩手.jp","岐阜.jp","岡山.jp","島根.jp","広島.jp","徳島.jp","沖縄.jp","滋賀.jp","神奈川.jp","福井.jp","福岡.jp","福島.jp","秋田.jp","群馬.jp","香川.jp","高知.jp","鳥取.jp","鹿児島.jp","*.kawasaki.jp","*.kitakyushu.jp","*.kobe.jp","*.nagoya.jp","*.sapporo.jp","*.sendai.jp","*.yokohama.jp","!city.kawasaki.jp","!city.kitakyushu.jp","!city.kobe.jp","!city.nagoya.jp","!city.sapporo.jp","!city.sendai.jp","!city.yokohama.jp","aisai.aichi.jp","ama.aichi.jp","anjo.aichi.jp","asuke.aichi.jp","chiryu.aichi.jp","chita.aichi.jp","fuso.aichi.jp","gamagori.aichi.jp","handa.aichi.jp","hazu.aichi.jp","hekinan.aichi.jp","higashiura.aichi.jp","ichinomiya.aichi.jp","inazawa.aichi.jp","inuyama.aichi.jp","isshiki.aichi.jp","iwakura.aichi.jp","kanie.aichi.jp","kariya.aichi.jp","kasugai.aichi.jp","kira.aichi.jp","kiyosu.aichi.jp","komaki.aichi.jp","konan.aichi.jp","kota.aichi.jp","mihama.aichi.jp","miyoshi.aichi.jp","nishio.aichi.jp","nisshin.aichi.jp","obu.aichi.jp","oguchi.aichi.jp","oharu.aichi.jp","okazaki.aichi.jp","owariasahi.aichi.jp","seto.aichi.jp","shikatsu.aichi.jp","shinshiro.aichi.jp","shitara.aichi.jp","tahara.aichi.jp","takahama.aichi.jp","tobishima.aichi.jp","toei.aichi.jp","togo.aichi.jp","tokai.aichi.jp","tokoname.aichi.jp","toyoake.aichi.jp","toyohashi.aichi.jp","toyokawa.aichi.jp","toyone.aichi.jp","toyota.aichi.jp","tsushima.aichi.jp","yatomi.aichi.jp","akita.akita.jp","daisen.akita.jp","fujisato.akita.jp","gojome.akita.jp","hachirogata.akita.jp","happou.akita.jp","higashinaruse.akita.jp","honjo.akita.jp","honjyo.akita.jp","ikawa.akita.jp","kamikoani.akita.jp","kamioka.akita.jp","katagami.akita.jp","kazuno.akita.jp","kitaakita.akita.jp","kosaka.akita.jp","kyowa.akita.jp","misato.akita.jp","mitane.akita.jp","moriyoshi.akita.jp","nikaho.akita.jp","noshiro.akita.jp","odate.akita.jp","oga.akita.jp","ogata.akita.jp","semboku.akita.jp","yokote.akita.jp","yurihonjo.akita.jp","aomori.aomori.jp","gonohe.aomori.jp","hachinohe.aomori.jp","hashikami.aomori.jp","hiranai.aomori.jp","hirosaki.aomori.jp","itayanagi.aomori.jp","kuroishi.aomori.jp","misawa.aomori.jp","mutsu.aomori.jp","nakadomari.aomori.jp","noheji.aomori.jp","oirase.aomori.jp","owani.aomori.jp","rokunohe.aomori.jp","sannohe.aomori.jp","shichinohe.aomori.jp","shingo.aomori.jp","takko.aomori.jp","towada.aomori.jp","tsugaru.aomori.jp","tsuruta.aomori.jp","abiko.chiba.jp","asahi.chiba.jp","chonan.chiba.jp","chosei.chiba.jp","choshi.chiba.jp","chuo.chiba.jp","funabashi.chiba.jp","futtsu.chiba.jp","hanamigawa.chiba.jp","ichihara.chiba.jp","ichikawa.chiba.jp","ichinomiya.chiba.jp","inzai.chiba.jp","isumi.chiba.jp","kamagaya.chiba.jp","kamogawa.chiba.jp","kashiwa.chiba.jp","katori.chiba.jp","katsuura.chiba.jp","kimitsu.chiba.jp","kisarazu.chiba.jp","kozaki.chiba.jp","kujukuri.chiba.jp","kyonan.chiba.jp","matsudo.chiba.jp","midori.chiba.jp","mihama.chiba.jp","minamiboso.chiba.jp","mobara.chiba.jp","mutsuzawa.chiba.jp","nagara.chiba.jp","nagareyama.chiba.jp","narashino.chiba.jp","narita.chiba.jp","noda.chiba.jp","oamishirasato.chiba.jp","omigawa.chiba.jp","onjuku.chiba.jp","otaki.chiba.jp","sakae.chiba.jp","sakura.chiba.jp","shimofusa.chiba.jp","shirako.chiba.jp","shiroi.chiba.jp","shisui.chiba.jp","sodegaura.chiba.jp","sosa.chiba.jp","tako.chiba.jp","tateyama.chiba.jp","togane.chiba.jp","tohnosho.chiba.jp","tomisato.chiba.jp","urayasu.chiba.jp","yachimata.chiba.jp","yachiyo.chiba.jp","yokaichiba.chiba.jp","yokoshibahikari.chiba.jp","yotsukaido.chiba.jp","ainan.ehime.jp","honai.ehime.jp","ikata.ehime.jp","imabari.ehime.jp","iyo.ehime.jp","kamijima.ehime.jp","kihoku.ehime.jp","kumakogen.ehime.jp","masaki.ehime.jp","matsuno.ehime.jp","matsuyama.ehime.jp","namikata.ehime.jp","niihama.ehime.jp","ozu.ehime.jp","saijo.ehime.jp","seiyo.ehime.jp","shikokuchuo.ehime.jp","tobe.ehime.jp","toon.ehime.jp","uchiko.ehime.jp","uwajima.ehime.jp","yawatahama.ehime.jp","echizen.fukui.jp","eiheiji.fukui.jp","fukui.fukui.jp","ikeda.fukui.jp","katsuyama.fukui.jp","mihama.fukui.jp","minamiechizen.fukui.jp","obama.fukui.jp","ohi.fukui.jp","ono.fukui.jp","sabae.fukui.jp","sakai.fukui.jp","takahama.fukui.jp","tsuruga.fukui.jp","wakasa.fukui.jp","ashiya.fukuoka.jp","buzen.fukuoka.jp","chikugo.fukuoka.jp","chikuho.fukuoka.jp","chikujo.fukuoka.jp","chikushino.fukuoka.jp","chikuzen.fukuoka.jp","chuo.fukuoka.jp","dazaifu.fukuoka.jp","fukuchi.fukuoka.jp","hakata.fukuoka.jp","higashi.fukuoka.jp","hirokawa.fukuoka.jp","hisayama.fukuoka.jp","iizuka.fukuoka.jp","inatsuki.fukuoka.jp","kaho.fukuoka.jp","kasuga.fukuoka.jp","kasuya.fukuoka.jp","kawara.fukuoka.jp","keisen.fukuoka.jp","koga.fukuoka.jp","kurate.fukuoka.jp","kurogi.fukuoka.jp","kurume.fukuoka.jp","minami.fukuoka.jp","miyako.fukuoka.jp","miyama.fukuoka.jp","miyawaka.fukuoka.jp","mizumaki.fukuoka.jp","munakata.fukuoka.jp","nakagawa.fukuoka.jp","nakama.fukuoka.jp","nishi.fukuoka.jp","nogata.fukuoka.jp","ogori.fukuoka.jp","okagaki.fukuoka.jp","okawa.fukuoka.jp","oki.fukuoka.jp","omuta.fukuoka.jp","onga.fukuoka.jp","onojo.fukuoka.jp","oto.fukuoka.jp","saigawa.fukuoka.jp","sasaguri.fukuoka.jp","shingu.fukuoka.jp","shinyoshitomi.fukuoka.jp","shonai.fukuoka.jp","soeda.fukuoka.jp","sue.fukuoka.jp","tachiarai.fukuoka.jp","tagawa.fukuoka.jp","takata.fukuoka.jp","toho.fukuoka.jp","toyotsu.fukuoka.jp","tsuiki.fukuoka.jp","ukiha.fukuoka.jp","umi.fukuoka.jp","usui.fukuoka.jp","yamada.fukuoka.jp","yame.fukuoka.jp","yanagawa.fukuoka.jp","yukuhashi.fukuoka.jp","aizubange.fukushima.jp","aizumisato.fukushima.jp","aizuwakamatsu.fukushima.jp","asakawa.fukushima.jp","bandai.fukushima.jp","date.fukushima.jp","fukushima.fukushima.jp","furudono.fukushima.jp","futaba.fukushima.jp","hanawa.fukushima.jp","higashi.fukushima.jp","hirata.fukushima.jp","hirono.fukushima.jp","iitate.fukushima.jp","inawashiro.fukushima.jp","ishikawa.fukushima.jp","iwaki.fukushima.jp","izumizaki.fukushima.jp","kagamiishi.fukushima.jp","kaneyama.fukushima.jp","kawamata.fukushima.jp","kitakata.fukushima.jp","kitashiobara.fukushima.jp","koori.fukushima.jp","koriyama.fukushima.jp","kunimi.fukushima.jp","miharu.fukushima.jp","mishima.fukushima.jp","namie.fukushima.jp","nango.fukushima.jp","nishiaizu.fukushima.jp","nishigo.fukushima.jp","okuma.fukushima.jp","omotego.fukushima.jp","ono.fukushima.jp","otama.fukushima.jp","samegawa.fukushima.jp","shimogo.fukushima.jp","shirakawa.fukushima.jp","showa.fukushima.jp","soma.fukushima.jp","sukagawa.fukushima.jp","taishin.fukushima.jp","tamakawa.fukushima.jp","tanagura.fukushima.jp","tenei.fukushima.jp","yabuki.fukushima.jp","yamato.fukushima.jp","yamatsuri.fukushima.jp","yanaizu.fukushima.jp","yugawa.fukushima.jp","anpachi.gifu.jp","ena.gifu.jp","gifu.gifu.jp","ginan.gifu.jp","godo.gifu.jp","gujo.gifu.jp","hashima.gifu.jp","hichiso.gifu.jp","hida.gifu.jp","higashishirakawa.gifu.jp","ibigawa.gifu.jp","ikeda.gifu.jp","kakamigahara.gifu.jp","kani.gifu.jp","kasahara.gifu.jp","kasamatsu.gifu.jp","kawaue.gifu.jp","kitagata.gifu.jp","mino.gifu.jp","minokamo.gifu.jp","mitake.gifu.jp","mizunami.gifu.jp","motosu.gifu.jp","nakatsugawa.gifu.jp","ogaki.gifu.jp","sakahogi.gifu.jp","seki.gifu.jp","sekigahara.gifu.jp","shirakawa.gifu.jp","tajimi.gifu.jp","takayama.gifu.jp","tarui.gifu.jp","toki.gifu.jp","tomika.gifu.jp","wanouchi.gifu.jp","yamagata.gifu.jp","yaotsu.gifu.jp","yoro.gifu.jp","annaka.gunma.jp","chiyoda.gunma.jp","fujioka.gunma.jp","higashiagatsuma.gunma.jp","isesaki.gunma.jp","itakura.gunma.jp","kanna.gunma.jp","kanra.gunma.jp","katashina.gunma.jp","kawaba.gunma.jp","kiryu.gunma.jp","kusatsu.gunma.jp","maebashi.gunma.jp","meiwa.gunma.jp","midori.gunma.jp","minakami.gunma.jp","naganohara.gunma.jp","nakanojo.gunma.jp","nanmoku.gunma.jp","numata.gunma.jp","oizumi.gunma.jp","ora.gunma.jp","ota.gunma.jp","shibukawa.gunma.jp","shimonita.gunma.jp","shinto.gunma.jp","showa.gunma.jp","takasaki.gunma.jp","takayama.gunma.jp","tamamura.gunma.jp","tatebayashi.gunma.jp","tomioka.gunma.jp","tsukiyono.gunma.jp","tsumagoi.gunma.jp","ueno.gunma.jp","yoshioka.gunma.jp","asaminami.hiroshima.jp","daiwa.hiroshima.jp","etajima.hiroshima.jp","fuchu.hiroshima.jp","fukuyama.hiroshima.jp","hatsukaichi.hiroshima.jp","higashihiroshima.hiroshima.jp","hongo.hiroshima.jp","jinsekikogen.hiroshima.jp","kaita.hiroshima.jp","kui.hiroshima.jp","kumano.hiroshima.jp","kure.hiroshima.jp","mihara.hiroshima.jp","miyoshi.hiroshima.jp","naka.hiroshima.jp","onomichi.hiroshima.jp","osakikamijima.hiroshima.jp","otake.hiroshima.jp","saka.hiroshima.jp","sera.hiroshima.jp","seranishi.hiroshima.jp","shinichi.hiroshima.jp","shobara.hiroshima.jp","takehara.hiroshima.jp","abashiri.hokkaido.jp","abira.hokkaido.jp","aibetsu.hokkaido.jp","akabira.hokkaido.jp","akkeshi.hokkaido.jp","asahikawa.hokkaido.jp","ashibetsu.hokkaido.jp","ashoro.hokkaido.jp","assabu.hokkaido.jp","atsuma.hokkaido.jp","bibai.hokkaido.jp","biei.hokkaido.jp","bifuka.hokkaido.jp","bihoro.hokkaido.jp","biratori.hokkaido.jp","chippubetsu.hokkaido.jp","chitose.hokkaido.jp","date.hokkaido.jp","ebetsu.hokkaido.jp","embetsu.hokkaido.jp","eniwa.hokkaido.jp","erimo.hokkaido.jp","esan.hokkaido.jp","esashi.hokkaido.jp","fukagawa.hokkaido.jp","fukushima.hokkaido.jp","furano.hokkaido.jp","furubira.hokkaido.jp","haboro.hokkaido.jp","hakodate.hokkaido.jp","hamatonbetsu.hokkaido.jp","hidaka.hokkaido.jp","higashikagura.hokkaido.jp","higashikawa.hokkaido.jp","hiroo.hokkaido.jp","hokuryu.hokkaido.jp","hokuto.hokkaido.jp","honbetsu.hokkaido.jp","horokanai.hokkaido.jp","horonobe.hokkaido.jp","ikeda.hokkaido.jp","imakane.hokkaido.jp","ishikari.hokkaido.jp","iwamizawa.hokkaido.jp","iwanai.hokkaido.jp","kamifurano.hokkaido.jp","kamikawa.hokkaido.jp","kamishihoro.hokkaido.jp","kamisunagawa.hokkaido.jp","kamoenai.hokkaido.jp","kayabe.hokkaido.jp","kembuchi.hokkaido.jp","kikonai.hokkaido.jp","kimobetsu.hokkaido.jp","kitahiroshima.hokkaido.jp","kitami.hokkaido.jp","kiyosato.hokkaido.jp","koshimizu.hokkaido.jp","kunneppu.hokkaido.jp","kuriyama.hokkaido.jp","kuromatsunai.hokkaido.jp","kushiro.hokkaido.jp","kutchan.hokkaido.jp","kyowa.hokkaido.jp","mashike.hokkaido.jp","matsumae.hokkaido.jp","mikasa.hokkaido.jp","minamifurano.hokkaido.jp","mombetsu.hokkaido.jp","moseushi.hokkaido.jp","mukawa.hokkaido.jp","muroran.hokkaido.jp","naie.hokkaido.jp","nakagawa.hokkaido.jp","nakasatsunai.hokkaido.jp","nakatombetsu.hokkaido.jp","nanae.hokkaido.jp","nanporo.hokkaido.jp","nayoro.hokkaido.jp","nemuro.hokkaido.jp","niikappu.hokkaido.jp","niki.hokkaido.jp","nishiokoppe.hokkaido.jp","noboribetsu.hokkaido.jp","numata.hokkaido.jp","obihiro.hokkaido.jp","obira.hokkaido.jp","oketo.hokkaido.jp","okoppe.hokkaido.jp","otaru.hokkaido.jp","otobe.hokkaido.jp","otofuke.hokkaido.jp","otoineppu.hokkaido.jp","oumu.hokkaido.jp","ozora.hokkaido.jp","pippu.hokkaido.jp","rankoshi.hokkaido.jp","rebun.hokkaido.jp","rikubetsu.hokkaido.jp","rishiri.hokkaido.jp","rishirifuji.hokkaido.jp","saroma.hokkaido.jp","sarufutsu.hokkaido.jp","shakotan.hokkaido.jp","shari.hokkaido.jp","shibecha.hokkaido.jp","shibetsu.hokkaido.jp","shikabe.hokkaido.jp","shikaoi.hokkaido.jp","shimamaki.hokkaido.jp","shimizu.hokkaido.jp","shimokawa.hokkaido.jp","shinshinotsu.hokkaido.jp","shintoku.hokkaido.jp","shiranuka.hokkaido.jp","shiraoi.hokkaido.jp","shiriuchi.hokkaido.jp","sobetsu.hokkaido.jp","sunagawa.hokkaido.jp","taiki.hokkaido.jp","takasu.hokkaido.jp","takikawa.hokkaido.jp","takinoue.hokkaido.jp","teshikaga.hokkaido.jp","tobetsu.hokkaido.jp","tohma.hokkaido.jp","tomakomai.hokkaido.jp","tomari.hokkaido.jp","toya.hokkaido.jp","toyako.hokkaido.jp","toyotomi.hokkaido.jp","toyoura.hokkaido.jp","tsubetsu.hokkaido.jp","tsukigata.hokkaido.jp","urakawa.hokkaido.jp","urausu.hokkaido.jp","uryu.hokkaido.jp","utashinai.hokkaido.jp","wakkanai.hokkaido.jp","wassamu.hokkaido.jp","yakumo.hokkaido.jp","yoichi.hokkaido.jp","aioi.hyogo.jp","akashi.hyogo.jp","ako.hyogo.jp","amagasaki.hyogo.jp","aogaki.hyogo.jp","asago.hyogo.jp","ashiya.hyogo.jp","awaji.hyogo.jp","fukusaki.hyogo.jp","goshiki.hyogo.jp","harima.hyogo.jp","himeji.hyogo.jp","ichikawa.hyogo.jp","inagawa.hyogo.jp","itami.hyogo.jp","kakogawa.hyogo.jp","kamigori.hyogo.jp","kamikawa.hyogo.jp","kasai.hyogo.jp","kasuga.hyogo.jp","kawanishi.hyogo.jp","miki.hyogo.jp","minamiawaji.hyogo.jp","nishinomiya.hyogo.jp","nishiwaki.hyogo.jp","ono.hyogo.jp","sanda.hyogo.jp","sannan.hyogo.jp","sasayama.hyogo.jp","sayo.hyogo.jp","shingu.hyogo.jp","shinonsen.hyogo.jp","shiso.hyogo.jp","sumoto.hyogo.jp","taishi.hyogo.jp","taka.hyogo.jp","takarazuka.hyogo.jp","takasago.hyogo.jp","takino.hyogo.jp","tamba.hyogo.jp","tatsuno.hyogo.jp","toyooka.hyogo.jp","yabu.hyogo.jp","yashiro.hyogo.jp","yoka.hyogo.jp","yokawa.hyogo.jp","ami.ibaraki.jp","asahi.ibaraki.jp","bando.ibaraki.jp","chikusei.ibaraki.jp","daigo.ibaraki.jp","fujishiro.ibaraki.jp","hitachi.ibaraki.jp","hitachinaka.ibaraki.jp","hitachiomiya.ibaraki.jp","hitachiota.ibaraki.jp","ibaraki.ibaraki.jp","ina.ibaraki.jp","inashiki.ibaraki.jp","itako.ibaraki.jp","iwama.ibaraki.jp","joso.ibaraki.jp","kamisu.ibaraki.jp","kasama.ibaraki.jp","kashima.ibaraki.jp","kasumigaura.ibaraki.jp","koga.ibaraki.jp","miho.ibaraki.jp","mito.ibaraki.jp","moriya.ibaraki.jp","naka.ibaraki.jp","namegata.ibaraki.jp","oarai.ibaraki.jp","ogawa.ibaraki.jp","omitama.ibaraki.jp","ryugasaki.ibaraki.jp","sakai.ibaraki.jp","sakuragawa.ibaraki.jp","shimodate.ibaraki.jp","shimotsuma.ibaraki.jp","shirosato.ibaraki.jp","sowa.ibaraki.jp","suifu.ibaraki.jp","takahagi.ibaraki.jp","tamatsukuri.ibaraki.jp","tokai.ibaraki.jp","tomobe.ibaraki.jp","tone.ibaraki.jp","toride.ibaraki.jp","tsuchiura.ibaraki.jp","tsukuba.ibaraki.jp","uchihara.ibaraki.jp","ushiku.ibaraki.jp","yachiyo.ibaraki.jp","yamagata.ibaraki.jp","yawara.ibaraki.jp","yuki.ibaraki.jp","anamizu.ishikawa.jp","hakui.ishikawa.jp","hakusan.ishikawa.jp","kaga.ishikawa.jp","kahoku.ishikawa.jp","kanazawa.ishikawa.jp","kawakita.ishikawa.jp","komatsu.ishikawa.jp","nakanoto.ishikawa.jp","nanao.ishikawa.jp","nomi.ishikawa.jp","nonoichi.ishikawa.jp","noto.ishikawa.jp","shika.ishikawa.jp","suzu.ishikawa.jp","tsubata.ishikawa.jp","tsurugi.ishikawa.jp","uchinada.ishikawa.jp","wajima.ishikawa.jp","fudai.iwate.jp","fujisawa.iwate.jp","hanamaki.iwate.jp","hiraizumi.iwate.jp","hirono.iwate.jp","ichinohe.iwate.jp","ichinoseki.iwate.jp","iwaizumi.iwate.jp","iwate.iwate.jp","joboji.iwate.jp","kamaishi.iwate.jp","kanegasaki.iwate.jp","karumai.iwate.jp","kawai.iwate.jp","kitakami.iwate.jp","kuji.iwate.jp","kunohe.iwate.jp","kuzumaki.iwate.jp","miyako.iwate.jp","mizusawa.iwate.jp","morioka.iwate.jp","ninohe.iwate.jp","noda.iwate.jp","ofunato.iwate.jp","oshu.iwate.jp","otsuchi.iwate.jp","rikuzentakata.iwate.jp","shiwa.iwate.jp","shizukuishi.iwate.jp","sumita.iwate.jp","tanohata.iwate.jp","tono.iwate.jp","yahaba.iwate.jp","yamada.iwate.jp","ayagawa.kagawa.jp","higashikagawa.kagawa.jp","kanonji.kagawa.jp","kotohira.kagawa.jp","manno.kagawa.jp","marugame.kagawa.jp","mitoyo.kagawa.jp","naoshima.kagawa.jp","sanuki.kagawa.jp","tadotsu.kagawa.jp","takamatsu.kagawa.jp","tonosho.kagawa.jp","uchinomi.kagawa.jp","utazu.kagawa.jp","zentsuji.kagawa.jp","akune.kagoshima.jp","amami.kagoshima.jp","hioki.kagoshima.jp","isa.kagoshima.jp","isen.kagoshima.jp","izumi.kagoshima.jp","kagoshima.kagoshima.jp","kanoya.kagoshima.jp","kawanabe.kagoshima.jp","kinko.kagoshima.jp","kouyama.kagoshima.jp","makurazaki.kagoshima.jp","matsumoto.kagoshima.jp","minamitane.kagoshima.jp","nakatane.kagoshima.jp","nishinoomote.kagoshima.jp","satsumasendai.kagoshima.jp","soo.kagoshima.jp","tarumizu.kagoshima.jp","yusui.kagoshima.jp","aikawa.kanagawa.jp","atsugi.kanagawa.jp","ayase.kanagawa.jp","chigasaki.kanagawa.jp","ebina.kanagawa.jp","fujisawa.kanagawa.jp","hadano.kanagawa.jp","hakone.kanagawa.jp","hiratsuka.kanagawa.jp","isehara.kanagawa.jp","kaisei.kanagawa.jp","kamakura.kanagawa.jp","kiyokawa.kanagawa.jp","matsuda.kanagawa.jp","minamiashigara.kanagawa.jp","miura.kanagawa.jp","nakai.kanagawa.jp","ninomiya.kanagawa.jp","odawara.kanagawa.jp","oi.kanagawa.jp","oiso.kanagawa.jp","sagamihara.kanagawa.jp","samukawa.kanagawa.jp","tsukui.kanagawa.jp","yamakita.kanagawa.jp","yamato.kanagawa.jp","yokosuka.kanagawa.jp","yugawara.kanagawa.jp","zama.kanagawa.jp","zushi.kanagawa.jp","aki.kochi.jp","geisei.kochi.jp","hidaka.kochi.jp","higashitsuno.kochi.jp","ino.kochi.jp","kagami.kochi.jp","kami.kochi.jp","kitagawa.kochi.jp","kochi.kochi.jp","mihara.kochi.jp","motoyama.kochi.jp","muroto.kochi.jp","nahari.kochi.jp","nakamura.kochi.jp","nankoku.kochi.jp","nishitosa.kochi.jp","niyodogawa.kochi.jp","ochi.kochi.jp","okawa.kochi.jp","otoyo.kochi.jp","otsuki.kochi.jp","sakawa.kochi.jp","sukumo.kochi.jp","susaki.kochi.jp","tosa.kochi.jp","tosashimizu.kochi.jp","toyo.kochi.jp","tsuno.kochi.jp","umaji.kochi.jp","yasuda.kochi.jp","yusuhara.kochi.jp","amakusa.kumamoto.jp","arao.kumamoto.jp","aso.kumamoto.jp","choyo.kumamoto.jp","gyokuto.kumamoto.jp","kamiamakusa.kumamoto.jp","kikuchi.kumamoto.jp","kumamoto.kumamoto.jp","mashiki.kumamoto.jp","mifune.kumamoto.jp","minamata.kumamoto.jp","minamioguni.kumamoto.jp","nagasu.kumamoto.jp","nishihara.kumamoto.jp","oguni.kumamoto.jp","ozu.kumamoto.jp","sumoto.kumamoto.jp","takamori.kumamoto.jp","uki.kumamoto.jp","uto.kumamoto.jp","yamaga.kumamoto.jp","yamato.kumamoto.jp","yatsushiro.kumamoto.jp","ayabe.kyoto.jp","fukuchiyama.kyoto.jp","higashiyama.kyoto.jp","ide.kyoto.jp","ine.kyoto.jp","joyo.kyoto.jp","kameoka.kyoto.jp","kamo.kyoto.jp","kita.kyoto.jp","kizu.kyoto.jp","kumiyama.kyoto.jp","kyotamba.kyoto.jp","kyotanabe.kyoto.jp","kyotango.kyoto.jp","maizuru.kyoto.jp","minami.kyoto.jp","minamiyamashiro.kyoto.jp","miyazu.kyoto.jp","muko.kyoto.jp","nagaokakyo.kyoto.jp","nakagyo.kyoto.jp","nantan.kyoto.jp","oyamazaki.kyoto.jp","sakyo.kyoto.jp","seika.kyoto.jp","tanabe.kyoto.jp","uji.kyoto.jp","ujitawara.kyoto.jp","wazuka.kyoto.jp","yamashina.kyoto.jp","yawata.kyoto.jp","asahi.mie.jp","inabe.mie.jp","ise.mie.jp","kameyama.mie.jp","kawagoe.mie.jp","kiho.mie.jp","kisosaki.mie.jp","kiwa.mie.jp","komono.mie.jp","kumano.mie.jp","kuwana.mie.jp","matsusaka.mie.jp","meiwa.mie.jp","mihama.mie.jp","minamiise.mie.jp","misugi.mie.jp","miyama.mie.jp","nabari.mie.jp","shima.mie.jp","suzuka.mie.jp","tado.mie.jp","taiki.mie.jp","taki.mie.jp","tamaki.mie.jp","toba.mie.jp","tsu.mie.jp","udono.mie.jp","ureshino.mie.jp","watarai.mie.jp","yokkaichi.mie.jp","furukawa.miyagi.jp","higashimatsushima.miyagi.jp","ishinomaki.miyagi.jp","iwanuma.miyagi.jp","kakuda.miyagi.jp","kami.miyagi.jp","kawasaki.miyagi.jp","marumori.miyagi.jp","matsushima.miyagi.jp","minamisanriku.miyagi.jp","misato.miyagi.jp","murata.miyagi.jp","natori.miyagi.jp","ogawara.miyagi.jp","ohira.miyagi.jp","onagawa.miyagi.jp","osaki.miyagi.jp","rifu.miyagi.jp","semine.miyagi.jp","shibata.miyagi.jp","shichikashuku.miyagi.jp","shikama.miyagi.jp","shiogama.miyagi.jp","shiroishi.miyagi.jp","tagajo.miyagi.jp","taiwa.miyagi.jp","tome.miyagi.jp","tomiya.miyagi.jp","wakuya.miyagi.jp","watari.miyagi.jp","yamamoto.miyagi.jp","zao.miyagi.jp","aya.miyazaki.jp","ebino.miyazaki.jp","gokase.miyazaki.jp","hyuga.miyazaki.jp","kadogawa.miyazaki.jp","kawaminami.miyazaki.jp","kijo.miyazaki.jp","kitagawa.miyazaki.jp","kitakata.miyazaki.jp","kitaura.miyazaki.jp","kobayashi.miyazaki.jp","kunitomi.miyazaki.jp","kushima.miyazaki.jp","mimata.miyazaki.jp","miyakonojo.miyazaki.jp","miyazaki.miyazaki.jp","morotsuka.miyazaki.jp","nichinan.miyazaki.jp","nishimera.miyazaki.jp","nobeoka.miyazaki.jp","saito.miyazaki.jp","shiiba.miyazaki.jp","shintomi.miyazaki.jp","takaharu.miyazaki.jp","takanabe.miyazaki.jp","takazaki.miyazaki.jp","tsuno.miyazaki.jp","achi.nagano.jp","agematsu.nagano.jp","anan.nagano.jp","aoki.nagano.jp","asahi.nagano.jp","azumino.nagano.jp","chikuhoku.nagano.jp","chikuma.nagano.jp","chino.nagano.jp","fujimi.nagano.jp","hakuba.nagano.jp","hara.nagano.jp","hiraya.nagano.jp","iida.nagano.jp","iijima.nagano.jp","iiyama.nagano.jp","iizuna.nagano.jp","ikeda.nagano.jp","ikusaka.nagano.jp","ina.nagano.jp","karuizawa.nagano.jp","kawakami.nagano.jp","kiso.nagano.jp","kisofukushima.nagano.jp","kitaaiki.nagano.jp","komagane.nagano.jp","komoro.nagano.jp","matsukawa.nagano.jp","matsumoto.nagano.jp","miasa.nagano.jp","minamiaiki.nagano.jp","minamimaki.nagano.jp","minamiminowa.nagano.jp","minowa.nagano.jp","miyada.nagano.jp","miyota.nagano.jp","mochizuki.nagano.jp","nagano.nagano.jp","nagawa.nagano.jp","nagiso.nagano.jp","nakagawa.nagano.jp","nakano.nagano.jp","nozawaonsen.nagano.jp","obuse.nagano.jp","ogawa.nagano.jp","okaya.nagano.jp","omachi.nagano.jp","omi.nagano.jp","ookuwa.nagano.jp","ooshika.nagano.jp","otaki.nagano.jp","otari.nagano.jp","sakae.nagano.jp","sakaki.nagano.jp","saku.nagano.jp","sakuho.nagano.jp","shimosuwa.nagano.jp","shinanomachi.nagano.jp","shiojiri.nagano.jp","suwa.nagano.jp","suzaka.nagano.jp","takagi.nagano.jp","takamori.nagano.jp","takayama.nagano.jp","tateshina.nagano.jp","tatsuno.nagano.jp","togakushi.nagano.jp","togura.nagano.jp","tomi.nagano.jp","ueda.nagano.jp","wada.nagano.jp","yamagata.nagano.jp","yamanouchi.nagano.jp","yasaka.nagano.jp","yasuoka.nagano.jp","chijiwa.nagasaki.jp","futsu.nagasaki.jp","goto.nagasaki.jp","hasami.nagasaki.jp","hirado.nagasaki.jp","iki.nagasaki.jp","isahaya.nagasaki.jp","kawatana.nagasaki.jp","kuchinotsu.nagasaki.jp","matsuura.nagasaki.jp","nagasaki.nagasaki.jp","obama.nagasaki.jp","omura.nagasaki.jp","oseto.nagasaki.jp","saikai.nagasaki.jp","sasebo.nagasaki.jp","seihi.nagasaki.jp","shimabara.nagasaki.jp","shinkamigoto.nagasaki.jp","togitsu.nagasaki.jp","tsushima.nagasaki.jp","unzen.nagasaki.jp","ando.nara.jp","gose.nara.jp","heguri.nara.jp","higashiyoshino.nara.jp","ikaruga.nara.jp","ikoma.nara.jp","kamikitayama.nara.jp","kanmaki.nara.jp","kashiba.nara.jp","kashihara.nara.jp","katsuragi.nara.jp","kawai.nara.jp","kawakami.nara.jp","kawanishi.nara.jp","koryo.nara.jp","kurotaki.nara.jp","mitsue.nara.jp","miyake.nara.jp","nara.nara.jp","nosegawa.nara.jp","oji.nara.jp","ouda.nara.jp","oyodo.nara.jp","sakurai.nara.jp","sango.nara.jp","shimoichi.nara.jp","shimokitayama.nara.jp","shinjo.nara.jp","soni.nara.jp","takatori.nara.jp","tawaramoto.nara.jp","tenkawa.nara.jp","tenri.nara.jp","uda.nara.jp","yamatokoriyama.nara.jp","yamatotakada.nara.jp","yamazoe.nara.jp","yoshino.nara.jp","aga.niigata.jp","agano.niigata.jp","gosen.niigata.jp","itoigawa.niigata.jp","izumozaki.niigata.jp","joetsu.niigata.jp","kamo.niigata.jp","kariwa.niigata.jp","kashiwazaki.niigata.jp","minamiuonuma.niigata.jp","mitsuke.niigata.jp","muika.niigata.jp","murakami.niigata.jp","myoko.niigata.jp","nagaoka.niigata.jp","niigata.niigata.jp","ojiya.niigata.jp","omi.niigata.jp","sado.niigata.jp","sanjo.niigata.jp","seiro.niigata.jp","seirou.niigata.jp","sekikawa.niigata.jp","shibata.niigata.jp","tagami.niigata.jp","tainai.niigata.jp","tochio.niigata.jp","tokamachi.niigata.jp","tsubame.niigata.jp","tsunan.niigata.jp","uonuma.niigata.jp","yahiko.niigata.jp","yoita.niigata.jp","yuzawa.niigata.jp","beppu.oita.jp","bungoono.oita.jp","bungotakada.oita.jp","hasama.oita.jp","hiji.oita.jp","himeshima.oita.jp","hita.oita.jp","kamitsue.oita.jp","kokonoe.oita.jp","kuju.oita.jp","kunisaki.oita.jp","kusu.oita.jp","oita.oita.jp","saiki.oita.jp","taketa.oita.jp","tsukumi.oita.jp","usa.oita.jp","usuki.oita.jp","yufu.oita.jp","akaiwa.okayama.jp","asakuchi.okayama.jp","bizen.okayama.jp","hayashima.okayama.jp","ibara.okayama.jp","kagamino.okayama.jp","kasaoka.okayama.jp","kibichuo.okayama.jp","kumenan.okayama.jp","kurashiki.okayama.jp","maniwa.okayama.jp","misaki.okayama.jp","nagi.okayama.jp","niimi.okayama.jp","nishiawakura.okayama.jp","okayama.okayama.jp","satosho.okayama.jp","setouchi.okayama.jp","shinjo.okayama.jp","shoo.okayama.jp","soja.okayama.jp","takahashi.okayama.jp","tamano.okayama.jp","tsuyama.okayama.jp","wake.okayama.jp","yakage.okayama.jp","aguni.okinawa.jp","ginowan.okinawa.jp","ginoza.okinawa.jp","gushikami.okinawa.jp","haebaru.okinawa.jp","higashi.okinawa.jp","hirara.okinawa.jp","iheya.okinawa.jp","ishigaki.okinawa.jp","ishikawa.okinawa.jp","itoman.okinawa.jp","izena.okinawa.jp","kadena.okinawa.jp","kin.okinawa.jp","kitadaito.okinawa.jp","kitanakagusuku.okinawa.jp","kumejima.okinawa.jp","kunigami.okinawa.jp","minamidaito.okinawa.jp","motobu.okinawa.jp","nago.okinawa.jp","naha.okinawa.jp","nakagusuku.okinawa.jp","nakijin.okinawa.jp","nanjo.okinawa.jp","nishihara.okinawa.jp","ogimi.okinawa.jp","okinawa.okinawa.jp","onna.okinawa.jp","shimoji.okinawa.jp","taketomi.okinawa.jp","tarama.okinawa.jp","tokashiki.okinawa.jp","tomigusuku.okinawa.jp","tonaki.okinawa.jp","urasoe.okinawa.jp","uruma.okinawa.jp","yaese.okinawa.jp","yomitan.okinawa.jp","yonabaru.okinawa.jp","yonaguni.okinawa.jp","zamami.okinawa.jp","abeno.osaka.jp","chihayaakasaka.osaka.jp","chuo.osaka.jp","daito.osaka.jp","fujiidera.osaka.jp","habikino.osaka.jp","hannan.osaka.jp","higashiosaka.osaka.jp","higashisumiyoshi.osaka.jp","higashiyodogawa.osaka.jp","hirakata.osaka.jp","ibaraki.osaka.jp","ikeda.osaka.jp","izumi.osaka.jp","izumiotsu.osaka.jp","izumisano.osaka.jp","kadoma.osaka.jp","kaizuka.osaka.jp","kanan.osaka.jp","kashiwara.osaka.jp","katano.osaka.jp","kawachinagano.osaka.jp","kishiwada.osaka.jp","kita.osaka.jp","kumatori.osaka.jp","matsubara.osaka.jp","minato.osaka.jp","minoh.osaka.jp","misaki.osaka.jp","moriguchi.osaka.jp","neyagawa.osaka.jp","nishi.osaka.jp","nose.osaka.jp","osakasayama.osaka.jp","sakai.osaka.jp","sayama.osaka.jp","sennan.osaka.jp","settsu.osaka.jp","shijonawate.osaka.jp","shimamoto.osaka.jp","suita.osaka.jp","tadaoka.osaka.jp","taishi.osaka.jp","tajiri.osaka.jp","takaishi.osaka.jp","takatsuki.osaka.jp","tondabayashi.osaka.jp","toyonaka.osaka.jp","toyono.osaka.jp","yao.osaka.jp","ariake.saga.jp","arita.saga.jp","fukudomi.saga.jp","genkai.saga.jp","hamatama.saga.jp","hizen.saga.jp","imari.saga.jp","kamimine.saga.jp","kanzaki.saga.jp","karatsu.saga.jp","kashima.saga.jp","kitagata.saga.jp","kitahata.saga.jp","kiyama.saga.jp","kouhoku.saga.jp","kyuragi.saga.jp","nishiarita.saga.jp","ogi.saga.jp","omachi.saga.jp","ouchi.saga.jp","saga.saga.jp","shiroishi.saga.jp","taku.saga.jp","tara.saga.jp","tosu.saga.jp","yoshinogari.saga.jp","arakawa.saitama.jp","asaka.saitama.jp","chichibu.saitama.jp","fujimi.saitama.jp","fujimino.saitama.jp","fukaya.saitama.jp","hanno.saitama.jp","hanyu.saitama.jp","hasuda.saitama.jp","hatogaya.saitama.jp","hatoyama.saitama.jp","hidaka.saitama.jp","higashichichibu.saitama.jp","higashimatsuyama.saitama.jp","honjo.saitama.jp","ina.saitama.jp","iruma.saitama.jp","iwatsuki.saitama.jp","kamiizumi.saitama.jp","kamikawa.saitama.jp","kamisato.saitama.jp","kasukabe.saitama.jp","kawagoe.saitama.jp","kawaguchi.saitama.jp","kawajima.saitama.jp","kazo.saitama.jp","kitamoto.saitama.jp","koshigaya.saitama.jp","kounosu.saitama.jp","kuki.saitama.jp","kumagaya.saitama.jp","matsubushi.saitama.jp","minano.saitama.jp","misato.saitama.jp","miyashiro.saitama.jp","miyoshi.saitama.jp","moroyama.saitama.jp","nagatoro.saitama.jp","namegawa.saitama.jp","niiza.saitama.jp","ogano.saitama.jp","ogawa.saitama.jp","ogose.saitama.jp","okegawa.saitama.jp","omiya.saitama.jp","otaki.saitama.jp","ranzan.saitama.jp","ryokami.saitama.jp","saitama.saitama.jp","sakado.saitama.jp","satte.saitama.jp","sayama.saitama.jp","shiki.saitama.jp","shiraoka.saitama.jp","soka.saitama.jp","sugito.saitama.jp","toda.saitama.jp","tokigawa.saitama.jp","tokorozawa.saitama.jp","tsurugashima.saitama.jp","urawa.saitama.jp","warabi.saitama.jp","yashio.saitama.jp","yokoze.saitama.jp","yono.saitama.jp","yorii.saitama.jp","yoshida.saitama.jp","yoshikawa.saitama.jp","yoshimi.saitama.jp","aisho.shiga.jp","gamo.shiga.jp","higashiomi.shiga.jp","hikone.shiga.jp","koka.shiga.jp","konan.shiga.jp","kosei.shiga.jp","koto.shiga.jp","kusatsu.shiga.jp","maibara.shiga.jp","moriyama.shiga.jp","nagahama.shiga.jp","nishiazai.shiga.jp","notogawa.shiga.jp","omihachiman.shiga.jp","otsu.shiga.jp","ritto.shiga.jp","ryuoh.shiga.jp","takashima.shiga.jp","takatsuki.shiga.jp","torahime.shiga.jp","toyosato.shiga.jp","yasu.shiga.jp","akagi.shimane.jp","ama.shimane.jp","gotsu.shimane.jp","hamada.shimane.jp","higashiizumo.shimane.jp","hikawa.shimane.jp","hikimi.shimane.jp","izumo.shimane.jp","kakinoki.shimane.jp","masuda.shimane.jp","matsue.shimane.jp","misato.shimane.jp","nishinoshima.shimane.jp","ohda.shimane.jp","okinoshima.shimane.jp","okuizumo.shimane.jp","shimane.shimane.jp","tamayu.shimane.jp","tsuwano.shimane.jp","unnan.shimane.jp","yakumo.shimane.jp","yasugi.shimane.jp","yatsuka.shimane.jp","arai.shizuoka.jp","atami.shizuoka.jp","fuji.shizuoka.jp","fujieda.shizuoka.jp","fujikawa.shizuoka.jp","fujinomiya.shizuoka.jp","fukuroi.shizuoka.jp","gotemba.shizuoka.jp","haibara.shizuoka.jp","hamamatsu.shizuoka.jp","higashiizu.shizuoka.jp","ito.shizuoka.jp","iwata.shizuoka.jp","izu.shizuoka.jp","izunokuni.shizuoka.jp","kakegawa.shizuoka.jp","kannami.shizuoka.jp","kawanehon.shizuoka.jp","kawazu.shizuoka.jp","kikugawa.shizuoka.jp","kosai.shizuoka.jp","makinohara.shizuoka.jp","matsuzaki.shizuoka.jp","minamiizu.shizuoka.jp","mishima.shizuoka.jp","morimachi.shizuoka.jp","nishiizu.shizuoka.jp","numazu.shizuoka.jp","omaezaki.shizuoka.jp","shimada.shizuoka.jp","shimizu.shizuoka.jp","shimoda.shizuoka.jp","shizuoka.shizuoka.jp","susono.shizuoka.jp","yaizu.shizuoka.jp","yoshida.shizuoka.jp","ashikaga.tochigi.jp","bato.tochigi.jp","haga.tochigi.jp","ichikai.tochigi.jp","iwafune.tochigi.jp","kaminokawa.tochigi.jp","kanuma.tochigi.jp","karasuyama.tochigi.jp","kuroiso.tochigi.jp","mashiko.tochigi.jp","mibu.tochigi.jp","moka.tochigi.jp","motegi.tochigi.jp","nasu.tochigi.jp","nasushiobara.tochigi.jp","nikko.tochigi.jp","nishikata.tochigi.jp","nogi.tochigi.jp","ohira.tochigi.jp","ohtawara.tochigi.jp","oyama.tochigi.jp","sakura.tochigi.jp","sano.tochigi.jp","shimotsuke.tochigi.jp","shioya.tochigi.jp","takanezawa.tochigi.jp","tochigi.tochigi.jp","tsuga.tochigi.jp","ujiie.tochigi.jp","utsunomiya.tochigi.jp","yaita.tochigi.jp","aizumi.tokushima.jp","anan.tokushima.jp","ichiba.tokushima.jp","itano.tokushima.jp","kainan.tokushima.jp","komatsushima.tokushima.jp","matsushige.tokushima.jp","mima.tokushima.jp","minami.tokushima.jp","miyoshi.tokushima.jp","mugi.tokushima.jp","nakagawa.tokushima.jp","naruto.tokushima.jp","sanagochi.tokushima.jp","shishikui.tokushima.jp","tokushima.tokushima.jp","wajiki.tokushima.jp","adachi.tokyo.jp","akiruno.tokyo.jp","akishima.tokyo.jp","aogashima.tokyo.jp","arakawa.tokyo.jp","bunkyo.tokyo.jp","chiyoda.tokyo.jp","chofu.tokyo.jp","chuo.tokyo.jp","edogawa.tokyo.jp","fuchu.tokyo.jp","fussa.tokyo.jp","hachijo.tokyo.jp","hachioji.tokyo.jp","hamura.tokyo.jp","higashikurume.tokyo.jp","higashimurayama.tokyo.jp","higashiyamato.tokyo.jp","hino.tokyo.jp","hinode.tokyo.jp","hinohara.tokyo.jp","inagi.tokyo.jp","itabashi.tokyo.jp","katsushika.tokyo.jp","kita.tokyo.jp","kiyose.tokyo.jp","kodaira.tokyo.jp","koganei.tokyo.jp","kokubunji.tokyo.jp","komae.tokyo.jp","koto.tokyo.jp","kouzushima.tokyo.jp","kunitachi.tokyo.jp","machida.tokyo.jp","meguro.tokyo.jp","minato.tokyo.jp","mitaka.tokyo.jp","mizuho.tokyo.jp","musashimurayama.tokyo.jp","musashino.tokyo.jp","nakano.tokyo.jp","nerima.tokyo.jp","ogasawara.tokyo.jp","okutama.tokyo.jp","ome.tokyo.jp","oshima.tokyo.jp","ota.tokyo.jp","setagaya.tokyo.jp","shibuya.tokyo.jp","shinagawa.tokyo.jp","shinjuku.tokyo.jp","suginami.tokyo.jp","sumida.tokyo.jp","tachikawa.tokyo.jp","taito.tokyo.jp","tama.tokyo.jp","toshima.tokyo.jp","chizu.tottori.jp","hino.tottori.jp","kawahara.tottori.jp","koge.tottori.jp","kotoura.tottori.jp","misasa.tottori.jp","nanbu.tottori.jp","nichinan.tottori.jp","sakaiminato.tottori.jp","tottori.tottori.jp","wakasa.tottori.jp","yazu.tottori.jp","yonago.tottori.jp","asahi.toyama.jp","fuchu.toyama.jp","fukumitsu.toyama.jp","funahashi.toyama.jp","himi.toyama.jp","imizu.toyama.jp","inami.toyama.jp","johana.toyama.jp","kamiichi.toyama.jp","kurobe.toyama.jp","nakaniikawa.toyama.jp","namerikawa.toyama.jp","nanto.toyama.jp","nyuzen.toyama.jp","oyabe.toyama.jp","taira.toyama.jp","takaoka.toyama.jp","tateyama.toyama.jp","toga.toyama.jp","tonami.toyama.jp","toyama.toyama.jp","unazuki.toyama.jp","uozu.toyama.jp","yamada.toyama.jp","arida.wakayama.jp","aridagawa.wakayama.jp","gobo.wakayama.jp","hashimoto.wakayama.jp","hidaka.wakayama.jp","hirogawa.wakayama.jp","inami.wakayama.jp","iwade.wakayama.jp","kainan.wakayama.jp","kamitonda.wakayama.jp","katsuragi.wakayama.jp","kimino.wakayama.jp","kinokawa.wakayama.jp","kitayama.wakayama.jp","koya.wakayama.jp","koza.wakayama.jp","kozagawa.wakayama.jp","kudoyama.wakayama.jp","kushimoto.wakayama.jp","mihama.wakayama.jp","misato.wakayama.jp","nachikatsuura.wakayama.jp","shingu.wakayama.jp","shirahama.wakayama.jp","taiji.wakayama.jp","tanabe.wakayama.jp","wakayama.wakayama.jp","yuasa.wakayama.jp","yura.wakayama.jp","asahi.yamagata.jp","funagata.yamagata.jp","higashine.yamagata.jp","iide.yamagata.jp","kahoku.yamagata.jp","kaminoyama.yamagata.jp","kaneyama.yamagata.jp","kawanishi.yamagata.jp","mamurogawa.yamagata.jp","mikawa.yamagata.jp","murayama.yamagata.jp","nagai.yamagata.jp","nakayama.yamagata.jp","nanyo.yamagata.jp","nishikawa.yamagata.jp","obanazawa.yamagata.jp","oe.yamagata.jp","oguni.yamagata.jp","ohkura.yamagata.jp","oishida.yamagata.jp","sagae.yamagata.jp","sakata.yamagata.jp","sakegawa.yamagata.jp","shinjo.yamagata.jp","shirataka.yamagata.jp","shonai.yamagata.jp","takahata.yamagata.jp","tendo.yamagata.jp","tozawa.yamagata.jp","tsuruoka.yamagata.jp","yamagata.yamagata.jp","yamanobe.yamagata.jp","yonezawa.yamagata.jp","yuza.yamagata.jp","abu.yamaguchi.jp","hagi.yamaguchi.jp","hikari.yamaguchi.jp","hofu.yamaguchi.jp","iwakuni.yamaguchi.jp","kudamatsu.yamaguchi.jp","mitou.yamaguchi.jp","nagato.yamaguchi.jp","oshima.yamaguchi.jp","shimonoseki.yamaguchi.jp","shunan.yamaguchi.jp","tabuse.yamaguchi.jp","tokuyama.yamaguchi.jp","toyota.yamaguchi.jp","ube.yamaguchi.jp","yuu.yamaguchi.jp","chuo.yamanashi.jp","doshi.yamanashi.jp","fuefuki.yamanashi.jp","fujikawa.yamanashi.jp","fujikawaguchiko.yamanashi.jp","fujiyoshida.yamanashi.jp","hayakawa.yamanashi.jp","hokuto.yamanashi.jp","ichikawamisato.yamanashi.jp","kai.yamanashi.jp","kofu.yamanashi.jp","koshu.yamanashi.jp","kosuge.yamanashi.jp","minami-alps.yamanashi.jp","minobu.yamanashi.jp","nakamichi.yamanashi.jp","nanbu.yamanashi.jp","narusawa.yamanashi.jp","nirasaki.yamanashi.jp","nishikatsura.yamanashi.jp","oshino.yamanashi.jp","otsuki.yamanashi.jp","showa.yamanashi.jp","tabayama.yamanashi.jp","tsuru.yamanashi.jp","uenohara.yamanashi.jp","yamanakako.yamanashi.jp","yamanashi.yamanashi.jp","ke","ac.ke","co.ke","go.ke","info.ke","me.ke","mobi.ke","ne.ke","or.ke","sc.ke","kg","org.kg","net.kg","com.kg","edu.kg","gov.kg","mil.kg","*.kh","ki","edu.ki","biz.ki","net.ki","org.ki","gov.ki","info.ki","com.ki","km","org.km","nom.km","gov.km","prd.km","tm.km","edu.km","mil.km","ass.km","com.km","coop.km","asso.km","presse.km","medecin.km","notaires.km","pharmaciens.km","veterinaire.km","gouv.km","kn","net.kn","org.kn","edu.kn","gov.kn","kp","com.kp","edu.kp","gov.kp","org.kp","rep.kp","tra.kp","kr","ac.kr","co.kr","es.kr","go.kr","hs.kr","kg.kr","mil.kr","ms.kr","ne.kr","or.kr","pe.kr","re.kr","sc.kr","busan.kr","chungbuk.kr","chungnam.kr","daegu.kr","daejeon.kr","gangwon.kr","gwangju.kr","gyeongbuk.kr","gyeonggi.kr","gyeongnam.kr","incheon.kr","jeju.kr","jeonbuk.kr","jeonnam.kr","seoul.kr","ulsan.kr","kw","com.kw","edu.kw","emb.kw","gov.kw","ind.kw","net.kw","org.kw","ky","edu.ky","gov.ky","com.ky","org.ky","net.ky","kz","org.kz","edu.kz","net.kz","gov.kz","mil.kz","com.kz","la","int.la","net.la","info.la","edu.la","gov.la","per.la","com.la","org.la","lb","com.lb","edu.lb","gov.lb","net.lb","org.lb","lc","com.lc","net.lc","co.lc","org.lc","edu.lc","gov.lc","li","lk","gov.lk","sch.lk","net.lk","int.lk","com.lk","org.lk","edu.lk","ngo.lk","soc.lk","web.lk","ltd.lk","assn.lk","grp.lk","hotel.lk","ac.lk","lr","com.lr","edu.lr","gov.lr","org.lr","net.lr","ls","co.ls","org.ls","lt","gov.lt","lu","lv","com.lv","edu.lv","gov.lv","org.lv","mil.lv","id.lv","net.lv","asn.lv","conf.lv","ly","com.ly","net.ly","gov.ly","plc.ly","edu.ly","sch.ly","med.ly","org.ly","id.ly","ma","co.ma","net.ma","gov.ma","org.ma","ac.ma","press.ma","mc","tm.mc","asso.mc","md","me","co.me","net.me","org.me","edu.me","ac.me","gov.me","its.me","priv.me","mg","org.mg","nom.mg","gov.mg","prd.mg","tm.mg","edu.mg","mil.mg","com.mg","co.mg","mh","mil","mk","com.mk","org.mk","net.mk","edu.mk","gov.mk","inf.mk","name.mk","ml","com.ml","edu.ml","gouv.ml","gov.ml","net.ml","org.ml","presse.ml","*.mm","mn","gov.mn","edu.mn","org.mn","mo","com.mo","net.mo","org.mo","edu.mo","gov.mo","mobi","mp","mq","mr","gov.mr","ms","com.ms","edu.ms","gov.ms","net.ms","org.ms","mt","com.mt","edu.mt","net.mt","org.mt","mu","com.mu","net.mu","org.mu","gov.mu","ac.mu","co.mu","or.mu","museum","academy.museum","agriculture.museum","air.museum","airguard.museum","alabama.museum","alaska.museum","amber.museum","ambulance.museum","american.museum","americana.museum","americanantiques.museum","americanart.museum","amsterdam.museum","and.museum","annefrank.museum","anthro.museum","anthropology.museum","antiques.museum","aquarium.museum","arboretum.museum","archaeological.museum","archaeology.museum","architecture.museum","art.museum","artanddesign.museum","artcenter.museum","artdeco.museum","arteducation.museum","artgallery.museum","arts.museum","artsandcrafts.museum","asmatart.museum","assassination.museum","assisi.museum","association.museum","astronomy.museum","atlanta.museum","austin.museum","australia.museum","automotive.museum","aviation.museum","axis.museum","badajoz.museum","baghdad.museum","bahn.museum","bale.museum","baltimore.museum","barcelona.museum","baseball.museum","basel.museum","baths.museum","bauern.museum","beauxarts.museum","beeldengeluid.museum","bellevue.museum","bergbau.museum","berkeley.museum","berlin.museum","bern.museum","bible.museum","bilbao.museum","bill.museum","birdart.museum","birthplace.museum","bonn.museum","boston.museum","botanical.museum","botanicalgarden.museum","botanicgarden.museum","botany.museum","brandywinevalley.museum","brasil.museum","bristol.museum","british.museum","britishcolumbia.museum","broadcast.museum","brunel.museum","brussel.museum","brussels.museum","bruxelles.museum","building.museum","burghof.museum","bus.museum","bushey.museum","cadaques.museum","california.museum","cambridge.museum","can.museum","canada.museum","capebreton.museum","carrier.museum","cartoonart.museum","casadelamoneda.museum","castle.museum","castres.museum","celtic.museum","center.museum","chattanooga.museum","cheltenham.museum","chesapeakebay.museum","chicago.museum","children.museum","childrens.museum","childrensgarden.museum","chiropractic.museum","chocolate.museum","christiansburg.museum","cincinnati.museum","cinema.museum","circus.museum","civilisation.museum","civilization.museum","civilwar.museum","clinton.museum","clock.museum","coal.museum","coastaldefence.museum","cody.museum","coldwar.museum","collection.museum","colonialwilliamsburg.museum","coloradoplateau.museum","columbia.museum","columbus.museum","communication.museum","communications.museum","community.museum","computer.museum","computerhistory.museum","comunicações.museum","contemporary.museum","contemporaryart.museum","convent.museum","copenhagen.museum","corporation.museum","correios-e-telecomunicações.museum","corvette.museum","costume.museum","countryestate.museum","county.museum","crafts.museum","cranbrook.museum","creation.museum","cultural.museum","culturalcenter.museum","culture.museum","cyber.museum","cymru.museum","dali.museum","dallas.museum","database.museum","ddr.museum","decorativearts.museum","delaware.museum","delmenhorst.museum","denmark.museum","depot.museum","design.museum","detroit.museum","dinosaur.museum","discovery.museum","dolls.museum","donostia.museum","durham.museum","eastafrica.museum","eastcoast.museum","education.museum","educational.museum","egyptian.museum","eisenbahn.museum","elburg.museum","elvendrell.museum","embroidery.museum","encyclopedic.museum","england.museum","entomology.museum","environment.museum","environmentalconservation.museum","epilepsy.museum","essex.museum","estate.museum","ethnology.museum","exeter.museum","exhibition.museum","family.museum","farm.museum","farmequipment.museum","farmers.museum","farmstead.museum","field.museum","figueres.museum","filatelia.museum","film.museum","fineart.museum","finearts.museum","finland.museum","flanders.museum","florida.museum","force.museum","fortmissoula.museum","fortworth.museum","foundation.museum","francaise.museum","frankfurt.museum","franziskaner.museum","freemasonry.museum","freiburg.museum","fribourg.museum","frog.museum","fundacio.museum","furniture.museum","gallery.museum","garden.museum","gateway.museum","geelvinck.museum","gemological.museum","geology.museum","georgia.museum","giessen.museum","glas.museum","glass.museum","gorge.museum","grandrapids.museum","graz.museum","guernsey.museum","halloffame.museum","hamburg.museum","handson.museum","harvestcelebration.museum","hawaii.museum","health.museum","heimatunduhren.museum","hellas.museum","helsinki.museum","hembygdsforbund.museum","heritage.museum","histoire.museum","historical.museum","historicalsociety.museum","historichouses.museum","historisch.museum","historisches.museum","history.museum","historyofscience.museum","horology.museum","house.museum","humanities.museum","illustration.museum","imageandsound.museum","indian.museum","indiana.museum","indianapolis.museum","indianmarket.museum","intelligence.museum","interactive.museum","iraq.museum","iron.museum","isleofman.museum","jamison.museum","jefferson.museum","jerusalem.museum","jewelry.museum","jewish.museum","jewishart.museum","jfk.museum","journalism.museum","judaica.museum","judygarland.museum","juedisches.museum","juif.museum","karate.museum","karikatur.museum","kids.museum","koebenhavn.museum","koeln.museum","kunst.museum","kunstsammlung.museum","kunstunddesign.museum","labor.museum","labour.museum","lajolla.museum","lancashire.museum","landes.museum","lans.museum","läns.museum","larsson.museum","lewismiller.museum","lincoln.museum","linz.museum","living.museum","livinghistory.museum","localhistory.museum","london.museum","losangeles.museum","louvre.museum","loyalist.museum","lucerne.museum","luxembourg.museum","luzern.museum","mad.museum","madrid.museum","mallorca.museum","manchester.museum","mansion.museum","mansions.museum","manx.museum","marburg.museum","maritime.museum","maritimo.museum","maryland.museum","marylhurst.museum","media.museum","medical.museum","medizinhistorisches.museum","meeres.museum","memorial.museum","mesaverde.museum","michigan.museum","midatlantic.museum","military.museum","mill.museum","miners.museum","mining.museum","minnesota.museum","missile.museum","missoula.museum","modern.museum","moma.museum","money.museum","monmouth.museum","monticello.museum","montreal.museum","moscow.museum","motorcycle.museum","muenchen.museum","muenster.museum","mulhouse.museum","muncie.museum","museet.museum","museumcenter.museum","museumvereniging.museum","music.museum","national.museum","nationalfirearms.museum","nationalheritage.museum","nativeamerican.museum","naturalhistory.museum","naturalhistorymuseum.museum","naturalsciences.museum","nature.museum","naturhistorisches.museum","natuurwetenschappen.museum","naumburg.museum","naval.museum","nebraska.museum","neues.museum","newhampshire.museum","newjersey.museum","newmexico.museum","newport.museum","newspaper.museum","newyork.museum","niepce.museum","norfolk.museum","north.museum","nrw.museum","nuernberg.museum","nuremberg.museum","nyc.museum","nyny.museum","oceanographic.museum","oceanographique.museum","omaha.museum","online.museum","ontario.museum","openair.museum","oregon.museum","oregontrail.museum","otago.museum","oxford.museum","pacific.museum","paderborn.museum","palace.museum","paleo.museum","palmsprings.museum","panama.museum","paris.museum","pasadena.museum","pharmacy.museum","philadelphia.museum","philadelphiaarea.museum","philately.museum","phoenix.museum","photography.museum","pilots.museum","pittsburgh.museum","planetarium.museum","plantation.museum","plants.museum","plaza.museum","portal.museum","portland.museum","portlligat.museum","posts-and-telecommunications.museum","preservation.museum","presidio.museum","press.museum","project.museum","public.museum","pubol.museum","quebec.museum","railroad.museum","railway.museum","research.museum","resistance.museum","riodejaneiro.museum","rochester.museum","rockart.museum","roma.museum","russia.museum","saintlouis.museum","salem.museum","salvadordali.museum","salzburg.museum","sandiego.museum","sanfrancisco.museum","santabarbara.museum","santacruz.museum","santafe.museum","saskatchewan.museum","satx.museum","savannahga.museum","schlesisches.museum","schoenbrunn.museum","schokoladen.museum","school.museum","schweiz.museum","science.museum","scienceandhistory.museum","scienceandindustry.museum","sciencecenter.museum","sciencecenters.museum","science-fiction.museum","sciencehistory.museum","sciences.museum","sciencesnaturelles.museum","scotland.museum","seaport.museum","settlement.museum","settlers.museum","shell.museum","sherbrooke.museum","sibenik.museum","silk.museum","ski.museum","skole.museum","society.museum","sologne.museum","soundandvision.museum","southcarolina.museum","southwest.museum","space.museum","spy.museum","square.museum","stadt.museum","stalbans.museum","starnberg.museum","state.museum","stateofdelaware.museum","station.museum","steam.museum","steiermark.museum","stjohn.museum","stockholm.museum","stpetersburg.museum","stuttgart.museum","suisse.museum","surgeonshall.museum","surrey.museum","svizzera.museum","sweden.museum","sydney.museum","tank.museum","tcm.museum","technology.museum","telekommunikation.museum","television.museum","texas.museum","textile.museum","theater.museum","time.museum","timekeeping.museum","topology.museum","torino.museum","touch.museum","town.museum","transport.museum","tree.museum","trolley.museum","trust.museum","trustee.museum","uhren.museum","ulm.museum","undersea.museum","university.museum","usa.museum","usantiques.museum","usarts.museum","uscountryestate.museum","usculture.museum","usdecorativearts.museum","usgarden.museum","ushistory.museum","ushuaia.museum","uslivinghistory.museum","utah.museum","uvic.museum","valley.museum","vantaa.museum","versailles.museum","viking.museum","village.museum","virginia.museum","virtual.museum","virtuel.museum","vlaanderen.museum","volkenkunde.museum","wales.museum","wallonie.museum","war.museum","washingtondc.museum","watchandclock.museum","watch-and-clock.museum","western.museum","westfalen.museum","whaling.museum","wildlife.museum","williamsburg.museum","windmill.museum","workshop.museum","york.museum","yorkshire.museum","yosemite.museum","youth.museum","zoological.museum","zoology.museum","ירושלים.museum","иком.museum","mv","aero.mv","biz.mv","com.mv","coop.mv","edu.mv","gov.mv","info.mv","int.mv","mil.mv","museum.mv","name.mv","net.mv","org.mv","pro.mv","mw","ac.mw","biz.mw","co.mw","com.mw","coop.mw","edu.mw","gov.mw","int.mw","museum.mw","net.mw","org.mw","mx","com.mx","org.mx","gob.mx","edu.mx","net.mx","my","com.my","net.my","org.my","gov.my","edu.my","mil.my","name.my","mz","ac.mz","adv.mz","co.mz","edu.mz","gov.mz","mil.mz","net.mz","org.mz","na","info.na","pro.na","name.na","school.na","or.na","dr.na","us.na","mx.na","ca.na","in.na","cc.na","tv.na","ws.na","mobi.na","co.na","com.na","org.na","name","nc","asso.nc","nom.nc","ne","net","nf","com.nf","net.nf","per.nf","rec.nf","web.nf","arts.nf","firm.nf","info.nf","other.nf","store.nf","ng","com.ng","edu.ng","gov.ng","i.ng","mil.ng","mobi.ng","name.ng","net.ng","org.ng","sch.ng","ni","ac.ni","biz.ni","co.ni","com.ni","edu.ni","gob.ni","in.ni","info.ni","int.ni","mil.ni","net.ni","nom.ni","org.ni","web.ni","nl","bv.nl","no","fhs.no","vgs.no","fylkesbibl.no","folkebibl.no","museum.no","idrett.no","priv.no","mil.no","stat.no","dep.no","kommune.no","herad.no","aa.no","ah.no","bu.no","fm.no","hl.no","hm.no","jan-mayen.no","mr.no","nl.no","nt.no","of.no","ol.no","oslo.no","rl.no","sf.no","st.no","svalbard.no","tm.no","tr.no","va.no","vf.no","gs.aa.no","gs.ah.no","gs.bu.no","gs.fm.no","gs.hl.no","gs.hm.no","gs.jan-mayen.no","gs.mr.no","gs.nl.no","gs.nt.no","gs.of.no","gs.ol.no","gs.oslo.no","gs.rl.no","gs.sf.no","gs.st.no","gs.svalbard.no","gs.tm.no","gs.tr.no","gs.va.no","gs.vf.no","akrehamn.no","åkrehamn.no","algard.no","ålgård.no","arna.no","brumunddal.no","bryne.no","bronnoysund.no","brønnøysund.no","drobak.no","drøbak.no","egersund.no","fetsund.no","floro.no","florø.no","fredrikstad.no","hokksund.no","honefoss.no","hønefoss.no","jessheim.no","jorpeland.no","jørpeland.no","kirkenes.no","kopervik.no","krokstadelva.no","langevag.no","langevåg.no","leirvik.no","mjondalen.no","mjøndalen.no","mo-i-rana.no","mosjoen.no","mosjøen.no","nesoddtangen.no","orkanger.no","osoyro.no","osøyro.no","raholt.no","råholt.no","sandnessjoen.no","sandnessjøen.no","skedsmokorset.no","slattum.no","spjelkavik.no","stathelle.no","stavern.no","stjordalshalsen.no","stjørdalshalsen.no","tananger.no","tranby.no","vossevangen.no","afjord.no","åfjord.no","agdenes.no","al.no","ål.no","alesund.no","ålesund.no","alstahaug.no","alta.no","áltá.no","alaheadju.no","álaheadju.no","alvdal.no","amli.no","åmli.no","amot.no","åmot.no","andebu.no","andoy.no","andøy.no","andasuolo.no","ardal.no","årdal.no","aremark.no","arendal.no","ås.no","aseral.no","åseral.no","asker.no","askim.no","askvoll.no","askoy.no","askøy.no","asnes.no","åsnes.no","audnedaln.no","aukra.no","aure.no","aurland.no","aurskog-holand.no","aurskog-høland.no","austevoll.no","austrheim.no","averoy.no","averøy.no","balestrand.no","ballangen.no","balat.no","bálát.no","balsfjord.no","bahccavuotna.no","báhccavuotna.no","bamble.no","bardu.no","beardu.no","beiarn.no","bajddar.no","bájddar.no","baidar.no","báidár.no","berg.no","bergen.no","berlevag.no","berlevåg.no","bearalvahki.no","bearalváhki.no","bindal.no","birkenes.no","bjarkoy.no","bjarkøy.no","bjerkreim.no","bjugn.no","bodo.no","bodø.no","badaddja.no","bådåddjå.no","budejju.no","bokn.no","bremanger.no","bronnoy.no","brønnøy.no","bygland.no","bykle.no","barum.no","bærum.no","bo.telemark.no","bø.telemark.no","bo.nordland.no","bø.nordland.no","bievat.no","bievát.no","bomlo.no","bømlo.no","batsfjord.no","båtsfjord.no","bahcavuotna.no","báhcavuotna.no","dovre.no","drammen.no","drangedal.no","dyroy.no","dyrøy.no","donna.no","dønna.no","eid.no","eidfjord.no","eidsberg.no","eidskog.no","eidsvoll.no","eigersund.no","elverum.no","enebakk.no","engerdal.no","etne.no","etnedal.no","evenes.no","evenassi.no","evenášši.no","evje-og-hornnes.no","farsund.no","fauske.no","fuossko.no","fuoisku.no","fedje.no","fet.no","finnoy.no","finnøy.no","fitjar.no","fjaler.no","fjell.no","flakstad.no","flatanger.no","flekkefjord.no","flesberg.no","flora.no","fla.no","flå.no","folldal.no","forsand.no","fosnes.no","frei.no","frogn.no","froland.no","frosta.no","frana.no","fræna.no","froya.no","frøya.no","fusa.no","fyresdal.no","forde.no","førde.no","gamvik.no","gangaviika.no","gáŋgaviika.no","gaular.no","gausdal.no","gildeskal.no","gildeskål.no","giske.no","gjemnes.no","gjerdrum.no","gjerstad.no","gjesdal.no","gjovik.no","gjøvik.no","gloppen.no","gol.no","gran.no","grane.no","granvin.no","gratangen.no","grimstad.no","grong.no","kraanghke.no","kråanghke.no","grue.no","gulen.no","hadsel.no","halden.no","halsa.no","hamar.no","hamaroy.no","habmer.no","hábmer.no","hapmir.no","hápmir.no","hammerfest.no","hammarfeasta.no","hámmárfeasta.no","haram.no","hareid.no","harstad.no","hasvik.no","aknoluokta.no","ákŋoluokta.no","hattfjelldal.no","aarborte.no","haugesund.no","hemne.no","hemnes.no","hemsedal.no","heroy.more-og-romsdal.no","herøy.møre-og-romsdal.no","heroy.nordland.no","herøy.nordland.no","hitra.no","hjartdal.no","hjelmeland.no","hobol.no","hobøl.no","hof.no","hol.no","hole.no","holmestrand.no","holtalen.no","holtålen.no","hornindal.no","horten.no","hurdal.no","hurum.no","hvaler.no","hyllestad.no","hagebostad.no","hægebostad.no","hoyanger.no","høyanger.no","hoylandet.no","høylandet.no","ha.no","hå.no","ibestad.no","inderoy.no","inderøy.no","iveland.no","jevnaker.no","jondal.no","jolster.no","jølster.no","karasjok.no","karasjohka.no","kárášjohka.no","karlsoy.no","galsa.no","gálsá.no","karmoy.no","karmøy.no","kautokeino.no","guovdageaidnu.no","klepp.no","klabu.no","klæbu.no","kongsberg.no","kongsvinger.no","kragero.no","kragerø.no","kristiansand.no","kristiansund.no","krodsherad.no","krødsherad.no","kvalsund.no","rahkkeravju.no","ráhkkerávju.no","kvam.no","kvinesdal.no","kvinnherad.no","kviteseid.no","kvitsoy.no","kvitsøy.no","kvafjord.no","kvæfjord.no","giehtavuoatna.no","kvanangen.no","kvænangen.no","navuotna.no","návuotna.no","kafjord.no","kåfjord.no","gaivuotna.no","gáivuotna.no","larvik.no","lavangen.no","lavagis.no","loabat.no","loabát.no","lebesby.no","davvesiida.no","leikanger.no","leirfjord.no","leka.no","leksvik.no","lenvik.no","leangaviika.no","leaŋgaviika.no","lesja.no","levanger.no","lier.no","lierne.no","lillehammer.no","lillesand.no","lindesnes.no","lindas.no","lindås.no","lom.no","loppa.no","lahppi.no","láhppi.no","lund.no","lunner.no","luroy.no","lurøy.no","luster.no","lyngdal.no","lyngen.no","ivgu.no","lardal.no","lerdal.no","lærdal.no","lodingen.no","lødingen.no","lorenskog.no","lørenskog.no","loten.no","løten.no","malvik.no","masoy.no","måsøy.no","muosat.no","muosát.no","mandal.no","marker.no","marnardal.no","masfjorden.no","meland.no","meldal.no","melhus.no","meloy.no","meløy.no","meraker.no","meråker.no","moareke.no","moåreke.no","midsund.no","midtre-gauldal.no","modalen.no","modum.no","molde.no","moskenes.no","moss.no","mosvik.no","malselv.no","målselv.no","malatvuopmi.no","málatvuopmi.no","namdalseid.no","aejrie.no","namsos.no","namsskogan.no","naamesjevuemie.no","nååmesjevuemie.no","laakesvuemie.no","nannestad.no","narvik.no","narviika.no","naustdal.no","nedre-eiker.no","nes.akershus.no","nes.buskerud.no","nesna.no","nesodden.no","nesseby.no","unjarga.no","unjárga.no","nesset.no","nissedal.no","nittedal.no","nord-aurdal.no","nord-fron.no","nord-odal.no","norddal.no","nordkapp.no","davvenjarga.no","davvenjárga.no","nordre-land.no","nordreisa.no","raisa.no","ráisa.no","nore-og-uvdal.no","notodden.no","naroy.no","nærøy.no","notteroy.no","nøtterøy.no","odda.no","oksnes.no","øksnes.no","oppdal.no","oppegard.no","oppegård.no","orkdal.no","orland.no","ørland.no","orskog.no","ørskog.no","orsta.no","ørsta.no","os.hedmark.no","os.hordaland.no","osen.no","osteroy.no","osterøy.no","ostre-toten.no","østre-toten.no","overhalla.no","ovre-eiker.no","øvre-eiker.no","oyer.no","øyer.no","oygarden.no","øygarden.no","oystre-slidre.no","øystre-slidre.no","porsanger.no","porsangu.no","porsáŋgu.no","porsgrunn.no","radoy.no","radøy.no","rakkestad.no","rana.no","ruovat.no","randaberg.no","rauma.no","rendalen.no","rennebu.no","rennesoy.no","rennesøy.no","rindal.no","ringebu.no","ringerike.no","ringsaker.no","rissa.no","risor.no","risør.no","roan.no","rollag.no","rygge.no","ralingen.no","rælingen.no","rodoy.no","rødøy.no","romskog.no","rømskog.no","roros.no","røros.no","rost.no","røst.no","royken.no","røyken.no","royrvik.no","røyrvik.no","rade.no","råde.no","salangen.no","siellak.no","saltdal.no","salat.no","sálát.no","sálat.no","samnanger.no","sande.more-og-romsdal.no","sande.møre-og-romsdal.no","sande.vestfold.no","sandefjord.no","sandnes.no","sandoy.no","sandøy.no","sarpsborg.no","sauda.no","sauherad.no","sel.no","selbu.no","selje.no","seljord.no","sigdal.no","siljan.no","sirdal.no","skaun.no","skedsmo.no","ski.no","skien.no","skiptvet.no","skjervoy.no","skjervøy.no","skierva.no","skiervá.no","skjak.no","skjåk.no","skodje.no","skanland.no","skånland.no","skanit.no","skánit.no","smola.no","smøla.no","snillfjord.no","snasa.no","snåsa.no","snoasa.no","snaase.no","snåase.no","sogndal.no","sokndal.no","sola.no","solund.no","songdalen.no","sortland.no","spydeberg.no","stange.no","stavanger.no","steigen.no","steinkjer.no","stjordal.no","stjørdal.no","stokke.no","stor-elvdal.no","stord.no","stordal.no","storfjord.no","omasvuotna.no","strand.no","stranda.no","stryn.no","sula.no","suldal.no","sund.no","sunndal.no","surnadal.no","sveio.no","svelvik.no","sykkylven.no","sogne.no","søgne.no","somna.no","sømna.no","sondre-land.no","søndre-land.no","sor-aurdal.no","sør-aurdal.no","sor-fron.no","sør-fron.no","sor-odal.no","sør-odal.no","sor-varanger.no","sør-varanger.no","matta-varjjat.no","mátta-várjjat.no","sorfold.no","sørfold.no","sorreisa.no","sørreisa.no","sorum.no","sørum.no","tana.no","deatnu.no","time.no","tingvoll.no","tinn.no","tjeldsund.no","dielddanuorri.no","tjome.no","tjøme.no","tokke.no","tolga.no","torsken.no","tranoy.no","tranøy.no","tromso.no","tromsø.no","tromsa.no","romsa.no","trondheim.no","troandin.no","trysil.no","trana.no","træna.no","trogstad.no","trøgstad.no","tvedestrand.no","tydal.no","tynset.no","tysfjord.no","divtasvuodna.no","divttasvuotna.no","tysnes.no","tysvar.no","tysvær.no","tonsberg.no","tønsberg.no","ullensaker.no","ullensvang.no","ulvik.no","utsira.no","vadso.no","vadsø.no","cahcesuolo.no","čáhcesuolo.no","vaksdal.no","valle.no","vang.no","vanylven.no","vardo.no","vardø.no","varggat.no","várggát.no","vefsn.no","vaapste.no","vega.no","vegarshei.no","vegårshei.no","vennesla.no","verdal.no","verran.no","vestby.no","vestnes.no","vestre-slidre.no","vestre-toten.no","vestvagoy.no","vestvågøy.no","vevelstad.no","vik.no","vikna.no","vindafjord.no","volda.no","voss.no","varoy.no","værøy.no","vagan.no","vågan.no","voagat.no","vagsoy.no","vågsøy.no","vaga.no","vågå.no","valer.ostfold.no","våler.østfold.no","valer.hedmark.no","våler.hedmark.no","*.np","nr","biz.nr","info.nr","gov.nr","edu.nr","org.nr","net.nr","com.nr","nu","nz","ac.nz","co.nz","cri.nz","geek.nz","gen.nz","govt.nz","health.nz","iwi.nz","kiwi.nz","maori.nz","mil.nz","māori.nz","net.nz","org.nz","parliament.nz","school.nz","om","co.om","com.om","edu.om","gov.om","med.om","museum.om","net.om","org.om","pro.om","onion","org","pa","ac.pa","gob.pa","com.pa","org.pa","sld.pa","edu.pa","net.pa","ing.pa","abo.pa","med.pa","nom.pa","pe","edu.pe","gob.pe","nom.pe","mil.pe","org.pe","com.pe","net.pe","pf","com.pf","org.pf","edu.pf","*.pg","ph","com.ph","net.ph","org.ph","gov.ph","edu.ph","ngo.ph","mil.ph","i.ph","pk","com.pk","net.pk","edu.pk","org.pk","fam.pk","biz.pk","web.pk","gov.pk","gob.pk","gok.pk","gon.pk","gop.pk","gos.pk","info.pk","pl","com.pl","net.pl","org.pl","aid.pl","agro.pl","atm.pl","auto.pl","biz.pl","edu.pl","gmina.pl","gsm.pl","info.pl","mail.pl","miasta.pl","media.pl","mil.pl","nieruchomosci.pl","nom.pl","pc.pl","powiat.pl","priv.pl","realestate.pl","rel.pl","sex.pl","shop.pl","sklep.pl","sos.pl","szkola.pl","targi.pl","tm.pl","tourism.pl","travel.pl","turystyka.pl","gov.pl","ap.gov.pl","ic.gov.pl","is.gov.pl","us.gov.pl","kmpsp.gov.pl","kppsp.gov.pl","kwpsp.gov.pl","psp.gov.pl","wskr.gov.pl","kwp.gov.pl","mw.gov.pl","ug.gov.pl","um.gov.pl","umig.gov.pl","ugim.gov.pl","upow.gov.pl","uw.gov.pl","starostwo.gov.pl","pa.gov.pl","po.gov.pl","psse.gov.pl","pup.gov.pl","rzgw.gov.pl","sa.gov.pl","so.gov.pl","sr.gov.pl","wsa.gov.pl","sko.gov.pl","uzs.gov.pl","wiih.gov.pl","winb.gov.pl","pinb.gov.pl","wios.gov.pl","witd.gov.pl","wzmiuw.gov.pl","piw.gov.pl","wiw.gov.pl","griw.gov.pl","wif.gov.pl","oum.gov.pl","sdn.gov.pl","zp.gov.pl","uppo.gov.pl","mup.gov.pl","wuoz.gov.pl","konsulat.gov.pl","oirm.gov.pl","augustow.pl","babia-gora.pl","bedzin.pl","beskidy.pl","bialowieza.pl","bialystok.pl","bielawa.pl","bieszczady.pl","boleslawiec.pl","bydgoszcz.pl","bytom.pl","cieszyn.pl","czeladz.pl","czest.pl","dlugoleka.pl","elblag.pl","elk.pl","glogow.pl","gniezno.pl","gorlice.pl","grajewo.pl","ilawa.pl","jaworzno.pl","jelenia-gora.pl","jgora.pl","kalisz.pl","kazimierz-dolny.pl","karpacz.pl","kartuzy.pl","kaszuby.pl","katowice.pl","kepno.pl","ketrzyn.pl","klodzko.pl","kobierzyce.pl","kolobrzeg.pl","konin.pl","konskowola.pl","kutno.pl","lapy.pl","lebork.pl","legnica.pl","lezajsk.pl","limanowa.pl","lomza.pl","lowicz.pl","lubin.pl","lukow.pl","malbork.pl","malopolska.pl","mazowsze.pl","mazury.pl","mielec.pl","mielno.pl","mragowo.pl","naklo.pl","nowaruda.pl","nysa.pl","olawa.pl","olecko.pl","olkusz.pl","olsztyn.pl","opoczno.pl","opole.pl","ostroda.pl","ostroleka.pl","ostrowiec.pl","ostrowwlkp.pl","pila.pl","pisz.pl","podhale.pl","podlasie.pl","polkowice.pl","pomorze.pl","pomorskie.pl","prochowice.pl","pruszkow.pl","przeworsk.pl","pulawy.pl","radom.pl","rawa-maz.pl","rybnik.pl","rzeszow.pl","sanok.pl","sejny.pl","slask.pl","slupsk.pl","sosnowiec.pl","stalowa-wola.pl","skoczow.pl","starachowice.pl","stargard.pl","suwalki.pl","swidnica.pl","swiebodzin.pl","swinoujscie.pl","szczecin.pl","szczytno.pl","tarnobrzeg.pl","tgory.pl","turek.pl","tychy.pl","ustka.pl","walbrzych.pl","warmia.pl","warszawa.pl","waw.pl","wegrow.pl","wielun.pl","wlocl.pl","wloclawek.pl","wodzislaw.pl","wolomin.pl","wroclaw.pl","zachpomor.pl","zagan.pl","zarow.pl","zgora.pl","zgorzelec.pl","pm","pn","gov.pn","co.pn","org.pn","edu.pn","net.pn","post","pr","com.pr","net.pr","org.pr","gov.pr","edu.pr","isla.pr","pro.pr","biz.pr","info.pr","name.pr","est.pr","prof.pr","ac.pr","pro","aaa.pro","aca.pro","acct.pro","avocat.pro","bar.pro","cpa.pro","eng.pro","jur.pro","law.pro","med.pro","recht.pro","ps","edu.ps","gov.ps","sec.ps","plo.ps","com.ps","org.ps","net.ps","pt","net.pt","gov.pt","org.pt","edu.pt","int.pt","publ.pt","com.pt","nome.pt","pw","co.pw","ne.pw","or.pw","ed.pw","go.pw","belau.pw","py","com.py","coop.py","edu.py","gov.py","mil.py","net.py","org.py","qa","com.qa","edu.qa","gov.qa","mil.qa","name.qa","net.qa","org.qa","sch.qa","re","asso.re","com.re","nom.re","ro","arts.ro","com.ro","firm.ro","info.ro","nom.ro","nt.ro","org.ro","rec.ro","store.ro","tm.ro","www.ro","rs","ac.rs","co.rs","edu.rs","gov.rs","in.rs","org.rs","ru","ac.ru","edu.ru","gov.ru","int.ru","mil.ru","test.ru","rw","gov.rw","net.rw","edu.rw","ac.rw","com.rw","co.rw","int.rw","mil.rw","gouv.rw","sa","com.sa","net.sa","org.sa","gov.sa","med.sa","pub.sa","edu.sa","sch.sa","sb","com.sb","edu.sb","gov.sb","net.sb","org.sb","sc","com.sc","gov.sc","net.sc","org.sc","edu.sc","sd","com.sd","net.sd","org.sd","edu.sd","med.sd","tv.sd","gov.sd","info.sd","se","a.se","ac.se","b.se","bd.se","brand.se","c.se","d.se","e.se","f.se","fh.se","fhsk.se","fhv.se","g.se","h.se","i.se","k.se","komforb.se","kommunalforbund.se","komvux.se","l.se","lanbib.se","m.se","n.se","naturbruksgymn.se","o.se","org.se","p.se","parti.se","pp.se","press.se","r.se","s.se","t.se","tm.se","u.se","w.se","x.se","y.se","z.se","sg","com.sg","net.sg","org.sg","gov.sg","edu.sg","per.sg","sh","com.sh","net.sh","gov.sh","org.sh","mil.sh","si","sj","sk","sl","com.sl","net.sl","edu.sl","gov.sl","org.sl","sm","sn","art.sn","com.sn","edu.sn","gouv.sn","org.sn","perso.sn","univ.sn","so","com.so","net.so","org.so","sr","st","co.st","com.st","consulado.st","edu.st","embaixada.st","gov.st","mil.st","net.st","org.st","principe.st","saotome.st","store.st","su","sv","com.sv","edu.sv","gob.sv","org.sv","red.sv","sx","gov.sx","sy","edu.sy","gov.sy","net.sy","mil.sy","com.sy","org.sy","sz","co.sz","ac.sz","org.sz","tc","td","tel","tf","tg","th","ac.th","co.th","go.th","in.th","mi.th","net.th","or.th","tj","ac.tj","biz.tj","co.tj","com.tj","edu.tj","go.tj","gov.tj","int.tj","mil.tj","name.tj","net.tj","nic.tj","org.tj","test.tj","web.tj","tk","tl","gov.tl","tm","com.tm","co.tm","org.tm","net.tm","nom.tm","gov.tm","mil.tm","edu.tm","tn","com.tn","ens.tn","fin.tn","gov.tn","ind.tn","intl.tn","nat.tn","net.tn","org.tn","info.tn","perso.tn","tourism.tn","edunet.tn","rnrt.tn","rns.tn","rnu.tn","mincom.tn","agrinet.tn","defense.tn","turen.tn","to","com.to","gov.to","net.to","org.to","edu.to","mil.to","tr","com.tr","info.tr","biz.tr","net.tr","org.tr","web.tr","gen.tr","tv.tr","av.tr","dr.tr","bbs.tr","name.tr","tel.tr","gov.tr","bel.tr","pol.tr","mil.tr","k12.tr","edu.tr","kep.tr","nc.tr","gov.nc.tr","tt","co.tt","com.tt","org.tt","net.tt","biz.tt","info.tt","pro.tt","int.tt","coop.tt","jobs.tt","mobi.tt","travel.tt","museum.tt","aero.tt","name.tt","gov.tt","edu.tt","tv","tw","edu.tw","gov.tw","mil.tw","com.tw","net.tw","org.tw","idv.tw","game.tw","ebiz.tw","club.tw","網路.tw","組織.tw","商業.tw","tz","ac.tz","co.tz","go.tz","hotel.tz","info.tz","me.tz","mil.tz","mobi.tz","ne.tz","or.tz","sc.tz","tv.tz","ua","com.ua","edu.ua","gov.ua","in.ua","net.ua","org.ua","cherkassy.ua","cherkasy.ua","chernigov.ua","chernihiv.ua","chernivtsi.ua","chernovtsy.ua","ck.ua","cn.ua","cr.ua","crimea.ua","cv.ua","dn.ua","dnepropetrovsk.ua","dnipropetrovsk.ua","dominic.ua","donetsk.ua","dp.ua","if.ua","ivano-frankivsk.ua","kh.ua","kharkiv.ua","kharkov.ua","kherson.ua","khmelnitskiy.ua","khmelnytskyi.ua","kiev.ua","kirovograd.ua","km.ua","kr.ua","krym.ua","ks.ua","kv.ua","kyiv.ua","lg.ua","lt.ua","lugansk.ua","lutsk.ua","lv.ua","lviv.ua","mk.ua","mykolaiv.ua","nikolaev.ua","od.ua","odesa.ua","odessa.ua","pl.ua","poltava.ua","rivne.ua","rovno.ua","rv.ua","sb.ua","sebastopol.ua","sevastopol.ua","sm.ua","sumy.ua","te.ua","ternopil.ua","uz.ua","uzhgorod.ua","vinnica.ua","vinnytsia.ua","vn.ua","volyn.ua","yalta.ua","zaporizhzhe.ua","zaporizhzhia.ua","zhitomir.ua","zhytomyr.ua","zp.ua","zt.ua","ug","co.ug","or.ug","ac.ug","sc.ug","go.ug","ne.ug","com.ug","org.ug","uk","ac.uk","co.uk","gov.uk","ltd.uk","me.uk","net.uk","nhs.uk","org.uk","plc.uk","police.uk","*.sch.uk","us","dni.us","fed.us","isa.us","kids.us","nsn.us","ak.us","al.us","ar.us","as.us","az.us","ca.us","co.us","ct.us","dc.us","de.us","fl.us","ga.us","gu.us","hi.us","ia.us","id.us","il.us","in.us","ks.us","ky.us","la.us","ma.us","md.us","me.us","mi.us","mn.us","mo.us","ms.us","mt.us","nc.us","nd.us","ne.us","nh.us","nj.us","nm.us","nv.us","ny.us","oh.us","ok.us","or.us","pa.us","pr.us","ri.us","sc.us","sd.us","tn.us","tx.us","ut.us","vi.us","vt.us","va.us","wa.us","wi.us","wv.us","wy.us","k12.ak.us","k12.al.us","k12.ar.us","k12.as.us","k12.az.us","k12.ca.us","k12.co.us","k12.ct.us","k12.dc.us","k12.de.us","k12.fl.us","k12.ga.us","k12.gu.us","k12.ia.us","k12.id.us","k12.il.us","k12.in.us","k12.ks.us","k12.ky.us","k12.la.us","k12.ma.us","k12.md.us","k12.me.us","k12.mi.us","k12.mn.us","k12.mo.us","k12.ms.us","k12.mt.us","k12.nc.us","k12.ne.us","k12.nh.us","k12.nj.us","k12.nm.us","k12.nv.us","k12.ny.us","k12.oh.us","k12.ok.us","k12.or.us","k12.pa.us","k12.pr.us","k12.ri.us","k12.sc.us","k12.tn.us","k12.tx.us","k12.ut.us","k12.vi.us","k12.vt.us","k12.va.us","k12.wa.us","k12.wi.us","k12.wy.us","cc.ak.us","cc.al.us","cc.ar.us","cc.as.us","cc.az.us","cc.ca.us","cc.co.us","cc.ct.us","cc.dc.us","cc.de.us","cc.fl.us","cc.ga.us","cc.gu.us","cc.hi.us","cc.ia.us","cc.id.us","cc.il.us","cc.in.us","cc.ks.us","cc.ky.us","cc.la.us","cc.ma.us","cc.md.us","cc.me.us","cc.mi.us","cc.mn.us","cc.mo.us","cc.ms.us","cc.mt.us","cc.nc.us","cc.nd.us","cc.ne.us","cc.nh.us","cc.nj.us","cc.nm.us","cc.nv.us","cc.ny.us","cc.oh.us","cc.ok.us","cc.or.us","cc.pa.us","cc.pr.us","cc.ri.us","cc.sc.us","cc.sd.us","cc.tn.us","cc.tx.us","cc.ut.us","cc.vi.us","cc.vt.us","cc.va.us","cc.wa.us","cc.wi.us","cc.wv.us","cc.wy.us","lib.ak.us","lib.al.us","lib.ar.us","lib.as.us","lib.az.us","lib.ca.us","lib.co.us","lib.ct.us","lib.dc.us","lib.fl.us","lib.ga.us","lib.gu.us","lib.hi.us","lib.ia.us","lib.id.us","lib.il.us","lib.in.us","lib.ks.us","lib.ky.us","lib.la.us","lib.ma.us","lib.md.us","lib.me.us","lib.mi.us","lib.mn.us","lib.mo.us","lib.ms.us","lib.mt.us","lib.nc.us","lib.nd.us","lib.ne.us","lib.nh.us","lib.nj.us","lib.nm.us","lib.nv.us","lib.ny.us","lib.oh.us","lib.ok.us","lib.or.us","lib.pa.us","lib.pr.us","lib.ri.us","lib.sc.us","lib.sd.us","lib.tn.us","lib.tx.us","lib.ut.us","lib.vi.us","lib.vt.us","lib.va.us","lib.wa.us","lib.wi.us","lib.wy.us","pvt.k12.ma.us","chtr.k12.ma.us","paroch.k12.ma.us","ann-arbor.mi.us","cog.mi.us","dst.mi.us","eaton.mi.us","gen.mi.us","mus.mi.us","tec.mi.us","washtenaw.mi.us","uy","com.uy","edu.uy","gub.uy","mil.uy","net.uy","org.uy","uz","co.uz","com.uz","net.uz","org.uz","va","vc","com.vc","net.vc","org.vc","gov.vc","mil.vc","edu.vc","ve","arts.ve","co.ve","com.ve","e12.ve","edu.ve","firm.ve","gob.ve","gov.ve","info.ve","int.ve","mil.ve","net.ve","org.ve","rec.ve","store.ve","tec.ve","web.ve","vg","vi","co.vi","com.vi","k12.vi","net.vi","org.vi","vn","com.vn","net.vn","org.vn","edu.vn","gov.vn","int.vn","ac.vn","biz.vn","info.vn","name.vn","pro.vn","health.vn","vu","com.vu","edu.vu","net.vu","org.vu","wf","ws","com.ws","net.ws","org.ws","gov.ws","edu.ws","yt","امارات","հայ","বাংলা","бг","бел","中国","中國","الجزائر","مصر","ею","გე","ελ","香港","公司.香港","教育.香港","政府.香港","個人.香港","網絡.香港","組織.香港","ಭಾರತ","ଭାରତ","ভাৰত","भारतम्","भारोत","ڀارت","ഭാരതം","भारत","بارت","بھارت","భారత్","ભારત","ਭਾਰਤ","ভারত","இந்தியா","ایران","ايران","عراق","الاردن","한국","қаз","ලංකා","இலங்கை","المغرب","мкд","мон","澳門","澳门","مليسيا","عمان","پاکستان","پاكستان","فلسطين","срб","пр.срб","орг.срб","обр.срб","од.срб","упр.срб","ак.срб","рф","قطر","السعودية","السعودیة","السعودیۃ","السعوديه","سودان","新加坡","சிங்கப்பூர்","سورية","سوريا","ไทย","ศึกษา.ไทย","ธุรกิจ.ไทย","รัฐบาล.ไทย","ทหาร.ไทย","เน็ต.ไทย","องค์กร.ไทย","تونس","台灣","台湾","臺灣","укр","اليمن","xxx","*.ye","ac.za","agric.za","alt.za","co.za","edu.za","gov.za","grondar.za","law.za","mil.za","net.za","ngo.za","nis.za","nom.za","org.za","school.za","tm.za","web.za","zm","ac.zm","biz.zm","co.zm","com.zm","edu.zm","gov.zm","info.zm","mil.zm","net.zm","org.zm","sch.zm","zw","ac.zw","co.zw","gov.zw","mil.zw","org.zw","aaa","aarp","abarth","abb","abbott","abbvie","abc","able","abogado","abudhabi","academy","accenture","accountant","accountants","aco","active","actor","adac","ads","adult","aeg","aetna","afamilycompany","afl","africa","agakhan","agency","aig","aigo","airbus","airforce","airtel","akdn","alfaromeo","alibaba","alipay","allfinanz","allstate","ally","alsace","alstom","americanexpress","americanfamily","amex","amfam","amica","amsterdam","analytics","android","anquan","anz","aol","apartments","app","apple","aquarelle","arab","aramco","archi","army","art","arte","asda","associates","athleta","attorney","auction","audi","audible","audio","auspost","author","auto","autos","avianca","aws","axa","azure","baby","baidu","banamex","bananarepublic","band","bank","bar","barcelona","barclaycard","barclays","barefoot","bargains","baseball","basketball","bauhaus","bayern","bbc","bbt","bbva","bcg","bcn","beats","beauty","beer","bentley","berlin","best","bestbuy","bet","bharti","bible","bid","bike","bing","bingo","bio","black","blackfriday","blanco","blockbuster","blog","bloomberg","blue","bms","bmw","bnl","bnpparibas","boats","boehringer","bofa","bom","bond","boo","book","booking","bosch","bostik","boston","bot","boutique","box","bradesco","bridgestone","broadway","broker","brother","brussels","budapest","bugatti","build","builders","business","buy","buzz","bzh","cab","cafe","cal","call","calvinklein","cam","camera","camp","cancerresearch","canon","capetown","capital","capitalone","car","caravan","cards","care","career","careers","cars","cartier","casa","case","caseih","cash","casino","catering","catholic","cba","cbn","cbre","cbs","ceb","center","ceo","cern","cfa","cfd","chanel","channel","charity","chase","chat","cheap","chintai","christmas","chrome","chrysler","church","cipriani","circle","cisco","citadel","citi","citic","city","cityeats","claims","cleaning","click","clinic","clinique","clothing","cloud","club","clubmed","coach","codes","coffee","college","cologne","comcast","commbank","community","company","compare","computer","comsec","condos","construction","consulting","contact","contractors","cooking","cookingchannel","cool","corsica","country","coupon","coupons","courses","credit","creditcard","creditunion","cricket","crown","crs","cruise","cruises","csc","cuisinella","cymru","cyou","dabur","dad","dance","data","date","dating","datsun","day","dclk","dds","deal","dealer","deals","degree","delivery","dell","deloitte","delta","democrat","dental","dentist","desi","design","dev","dhl","diamonds","diet","digital","direct","directory","discount","discover","dish","diy","dnp","docs","doctor","dodge","dog","doha","domains","dot","download","drive","dtv","dubai","duck","dunlop","duns","dupont","durban","dvag","dvr","earth","eat","eco","edeka","education","email","emerck","energy","engineer","engineering","enterprises","epost","epson","equipment","ericsson","erni","esq","estate","esurance","etisalat","eurovision","eus","events","everbank","exchange","expert","exposed","express","extraspace","fage","fail","fairwinds","faith","family","fan","fans","farm","farmers","fashion","fast","fedex","feedback","ferrari","ferrero","fiat","fidelity","fido","film","final","finance","financial","fire","firestone","firmdale","fish","fishing","fit","fitness","flickr","flights","flir","florist","flowers","fly","foo","food","foodnetwork","football","ford","forex","forsale","forum","foundation","fox","free","fresenius","frl","frogans","frontdoor","frontier","ftr","fujitsu","fujixerox","fun","fund","furniture","futbol","fyi","gal","gallery","gallo","gallup","game","games","gap","garden","gbiz","gdn","gea","gent","genting","george","ggee","gift","gifts","gives","giving","glade","glass","gle","global","globo","gmail","gmbh","gmo","gmx","godaddy","gold","goldpoint","golf","goo","goodyear","goog","google","gop","got","grainger","graphics","gratis","green","gripe","grocery","group","guardian","gucci","guge","guide","guitars","guru","hair","hamburg","hangout","haus","hbo","hdfc","hdfcbank","health","healthcare","help","helsinki","here","hermes","hgtv","hiphop","hisamitsu","hitachi","hiv","hkt","hockey","holdings","holiday","homedepot","homegoods","homes","homesense","honda","honeywell","horse","hospital","host","hosting","hot","hoteles","hotels","hotmail","house","how","hsbc","hughes","hyatt","hyundai","ibm","icbc","ice","icu","ieee","ifm","ikano","imamat","imdb","immo","immobilien","inc","industries","infiniti","ing","ink","institute","insurance","insure","intel","international","intuit","investments","ipiranga","irish","iselect","ismaili","ist","istanbul","itau","itv","iveco","jaguar","java","jcb","jcp","jeep","jetzt","jewelry","jio","jll","jmp","jnj","joburg","jot","joy","jpmorgan","jprs","juegos","juniper","kaufen","kddi","kerryhotels","kerrylogistics","kerryproperties","kfh","kia","kim","kinder","kindle","kitchen","kiwi","koeln","komatsu","kosher","kpmg","kpn","krd","kred","kuokgroup","kyoto","lacaixa","ladbrokes","lamborghini","lamer","lancaster","lancia","lancome","land","landrover","lanxess","lasalle","lat","latino","latrobe","law","lawyer","lds","lease","leclerc","lefrak","legal","lego","lexus","lgbt","liaison","lidl","life","lifeinsurance","lifestyle","lighting","like","lilly","limited","limo","lincoln","linde","link","lipsy","live","living","lixil","llc","loan","loans","locker","locus","loft","lol","london","lotte","lotto","love","lpl","lplfinancial","ltd","ltda","lundbeck","lupin","luxe","luxury","macys","madrid","maif","maison","makeup","man","management","mango","map","market","marketing","markets","marriott","marshalls","maserati","mattel","mba","mckinsey","med","media","meet","melbourne","meme","memorial","men","menu","merckmsd","metlife","miami","microsoft","mini","mint","mit","mitsubishi","mlb","mls","mma","mobile","mobily","moda","moe","moi","mom","monash","money","monster","mopar","mormon","mortgage","moscow","moto","motorcycles","mov","movie","movistar","msd","mtn","mtr","mutual","nab","nadex","nagoya","nationwide","natura","navy","nba","nec","netbank","netflix","network","neustar","new","newholland","news","next","nextdirect","nexus","nfl","ngo","nhk","nico","nike","nikon","ninja","nissan","nissay","nokia","northwesternmutual","norton","now","nowruz","nowtv","nra","nrw","ntt","nyc","obi","observer","off","office","okinawa","olayan","olayangroup","oldnavy","ollo","omega","one","ong","onl","online","onyourside","ooo","open","oracle","orange","organic","origins","osaka","otsuka","ott","ovh","page","panasonic","paris","pars","partners","parts","party","passagens","pay","pccw","pet","pfizer","pharmacy","phd","philips","phone","photo","photography","photos","physio","piaget","pics","pictet","pictures","pid","pin","ping","pink","pioneer","pizza","place","play","playstation","plumbing","plus","pnc","pohl","poker","politie","porn","pramerica","praxi","press","prime","prod","productions","prof","progressive","promo","properties","property","protection","pru","prudential","pub","pwc","qpon","quebec","quest","qvc","racing","radio","raid","read","realestate","realtor","realty","recipes","red","redstone","redumbrella","rehab","reise","reisen","reit","reliance","ren","rent","rentals","repair","report","republican","rest","restaurant","review","reviews","rexroth","rich","richardli","ricoh","rightathome","ril","rio","rip","rmit","rocher","rocks","rodeo","rogers","room","rsvp","rugby","ruhr","run","rwe","ryukyu","saarland","safe","safety","sakura","sale","salon","samsclub","samsung","sandvik","sandvikcoromant","sanofi","sap","sarl","sas","save","saxo","sbi","sbs","sca","scb","schaeffler","schmidt","scholarships","school","schule","schwarz","science","scjohnson","scor","scot","search","seat","secure","security","seek","select","sener","services","ses","seven","sew","sex","sexy","sfr","shangrila","sharp","shaw","shell","shia","shiksha","shoes","shop","shopping","shouji","show","showtime","shriram","silk","sina","singles","site","ski","skin","sky","skype","sling","smart","smile","sncf","soccer","social","softbank","software","sohu","solar","solutions","song","sony","soy","space","spiegel","sport","spot","spreadbetting","srl","srt","stada","staples","star","starhub","statebank","statefarm","statoil","stc","stcgroup","stockholm","storage","store","stream","studio","study","style","sucks","supplies","supply","support","surf","surgery","suzuki","swatch","swiftcover","swiss","sydney","symantec","systems","tab","taipei","talk","taobao","target","tatamotors","tatar","tattoo","tax","taxi","tci","tdk","team","tech","technology","telefonica","temasek","tennis","teva","thd","theater","theatre","tiaa","tickets","tienda","tiffany","tips","tires","tirol","tjmaxx","tjx","tkmaxx","tmall","today","tokyo","tools","top","toray","toshiba","total","tours","town","toyota","toys","trade","trading","training","travel","travelchannel","travelers","travelersinsurance","trust","trv","tube","tui","tunes","tushu","tvs","ubank","ubs","uconnect","unicom","university","uno","uol","ups","vacations","vana","vanguard","vegas","ventures","verisign","versicherung","vet","viajes","video","vig","viking","villas","vin","vip","virgin","visa","vision","vistaprint","viva","vivo","vlaanderen","vodka","volkswagen","volvo","vote","voting","voto","voyage","vuelos","wales","walmart","walter","wang","wanggou","warman","watch","watches","weather","weatherchannel","webcam","weber","website","wed","wedding","weibo","weir","whoswho","wien","wiki","williamhill","win","windows","wine","winners","wme","wolterskluwer","woodside","work","works","world","wow","wtc","wtf","xbox","xerox","xfinity","xihuan","xin","कॉम","セール","佛山","慈善","集团","在线","大众汽车","点看","คอม","八卦","موقع","公益","公司","香格里拉","网站","移动","我爱你","москва","католик","онлайн","сайт","联通","קום","时尚","微博","淡马锡","ファッション","орг","नेट","ストア","삼성","商标","商店","商城","дети","ポイント","新闻","工行","家電","كوم","中文网","中信","娱乐","谷歌","電訊盈科","购物","クラウド","通販","网店","संगठन","餐厅","网络","ком","诺基亚","食品","飞利浦","手表","手机","ارامكو","العليان","اتصالات","بازار","موبايلي","ابوظبي","كاثوليك","همراه","닷컴","政府","شبكة","بيتك","عرب","机构","组织机构","健康","招聘","рус","珠宝","大拿","みんな","グーグル","世界","書籍","网址","닷넷","コム","天主教","游戏","vermögensberater","vermögensberatung","企业","信息","嘉里大酒店","嘉里","广东","政务","xyz","yachts","yahoo","yamaxun","yandex","yodobashi","yoga","yokohama","you","youtube","yun","zappos","zara","zero","zip","zippo","zone","zuerich","cc.ua","inf.ua","ltd.ua","beep.pl","*.compute.estate","*.alces.network","alwaysdata.net","cloudfront.net","*.compute.amazonaws.com","*.compute-1.amazonaws.com","*.compute.amazonaws.com.cn","us-east-1.amazonaws.com","cn-north-1.eb.amazonaws.com.cn","cn-northwest-1.eb.amazonaws.com.cn","elasticbeanstalk.com","ap-northeast-1.elasticbeanstalk.com","ap-northeast-2.elasticbeanstalk.com","ap-northeast-3.elasticbeanstalk.com","ap-south-1.elasticbeanstalk.com","ap-southeast-1.elasticbeanstalk.com","ap-southeast-2.elasticbeanstalk.com","ca-central-1.elasticbeanstalk.com","eu-central-1.elasticbeanstalk.com","eu-west-1.elasticbeanstalk.com","eu-west-2.elasticbeanstalk.com","eu-west-3.elasticbeanstalk.com","sa-east-1.elasticbeanstalk.com","us-east-1.elasticbeanstalk.com","us-east-2.elasticbeanstalk.com","us-gov-west-1.elasticbeanstalk.com","us-west-1.elasticbeanstalk.com","us-west-2.elasticbeanstalk.com","*.elb.amazonaws.com","*.elb.amazonaws.com.cn","s3.amazonaws.com","s3-ap-northeast-1.amazonaws.com","s3-ap-northeast-2.amazonaws.com","s3-ap-south-1.amazonaws.com","s3-ap-southeast-1.amazonaws.com","s3-ap-southeast-2.amazonaws.com","s3-ca-central-1.amazonaws.com","s3-eu-central-1.amazonaws.com","s3-eu-west-1.amazonaws.com","s3-eu-west-2.amazonaws.com","s3-eu-west-3.amazonaws.com","s3-external-1.amazonaws.com","s3-fips-us-gov-west-1.amazonaws.com","s3-sa-east-1.amazonaws.com","s3-us-gov-west-1.amazonaws.com","s3-us-east-2.amazonaws.com","s3-us-west-1.amazonaws.com","s3-us-west-2.amazonaws.com","s3.ap-northeast-2.amazonaws.com","s3.ap-south-1.amazonaws.com","s3.cn-north-1.amazonaws.com.cn","s3.ca-central-1.amazonaws.com","s3.eu-central-1.amazonaws.com","s3.eu-west-2.amazonaws.com","s3.eu-west-3.amazonaws.com","s3.us-east-2.amazonaws.com","s3.dualstack.ap-northeast-1.amazonaws.com","s3.dualstack.ap-northeast-2.amazonaws.com","s3.dualstack.ap-south-1.amazonaws.com","s3.dualstack.ap-southeast-1.amazonaws.com","s3.dualstack.ap-southeast-2.amazonaws.com","s3.dualstack.ca-central-1.amazonaws.com","s3.dualstack.eu-central-1.amazonaws.com","s3.dualstack.eu-west-1.amazonaws.com","s3.dualstack.eu-west-2.amazonaws.com","s3.dualstack.eu-west-3.amazonaws.com","s3.dualstack.sa-east-1.amazonaws.com","s3.dualstack.us-east-1.amazonaws.com","s3.dualstack.us-east-2.amazonaws.com","s3-website-us-east-1.amazonaws.com","s3-website-us-west-1.amazonaws.com","s3-website-us-west-2.amazonaws.com","s3-website-ap-northeast-1.amazonaws.com","s3-website-ap-southeast-1.amazonaws.com","s3-website-ap-southeast-2.amazonaws.com","s3-website-eu-west-1.amazonaws.com","s3-website-sa-east-1.amazonaws.com","s3-website.ap-northeast-2.amazonaws.com","s3-website.ap-south-1.amazonaws.com","s3-website.ca-central-1.amazonaws.com","s3-website.eu-central-1.amazonaws.com","s3-website.eu-west-2.amazonaws.com","s3-website.eu-west-3.amazonaws.com","s3-website.us-east-2.amazonaws.com","t3l3p0rt.net","tele.amune.org","apigee.io","on-aptible.com","user.party.eus","pimienta.org","poivron.org","potager.org","sweetpepper.org","myasustor.com","myfritz.net","*.awdev.ca","*.advisor.ws","backplaneapp.io","betainabox.com","bnr.la","blackbaudcdn.net","boomla.net","boxfuse.io","square7.ch","bplaced.com","bplaced.de","square7.de","bplaced.net","square7.net","browsersafetymark.io","mycd.eu","ae.org","ar.com","br.com","cn.com","com.de","com.se","de.com","eu.com","gb.com","gb.net","hu.com","hu.net","jp.net","jpn.com","kr.com","mex.com","no.com","qc.com","ru.com","sa.com","se.net","uk.com","uk.net","us.com","uy.com","za.bz","za.com","africa.com","gr.com","in.net","us.org","co.com","c.la","certmgr.org","xenapponazure.com","virtueeldomein.nl","cleverapps.io","c66.me","cloud66.ws","jdevcloud.com","wpdevcloud.com","cloudaccess.host","freesite.host","cloudaccess.net","cloudcontrolled.com","cloudcontrolapp.com","co.ca","*.otap.co","co.cz","c.cdn77.org","cdn77-ssl.net","r.cdn77.net","rsc.cdn77.org","ssl.origin.cdn77-secure.org","cloudns.asia","cloudns.biz","cloudns.club","cloudns.cc","cloudns.eu","cloudns.in","cloudns.info","cloudns.org","cloudns.pro","cloudns.pw","cloudns.us","cloudeity.net","cnpy.gdn","co.nl","co.no","webhosting.be","hosting-cluster.nl","dyn.cosidns.de","dynamisches-dns.de","dnsupdater.de","internet-dns.de","l-o-g-i-n.de","dynamic-dns.info","feste-ip.net","knx-server.net","static-access.net","realm.cz","*.cryptonomic.net","cupcake.is","cyon.link","cyon.site","daplie.me","localhost.daplie.me","dattolocal.com","dattorelay.com","dattoweb.com","mydatto.com","dattolocal.net","mydatto.net","biz.dk","co.dk","firm.dk","reg.dk","store.dk","debian.net","dedyn.io","dnshome.de","drayddns.com","dreamhosters.com","mydrobo.com","drud.io","drud.us","duckdns.org","dy.fi","tunk.org","dyndns-at-home.com","dyndns-at-work.com","dyndns-blog.com","dyndns-free.com","dyndns-home.com","dyndns-ip.com","dyndns-mail.com","dyndns-office.com","dyndns-pics.com","dyndns-remote.com","dyndns-server.com","dyndns-web.com","dyndns-wiki.com","dyndns-work.com","dyndns.biz","dyndns.info","dyndns.org","dyndns.tv","at-band-camp.net","ath.cx","barrel-of-knowledge.info","barrell-of-knowledge.info","better-than.tv","blogdns.com","blogdns.net","blogdns.org","blogsite.org","boldlygoingnowhere.org","broke-it.net","buyshouses.net","cechire.com","dnsalias.com","dnsalias.net","dnsalias.org","dnsdojo.com","dnsdojo.net","dnsdojo.org","does-it.net","doesntexist.com","doesntexist.org","dontexist.com","dontexist.net","dontexist.org","doomdns.com","doomdns.org","dvrdns.org","dyn-o-saur.com","dynalias.com","dynalias.net","dynalias.org","dynathome.net","dyndns.ws","endofinternet.net","endofinternet.org","endoftheinternet.org","est-a-la-maison.com","est-a-la-masion.com","est-le-patron.com","est-mon-blogueur.com","for-better.biz","for-more.biz","for-our.info","for-some.biz","for-the.biz","forgot.her.name","forgot.his.name","from-ak.com","from-al.com","from-ar.com","from-az.net","from-ca.com","from-co.net","from-ct.com","from-dc.com","from-de.com","from-fl.com","from-ga.com","from-hi.com","from-ia.com","from-id.com","from-il.com","from-in.com","from-ks.com","from-ky.com","from-la.net","from-ma.com","from-md.com","from-me.org","from-mi.com","from-mn.com","from-mo.com","from-ms.com","from-mt.com","from-nc.com","from-nd.com","from-ne.com","from-nh.com","from-nj.com","from-nm.com","from-nv.com","from-ny.net","from-oh.com","from-ok.com","from-or.com","from-pa.com","from-pr.com","from-ri.com","from-sc.com","from-sd.com","from-tn.com","from-tx.com","from-ut.com","from-va.com","from-vt.com","from-wa.com","from-wi.com","from-wv.com","from-wy.com","ftpaccess.cc","fuettertdasnetz.de","game-host.org","game-server.cc","getmyip.com","gets-it.net","go.dyndns.org","gotdns.com","gotdns.org","groks-the.info","groks-this.info","ham-radio-op.net","here-for-more.info","hobby-site.com","hobby-site.org","home.dyndns.org","homedns.org","homeftp.net","homeftp.org","homeip.net","homelinux.com","homelinux.net","homelinux.org","homeunix.com","homeunix.net","homeunix.org","iamallama.com","in-the-band.net","is-a-anarchist.com","is-a-blogger.com","is-a-bookkeeper.com","is-a-bruinsfan.org","is-a-bulls-fan.com","is-a-candidate.org","is-a-caterer.com","is-a-celticsfan.org","is-a-chef.com","is-a-chef.net","is-a-chef.org","is-a-conservative.com","is-a-cpa.com","is-a-cubicle-slave.com","is-a-democrat.com","is-a-designer.com","is-a-doctor.com","is-a-financialadvisor.com","is-a-geek.com","is-a-geek.net","is-a-geek.org","is-a-green.com","is-a-guru.com","is-a-hard-worker.com","is-a-hunter.com","is-a-knight.org","is-a-landscaper.com","is-a-lawyer.com","is-a-liberal.com","is-a-libertarian.com","is-a-linux-user.org","is-a-llama.com","is-a-musician.com","is-a-nascarfan.com","is-a-nurse.com","is-a-painter.com","is-a-patsfan.org","is-a-personaltrainer.com","is-a-photographer.com","is-a-player.com","is-a-republican.com","is-a-rockstar.com","is-a-socialist.com","is-a-soxfan.org","is-a-student.com","is-a-teacher.com","is-a-techie.com","is-a-therapist.com","is-an-accountant.com","is-an-actor.com","is-an-actress.com","is-an-anarchist.com","is-an-artist.com","is-an-engineer.com","is-an-entertainer.com","is-by.us","is-certified.com","is-found.org","is-gone.com","is-into-anime.com","is-into-cars.com","is-into-cartoons.com","is-into-games.com","is-leet.com","is-lost.org","is-not-certified.com","is-saved.org","is-slick.com","is-uberleet.com","is-very-bad.org","is-very-evil.org","is-very-good.org","is-very-nice.org","is-very-sweet.org","is-with-theband.com","isa-geek.com","isa-geek.net","isa-geek.org","isa-hockeynut.com","issmarterthanyou.com","isteingeek.de","istmein.de","kicks-ass.net","kicks-ass.org","knowsitall.info","land-4-sale.us","lebtimnetz.de","leitungsen.de","likes-pie.com","likescandy.com","merseine.nu","mine.nu","misconfused.org","mypets.ws","myphotos.cc","neat-url.com","office-on-the.net","on-the-web.tv","podzone.net","podzone.org","readmyblog.org","saves-the-whales.com","scrapper-site.net","scrapping.cc","selfip.biz","selfip.com","selfip.info","selfip.net","selfip.org","sells-for-less.com","sells-for-u.com","sells-it.net","sellsyourhome.org","servebbs.com","servebbs.net","servebbs.org","serveftp.net","serveftp.org","servegame.org","shacknet.nu","simple-url.com","space-to-rent.com","stuff-4-sale.org","stuff-4-sale.us","teaches-yoga.com","thruhere.net","traeumtgerade.de","webhop.biz","webhop.info","webhop.net","webhop.org","worse-than.tv","writesthisblog.com","ddnss.de","dyn.ddnss.de","dyndns.ddnss.de","dyndns1.de","dyn-ip24.de","home-webserver.de","dyn.home-webserver.de","myhome-server.de","ddnss.org","definima.net","definima.io","bci.dnstrace.pro","ddnsfree.com","ddnsgeek.com","giize.com","gleeze.com","kozow.com","loseyourip.com","ooguy.com","theworkpc.com","casacam.net","dynu.net","accesscam.org","camdvr.org","freeddns.org","mywire.org","webredirect.org","myddns.rocks","blogsite.xyz","dynv6.net","e4.cz","mytuleap.com","enonic.io","customer.enonic.io","eu.org","al.eu.org","asso.eu.org","at.eu.org","au.eu.org","be.eu.org","bg.eu.org","ca.eu.org","cd.eu.org","ch.eu.org","cn.eu.org","cy.eu.org","cz.eu.org","de.eu.org","dk.eu.org","edu.eu.org","ee.eu.org","es.eu.org","fi.eu.org","fr.eu.org","gr.eu.org","hr.eu.org","hu.eu.org","ie.eu.org","il.eu.org","in.eu.org","int.eu.org","is.eu.org","it.eu.org","jp.eu.org","kr.eu.org","lt.eu.org","lu.eu.org","lv.eu.org","mc.eu.org","me.eu.org","mk.eu.org","mt.eu.org","my.eu.org","net.eu.org","ng.eu.org","nl.eu.org","no.eu.org","nz.eu.org","paris.eu.org","pl.eu.org","pt.eu.org","q-a.eu.org","ro.eu.org","ru.eu.org","se.eu.org","si.eu.org","sk.eu.org","tr.eu.org","uk.eu.org","us.eu.org","eu-1.evennode.com","eu-2.evennode.com","eu-3.evennode.com","eu-4.evennode.com","us-1.evennode.com","us-2.evennode.com","us-3.evennode.com","us-4.evennode.com","twmail.cc","twmail.net","twmail.org","mymailer.com.tw","url.tw","apps.fbsbx.com","ru.net","adygeya.ru","bashkiria.ru","bir.ru","cbg.ru","com.ru","dagestan.ru","grozny.ru","kalmykia.ru","kustanai.ru","marine.ru","mordovia.ru","msk.ru","mytis.ru","nalchik.ru","nov.ru","pyatigorsk.ru","spb.ru","vladikavkaz.ru","vladimir.ru","abkhazia.su","adygeya.su","aktyubinsk.su","arkhangelsk.su","armenia.su","ashgabad.su","azerbaijan.su","balashov.su","bashkiria.su","bryansk.su","bukhara.su","chimkent.su","dagestan.su","east-kazakhstan.su","exnet.su","georgia.su","grozny.su","ivanovo.su","jambyl.su","kalmykia.su","kaluga.su","karacol.su","karaganda.su","karelia.su","khakassia.su","krasnodar.su","kurgan.su","kustanai.su","lenug.su","mangyshlak.su","mordovia.su","msk.su","murmansk.su","nalchik.su","navoi.su","north-kazakhstan.su","nov.su","obninsk.su","penza.su","pokrovsk.su","sochi.su","spb.su","tashkent.su","termez.su","togliatti.su","troitsk.su","tselinograd.su","tula.su","tuva.su","vladikavkaz.su","vladimir.su","vologda.su","channelsdvr.net","fastlylb.net","map.fastlylb.net","freetls.fastly.net","map.fastly.net","a.prod.fastly.net","global.prod.fastly.net","a.ssl.fastly.net","b.ssl.fastly.net","global.ssl.fastly.net","fastpanel.direct","fastvps-server.com","fhapp.xyz","fedorainfracloud.org","fedorapeople.org","cloud.fedoraproject.org","app.os.fedoraproject.org","app.os.stg.fedoraproject.org","filegear.me","firebaseapp.com","flynnhub.com","flynnhosting.net","freebox-os.com","freeboxos.com","fbx-os.fr","fbxos.fr","freebox-os.fr","freeboxos.fr","freedesktop.org","*.futurecms.at","*.ex.futurecms.at","*.in.futurecms.at","futurehosting.at","futuremailing.at","*.ex.ortsinfo.at","*.kunden.ortsinfo.at","*.statics.cloud","service.gov.uk","github.io","githubusercontent.com","gitlab.io","homeoffice.gov.uk","ro.im","shop.ro","goip.de","*.0emm.com","appspot.com","blogspot.ae","blogspot.al","blogspot.am","blogspot.ba","blogspot.be","blogspot.bg","blogspot.bj","blogspot.ca","blogspot.cf","blogspot.ch","blogspot.cl","blogspot.co.at","blogspot.co.id","blogspot.co.il","blogspot.co.ke","blogspot.co.nz","blogspot.co.uk","blogspot.co.za","blogspot.com","blogspot.com.ar","blogspot.com.au","blogspot.com.br","blogspot.com.by","blogspot.com.co","blogspot.com.cy","blogspot.com.ee","blogspot.com.eg","blogspot.com.es","blogspot.com.mt","blogspot.com.ng","blogspot.com.tr","blogspot.com.uy","blogspot.cv","blogspot.cz","blogspot.de","blogspot.dk","blogspot.fi","blogspot.fr","blogspot.gr","blogspot.hk","blogspot.hr","blogspot.hu","blogspot.ie","blogspot.in","blogspot.is","blogspot.it","blogspot.jp","blogspot.kr","blogspot.li","blogspot.lt","blogspot.lu","blogspot.md","blogspot.mk","blogspot.mr","blogspot.mx","blogspot.my","blogspot.nl","blogspot.no","blogspot.pe","blogspot.pt","blogspot.qa","blogspot.re","blogspot.ro","blogspot.rs","blogspot.ru","blogspot.se","blogspot.sg","blogspot.si","blogspot.sk","blogspot.sn","blogspot.td","blogspot.tw","blogspot.ug","blogspot.vn","cloudfunctions.net","cloud.goog","codespot.com","googleapis.com","googlecode.com","pagespeedmobilizer.com","publishproxy.com","withgoogle.com","withyoutube.com","hashbang.sh","hasura.app","hasura-app.io","hepforge.org","herokuapp.com","herokussl.com","myravendb.com","ravendb.community","ravendb.me","development.run","ravendb.run","moonscale.net","iki.fi","biz.at","info.at","info.cx","ac.leg.br","al.leg.br","am.leg.br","ap.leg.br","ba.leg.br","ce.leg.br","df.leg.br","es.leg.br","go.leg.br","ma.leg.br","mg.leg.br","ms.leg.br","mt.leg.br","pa.leg.br","pb.leg.br","pe.leg.br","pi.leg.br","pr.leg.br","rj.leg.br","rn.leg.br","ro.leg.br","rr.leg.br","rs.leg.br","sc.leg.br","se.leg.br","sp.leg.br","to.leg.br","pixolino.com","ipifony.net","mein-iserv.de","test-iserv.de","myjino.ru","*.hosting.myjino.ru","*.landing.myjino.ru","*.spectrum.myjino.ru","*.vps.myjino.ru","*.triton.zone","*.cns.joyent.com","js.org","keymachine.de","knightpoint.systems","co.krd","edu.krd","git-repos.de","lcube-server.de","svn-repos.de","app.lmpm.com","linkitools.space","linkyard.cloud","linkyard-cloud.ch","we.bs","uklugs.org","glug.org.uk","lug.org.uk","lugs.org.uk","barsy.bg","barsy.co.uk","barsyonline.co.uk","barsycenter.com","barsyonline.com","barsy.club","barsy.de","barsy.eu","barsy.in","barsy.info","barsy.io","barsy.me","barsy.menu","barsy.mobi","barsy.net","barsy.online","barsy.org","barsy.pro","barsy.pub","barsy.shop","barsy.site","barsy.support","barsy.uk","*.magentosite.cloud","mayfirst.info","mayfirst.org","hb.cldmail.ru","miniserver.com","memset.net","cloud.metacentrum.cz","custom.metacentrum.cz","flt.cloud.muni.cz","usr.cloud.muni.cz","meteorapp.com","eu.meteorapp.com","co.pl","azurecontainer.io","azurewebsites.net","azure-mobile.net","cloudapp.net","mozilla-iot.org","bmoattachments.org","net.ru","org.ru","pp.ru","bitballoon.com","netlify.com","4u.com","ngrok.io","nh-serv.co.uk","nfshost.com","dnsking.ch","mypi.co","n4t.co","001www.com","ddnslive.com","myiphost.com","forumz.info","16-b.it","32-b.it","64-b.it","soundcast.me","tcp4.me","dnsup.net","hicam.net","now-dns.net","ownip.net","vpndns.net","dynserv.org","now-dns.org","x443.pw","now-dns.top","ntdll.top","freeddns.us","crafting.xyz","zapto.xyz","nsupdate.info","nerdpol.ovh","blogsyte.com","brasilia.me","cable-modem.org","ciscofreak.com","collegefan.org","couchpotatofries.org","damnserver.com","ddns.me","ditchyourip.com","dnsfor.me","dnsiskinky.com","dvrcam.info","dynns.com","eating-organic.net","fantasyleague.cc","geekgalaxy.com","golffan.us","health-carereform.com","homesecuritymac.com","homesecuritypc.com","hopto.me","ilovecollege.info","loginto.me","mlbfan.org","mmafan.biz","myactivedirectory.com","mydissent.net","myeffect.net","mymediapc.net","mypsx.net","mysecuritycamera.com","mysecuritycamera.net","mysecuritycamera.org","net-freaks.com","nflfan.org","nhlfan.net","no-ip.ca","no-ip.co.uk","no-ip.net","noip.us","onthewifi.com","pgafan.net","point2this.com","pointto.us","privatizehealthinsurance.net","quicksytes.com","read-books.org","securitytactics.com","serveexchange.com","servehumour.com","servep2p.com","servesarcasm.com","stufftoread.com","ufcfan.org","unusualperson.com","workisboring.com","3utilities.com","bounceme.net","ddns.net","ddnsking.com","gotdns.ch","hopto.org","myftp.biz","myftp.org","myvnc.com","no-ip.biz","no-ip.info","no-ip.org","noip.me","redirectme.net","servebeer.com","serveblog.net","servecounterstrike.com","serveftp.com","servegame.com","servehalflife.com","servehttp.com","serveirc.com","serveminecraft.net","servemp3.com","servepics.com","servequake.com","sytes.net","webhop.me","zapto.org","stage.nodeart.io","nodum.co","nodum.io","pcloud.host","nyc.mn","nom.ae","nom.af","nom.ai","nom.al","nym.by","nym.bz","nom.cl","nom.gd","nom.ge","nom.gl","nym.gr","nom.gt","nym.gy","nom.hn","nym.ie","nom.im","nom.ke","nym.kz","nym.la","nym.lc","nom.li","nym.li","nym.lt","nym.lu","nym.me","nom.mk","nym.mn","nym.mx","nom.nu","nym.nz","nym.pe","nym.pt","nom.pw","nom.qa","nym.ro","nom.rs","nom.si","nym.sk","nom.st","nym.su","nym.sx","nom.tj","nym.tw","nom.ug","nom.uy","nom.vc","nom.vg","cya.gg","cloudycluster.net","nid.io","opencraft.hosting","operaunite.com","outsystemscloud.com","ownprovider.com","own.pm","ox.rs","oy.lc","pgfog.com","pagefrontapp.com","art.pl","gliwice.pl","krakow.pl","poznan.pl","wroc.pl","zakopane.pl","pantheonsite.io","gotpantheon.com","mypep.link","on-web.fr","*.platform.sh","*.platformsh.site","xen.prgmr.com","priv.at","protonet.io","chirurgiens-dentistes-en-france.fr","byen.site","ras.ru","qa2.com","dev-myqnapcloud.com","alpha-myqnapcloud.com","myqnapcloud.com","*.quipelements.com","vapor.cloud","vaporcloud.io","rackmaze.com","rackmaze.net","rhcloud.com","resindevice.io","devices.resinstaging.io","hzc.io","wellbeingzone.eu","ptplus.fit","wellbeingzone.co.uk","sandcats.io","logoip.de","logoip.com","schokokeks.net","scrysec.com","firewall-gateway.com","firewall-gateway.de","my-gateway.de","my-router.de","spdns.de","spdns.eu","firewall-gateway.net","my-firewall.org","myfirewall.org","spdns.org","*.s5y.io","*.sensiosite.cloud","biz.ua","co.ua","pp.ua","shiftedit.io","myshopblocks.com","1kapp.com","appchizi.com","applinzi.com","sinaapp.com","vipsinaapp.com","bounty-full.com","alpha.bounty-full.com","beta.bounty-full.com","static.land","dev.static.land","sites.static.land","apps.lair.io","*.stolos.io","spacekit.io","customer.speedpartner.de","storj.farm","utwente.io","temp-dns.com","diskstation.me","dscloud.biz","dscloud.me","dscloud.mobi","dsmynas.com","dsmynas.net","dsmynas.org","familyds.com","familyds.net","familyds.org","i234.me","myds.me","synology.me","vpnplus.to","taifun-dns.de","gda.pl","gdansk.pl","gdynia.pl","med.pl","sopot.pl","gwiddle.co.uk","cust.dev.thingdust.io","cust.disrec.thingdust.io","cust.prod.thingdust.io","cust.testing.thingdust.io","bloxcms.com","townnews-staging.com","12hp.at","2ix.at","4lima.at","lima-city.at","12hp.ch","2ix.ch","4lima.ch","lima-city.ch","trafficplex.cloud","de.cool","12hp.de","2ix.de","4lima.de","lima-city.de","1337.pictures","clan.rip","lima-city.rocks","webspace.rocks","lima.zone","*.transurl.be","*.transurl.eu","*.transurl.nl","tuxfamily.org","dd-dns.de","diskstation.eu","diskstation.org","dray-dns.de","draydns.de","dyn-vpn.de","dynvpn.de","mein-vigor.de","my-vigor.de","my-wan.de","syno-ds.de","synology-diskstation.de","synology-ds.de","uber.space","*.uberspace.de","hk.com","hk.org","ltd.hk","inc.hk","virtualuser.de","virtual-user.de","lib.de.us","2038.io","router.management","v-info.info","wedeploy.io","wedeploy.me","wedeploy.sh","remotewd.com","wmflabs.org","half.host","xnbay.com","u2.xnbay.com","u2-local.xnbay.com","cistron.nl","demon.nl","xs4all.space","official.academy","yolasite.com","ybo.faith","yombo.me","homelink.one","ybo.party","ybo.review","ybo.science","ybo.trade","nohost.me","noho.st","za.net","za.org","now.sh","zone.id"]},function(e,a,t){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=t(56).Store,o=t(57).permuteDomain,n=t(58).pathMatch,r=t(1);function s(){i.call(this),this.idx={}}r.inherits(s,i),a.MemoryCookieStore=s,s.prototype.idx=null,s.prototype.synchronous=!0,s.prototype.inspect=function(){return"{ idx: "+r.inspect(this.idx,!1,2)+" }"},r.inspect.custom&&(s.prototype[r.inspect.custom]=s.prototype.inspect),s.prototype.findCookie=function(e,a,t,i){return this.idx[e]&&this.idx[e][a]?i(null,this.idx[e][a][t]||null):i(null,void 0)},s.prototype.findCookies=function(e,a,t){var i,r=[];if(!e)return t(null,[]);i=a?function(e){Object.keys(e).forEach(function(t){if(n(a,t)){var i=e[t];for(var o in i)r.push(i[o])}})}:function(e){for(var a in e){var t=e[a];for(var i in t)r.push(t[i])}};var s=o(e)||[e],c=this.idx;s.forEach(function(e){var a=c[e];a&&i(a)}),t(null,r)},s.prototype.putCookie=function(e,a){this.idx[e.domain]||(this.idx[e.domain]={}),this.idx[e.domain][e.path]||(this.idx[e.domain][e.path]={}),this.idx[e.domain][e.path][e.key]=e,a(null)},s.prototype.updateCookie=function(e,a,t){this.putCookie(a,t)},s.prototype.removeCookie=function(e,a,t,i){this.idx[e]&&this.idx[e][a]&&this.idx[e][a][t]&&delete this.idx[e][a][t],i(null)},s.prototype.removeCookies=function(e,a,t){return this.idx[e]&&(a?delete this.idx[e][a]:delete this.idx[e]),t(null)},s.prototype.getAllCookies=function(e){var a=[],t=this.idx;Object.keys(t).forEach(function(e){Object.keys(t[e]).forEach(function(i){Object.keys(t[e][i]).forEach(function(o){null!==o&&a.push(t[e][i][o])})})}),a.sort(function(e,a){return(e.creationIndex||0)-(a.creationIndex||0)}),e(null,a)}},function(e){e.exports={author:{name:"Jeremy Stashewsky",email:"jstash@gmail.com",website:"https://github.com/stash"},contributors:[{name:"Alexander Savin",website:"https://github.com/apsavin"},{name:"Ian Livingstone",website:"https://github.com/ianlivingstone"},{name:"Ivan Nikulin",website:"https://github.com/inikulin"},{name:"Lalit Kapoor",website:"https://github.com/lalitkapoor"},{name:"Sam Thompson",website:"https://github.com/sambthompson"},{name:"Sebastian Mayr",website:"https://github.com/Sebmaster"}],license:"BSD-3-Clause",name:"tough-cookie",description:"RFC6265 Cookies and Cookie Jar for node.js",keywords:["HTTP","cookie","cookies","set-cookie","cookiejar","jar","RFC6265","RFC2965"],version:"2.4.3",homepage:"https://github.com/salesforce/tough-cookie",repository:{type:"git",url:"git://github.com/salesforce/tough-cookie.git"},bugs:{url:"https://github.com/salesforce/tough-cookie/issues"},main:"./lib/cookie",files:["lib"],scripts:{test:"vows test/*_test.js",cover:"nyc --reporter=lcov --reporter=html vows test/*_test.js"},engines:{node:">=0.8"},devDependencies:{async:"^1.4.2",nyc:"^11.6.0","string.prototype.repeat":"^0.2.0",vows:"^0.8.1"},dependencies:{psl:"^1.1.24",punycode:"^1.4.1"}}},function(e,a){function t(e,a){var t=[],i=[];return null==a&&(a=function(e,a){return t[0]===a?"[Circular ~]":"[Circular ~."+i.slice(0,t.indexOf(a)).join(".")+"]"}),function(o,n){if(t.length>0){var r=t.indexOf(this);~r?t.splice(r+1):t.push(this),~r?i.splice(r,1/0,o):i.push(o),~t.indexOf(n)&&(n=a.call(this,o,n))}else t.push(n);return null==e?n:e.call(this,o,n)}}(e.exports=function(e,a,i,o){return JSON.stringify(e,t(a,o),i)}).getSerialize=t},function(e,a,t){"use strict";var i=t(17),o=t(18),n=t(9),r=t(1),s=t(19),c=t(122),p=t(123),u=t(124),l=t(126),m=t(66),d=t(47),h=t(145),f=t(146),v=t(38),g=t(75),b=t(154).strict,y=t(40),x=t(53),k=t(155),w=t(156).Querystring,j=t(159).Har,E=t(216).Auth,S=t(219).OAuth,_=t(221),R=t(222).Multipart,A=t(223).Redirect,C=t(224).Tunnel,q=t(227),O=t(22).Buffer,z=y.safeStringify,P=y.isReadStream,F=y.toBase64,T=y.defer,I=y.copy,D=y.version,B=x.jar(),L={};function U(){return{uri:this.uri,method:this.method,headers:this.headers}}function N(){return{statusCode:this.statusCode,body:this.body,headers:this.headers,request:U.call(this.request)}}function H(e){e.har&&(this._har=new j(this),e=this._har.options(e)),s.Stream.call(this);var a=Object.keys(H.prototype),t=function(e,a){var t={};for(var i in a)-1===e.indexOf(i)&&(t[i]=a[i]);return t}(a,e);v(this,t),e=function(e,a){var t={};for(var i in a){var o=!(-1===e.indexOf(i)),n="function"==typeof a[i];o&&n||(t[i]=a[i])}return t}(a,e),this.readable=!0,this.writable=!0,e.method&&(this.explicitMethod=!0),this._qs=new w(this),this._auth=new E(this),this._oauth=new S(this),this._multipart=new R(this),this._redirect=new A(this),this._tunnel=new C(this),this.init(e)}function M(){H.debug&&console.error("REQUEST %s",r.format.apply(r,arguments))}r.inherits(H,s.Stream),H.debug=process.env.NODE_DEBUG&&/\brequest\b/.test(process.env.NODE_DEBUG),H.prototype.debug=M,H.prototype.init=function(e){var a=this;for(var t in e||(e={}),a.headers=a.headers?I(a.headers):{},a.headers)void 0===a.headers[t]&&delete a.headers[t];if(d.httpify(a,a.headers),a.method||(a.method=e.method||"GET"),a.localAddress||(a.localAddress=e.localAddress),a._qs.init(e),M(e),a.pool||!1===a.pool||(a.pool=L),a.dests=a.dests||[],a.__isRequestRequest=!0,!a._callback&&a.callback&&(a._callback=a.callback,a.callback=function(){a._callbackCalled||(a._callbackCalled=!0,a._callback.apply(a,arguments))},a.on("error",a.callback.bind()),a.on("complete",a.callback.bind(a,null))),!a.uri&&a.url&&(a.uri=a.url,delete a.url),a.baseUrl){if("string"!=typeof a.baseUrl)return a.emit("error",new Error("options.baseUrl must be a string"));if("string"!=typeof a.uri)return a.emit("error",new Error("options.uri must be a string when using options.baseUrl"));if(0===a.uri.indexOf("//")||-1!==a.uri.indexOf("://"))return a.emit("error",new Error("options.uri must be a path when using options.baseUrl"));var r=a.baseUrl.lastIndexOf("/")===a.baseUrl.length-1,s=0===a.uri.indexOf("/");r&&s?a.uri=a.baseUrl+a.uri.slice(1):r||s?a.uri=a.baseUrl+a.uri:""===a.uri?a.uri=a.baseUrl:a.uri=a.baseUrl+"/"+a.uri,delete a.baseUrl}if(!a.uri)return a.emit("error",new Error("options.uri is a required argument"));if("string"==typeof a.uri&&(a.uri=n.parse(a.uri)),a.uri.href||(a.uri.href=n.format(a.uri)),"unix:"===a.uri.protocol)return a.emit("error",new Error("`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`"));if("unix"===a.uri.host&&a.enableUnixSocket(),!1===a.strictSSL&&(a.rejectUnauthorized=!1),a.uri.pathname||(a.uri.pathname="/"),!(a.uri.host||a.uri.hostname&&a.uri.port||a.uri.isUnix)){var c='Invalid URI "'+n.format(a.uri)+'"';return 0===Object.keys(e).length&&(c+=". This can be caused by a crappy redirection."),a.abort(),a.emit("error",new Error(c))}if(a.hasOwnProperty("proxy")||(a.proxy=k(a.uri)),a.tunnel=a._tunnel.isEnabled(),a.proxy&&a._tunnel.setup(e),a._redirect.onRequest(e),a.setHost=!1,!a.hasHeader("host")){var p=a.originalHostHeaderName||"host";a.setHeader(p,a.uri.host),a.uri.port&&("80"===a.uri.port&&"http:"===a.uri.protocol||"443"===a.uri.port&&"https:"===a.uri.protocol)&&a.setHeader(p,a.uri.hostname),a.setHost=!0}if(a.jar(a._jar||e.jar),a.uri.port||("http:"===a.uri.protocol?a.uri.port=80:"https:"===a.uri.protocol&&(a.uri.port=443)),a.proxy&&!a.tunnel?(a.port=a.proxy.port,a.host=a.proxy.hostname):(a.port=a.uri.port,a.host=a.uri.hostname),e.form&&a.form(e.form),e.formData){var u=e.formData,l=a.form(),f=function(e,a){a&&a.hasOwnProperty("value")&&a.hasOwnProperty("options")?l.append(e,a.value,a.options):l.append(e,a)};for(var v in u)if(u.hasOwnProperty(v)){var y=u[v];if(y instanceof Array)for(var x=0;x<y.length;x++)f(v,y[x]);else f(v,y)}}if(e.qs&&a.qs(e.qs),a.uri.path?a.path=a.uri.path:a.path=a.uri.pathname+(a.uri.search||""),0===a.path.length&&(a.path="/"),e.aws&&a.aws(e.aws),e.hawk&&a.hawk(e.hawk),e.httpSignature&&a.httpSignature(e.httpSignature),e.auth&&(Object.prototype.hasOwnProperty.call(e.auth,"username")&&(e.auth.user=e.auth.username),Object.prototype.hasOwnProperty.call(e.auth,"password")&&(e.auth.pass=e.auth.password),a.auth(e.auth.user,e.auth.pass,e.auth.sendImmediately,e.auth.bearer)),a.gzip&&!a.hasHeader("accept-encoding")&&a.setHeader("accept-encoding","gzip, deflate"),a.uri.auth&&!a.hasHeader("authorization")){var w=a.uri.auth.split(":").map(function(e){return a._qs.unescape(e)});a.auth(w[0],w.slice(1).join(":"),!0)}if(!a.tunnel&&a.proxy&&a.proxy.auth&&!a.hasHeader("proxy-authorization")){var j=a.proxy.auth.split(":").map(function(e){return a._qs.unescape(e)}),E="Basic "+F(j.join(":"));a.setHeader("proxy-authorization",E)}function S(){var e;(b(a.body)&&(a.body=O.from(a.body)),a.hasHeader("content-length"))||((e="string"==typeof a.body?O.byteLength(a.body):Array.isArray(a.body)?a.body.reduce(function(e,a){return e+a.length},0):a.body.length)?a.setHeader("content-length",e):a.emit("error",new Error("Argument error, options.body.")))}a.proxy&&!a.tunnel&&(a.path=a.uri.protocol+"//"+a.uri.host+a.path),e.json&&a.json(e.json),e.multipart&&a.multipart(e.multipart),e.time&&(a.timing=!0,a.elapsedTime=a.elapsedTime||0),a.body&&!g(a.body)&&S(),e.oauth?a.oauth(e.oauth):a._oauth.params&&a.hasHeader("authorization")&&a.oauth(a._oauth.params);var _=a.proxy&&!a.tunnel?a.proxy.protocol:a.uri.protocol,R={"http:":i,"https:":o},A=a.httpModules||{};if(a.httpModule=A[_]||R[_],!a.httpModule)return a.emit("error",new Error("Invalid protocol: "+_));if(e.ca&&(a.ca=e.ca),!a.agent)if(e.agentOptions&&(a.agentOptions=e.agentOptions),e.agentClass)a.agentClass=e.agentClass;else if(e.forever){var C=D();0===C.major&&C.minor<=10?a.agentClass="http:"===_?h:h.SSL:(a.agentClass=a.httpModule.Agent,a.agentOptions=a.agentOptions||{},a.agentOptions.keepAlive=!0)}else a.agentClass=a.httpModule.Agent;!1===a.pool?a.agent=!1:a.agent=a.agent||a.getNewAgent(),a.on("pipe",function(e){if(a.ntick&&a._started&&a.emit("error",new Error("You cannot pipe to this stream after the outbound request has started.")),a.src=e,P(e))a.hasHeader("content-type")||a.setHeader("content-type",m.lookup(e.path));else{if(e.headers)for(var t in e.headers)a.hasHeader(t)||a.setHeader(t,e.headers[t]);a._json&&!a.hasHeader("content-type")&&a.setHeader("content-type","application/json"),e.method&&!a.explicitMethod&&(a.method=e.method)}}),T(function(){if(!a._aborted){var e=function(){if(a._form&&(a._auth.hasAuth?a._auth.hasAuth&&a._auth.sentAuth&&a._form.pipe(a):a._form.pipe(a)),a._multipart&&a._multipart.chunked&&a._multipart.body.pipe(a),a.body)g(a.body)?a.body.pipe(a):(S(),Array.isArray(a.body)?a.body.forEach(function(e){a.write(e)}):a.write(a.body),a.end());else if(a.requestBodyStream)console.warn("options.requestBodyStream is deprecated, please pass the request object to stream.pipe."),a.requestBodyStream.pipe(a);else if(!a.src){if(a._auth.hasAuth&&!a._auth.sentAuth)return void a.end();"GET"!==a.method&&void 0!==a.method&&a.setHeader("content-length",0),a.end()}};a._form&&!a.hasHeader("content-length")?(a.setHeader(a._form.getHeaders(),!0),a._form.getLength(function(t,i){t||isNaN(i)||a.setHeader("content-length",i),e()})):e(),a.ntick=!0}})},H.prototype.getNewAgent=function(){var e=this.agentClass,a={};if(this.agentOptions)for(var t in this.agentOptions)a[t]=this.agentOptions[t];this.ca&&(a.ca=this.ca),this.ciphers&&(a.ciphers=this.ciphers),this.secureProtocol&&(a.secureProtocol=this.secureProtocol),this.secureOptions&&(a.secureOptions=this.secureOptions),void 0!==this.rejectUnauthorized&&(a.rejectUnauthorized=this.rejectUnauthorized),this.cert&&this.key&&(a.key=this.key,a.cert=this.cert),this.pfx&&(a.pfx=this.pfx),this.passphrase&&(a.passphrase=this.passphrase);var i="";e!==this.httpModule.Agent&&(i+=e.name);var o=this.proxy;return"string"==typeof o&&(o=n.parse(o)),(o&&"https:"===o.protocol||"https:"===this.uri.protocol)&&(a.ca&&(i&&(i+=":"),i+=a.ca),void 0!==a.rejectUnauthorized&&(i&&(i+=":"),i+=a.rejectUnauthorized),a.cert&&(i&&(i+=":"),i+=a.cert.toString("ascii")+a.key.toString("ascii")),a.pfx&&(i&&(i+=":"),i+=a.pfx.toString("ascii")),a.ciphers&&(i&&(i+=":"),i+=a.ciphers),a.secureProtocol&&(i&&(i+=":"),i+=a.secureProtocol),a.secureOptions&&(i&&(i+=":"),i+=a.secureOptions)),this.pool===L&&!i&&0===Object.keys(a).length&&this.httpModule.globalAgent?this.httpModule.globalAgent:(i=this.uri.protocol+i,this.pool[i]||(this.pool[i]=new e(a),this.pool.maxSockets&&(this.pool[i].maxSockets=this.pool.maxSockets)),this.pool[i])},H.prototype.start=function(){var e=this;if(e.timing)var a=(new Date).getTime(),t=q();if(!e._aborted){e._started=!0,e.method=e.method||"GET",e.href=e.uri.href,e.src&&e.src.stat&&e.src.stat.size&&!e.hasHeader("content-length")&&e.setHeader("content-length",e.src.stat.size),e._aws&&e.aws(e._aws,!0);var i,o=I(e);delete o.auth,M("make request",e.uri.href),delete o.timeout;try{e.req=e.httpModule.request(o)}catch(a){return void e.emit("error",a)}e.timing&&(e.startTime=a,e.startTimeNow=t,e.timings={}),e.timeout&&!e.timeoutTimer&&(e.timeout<0?i=0:"number"==typeof e.timeout&&isFinite(e.timeout)&&(i=e.timeout)),e.req.on("response",e.onRequestResponse.bind(e)),e.req.on("error",e.onRequestError.bind(e)),e.req.on("drain",function(){e.emit("drain")}),e.req.on("socket",function(a){var t=a._connecting||a.connecting;if(e.timing&&(e.timings.socket=q()-e.startTimeNow,t)){var o=function(){e.timings.lookup=q()-e.startTimeNow},n=function(){e.timings.connect=q()-e.startTimeNow};a.once("lookup",o),a.once("connect",n),e.req.once("error",function(){a.removeListener("lookup",o),a.removeListener("connect",n)})}var r=function(){e.req.setTimeout(i,function(){if(e.req){e.abort();var a=new Error("ESOCKETTIMEDOUT");a.code="ESOCKETTIMEDOUT",a.connect=!1,e.emit("error",a)}})};if(void 0!==i)if(t){var s=function(){a.removeListener("connect",s),clearTimeout(e.timeoutTimer),e.timeoutTimer=null,r()};a.on("connect",s),e.req.on("error",function(e){a.removeListener("connect",s)}),e.timeoutTimer=setTimeout(function(){a.removeListener("connect",s),e.abort();var t=new Error("ETIMEDOUT");t.code="ETIMEDOUT",t.connect=!0,e.emit("error",t)},i)}else r();e.emit("socket",a)}),e.emit("request",e.req)}},H.prototype.onRequestError=function(e){if(!this._aborted){if(this.req&&this.req._reusedSocket&&"ECONNRESET"===e.code&&this.agent.addRequestNoreuse)return this.agent={addRequest:this.agent.addRequestNoreuse.bind(this.agent)},this.start(),void this.req.end();this.timeout&&this.timeoutTimer&&(clearTimeout(this.timeoutTimer),this.timeoutTimer=null),this.emit("error",e)}},H.prototype.onRequestResponse=function(e){var a=this;if(a.timing&&(a.timings.response=q()-a.startTimeNow),M("onRequestResponse",a.uri.href,e.statusCode,e.headers),e.on("end",function(){a.timing&&(a.timings.end=q()-a.startTimeNow,e.timingStart=a.startTime,a.timings.socket||(a.timings.socket=0),a.timings.lookup||(a.timings.lookup=a.timings.socket),a.timings.connect||(a.timings.connect=a.timings.lookup),a.timings.response||(a.timings.response=a.timings.connect),M("elapsed time",a.timings.end),a.elapsedTime+=Math.round(a.timings.end),e.elapsedTime=a.elapsedTime,e.timings=a.timings,e.timingPhases={wait:a.timings.socket,dns:a.timings.lookup-a.timings.socket,tcp:a.timings.connect-a.timings.lookup,firstByte:a.timings.response-a.timings.connect,download:a.timings.end-a.timings.response,total:a.timings.end}),M("response end",a.uri.href,e.statusCode,e.headers)}),a._aborted)return M("aborted",a.uri.href),void e.resume();if(a.response=e,e.request=a,e.toJSON=N,a.httpModule!==o||!a.strictSSL||e.hasOwnProperty("socket")&&e.socket.authorized){a.originalHost=a.getHeader("host"),a.originalHostHeaderName||(a.originalHostHeaderName=a.hasHeader("host")),a.setHost&&a.removeHeader("host"),a.timeout&&a.timeoutTimer&&(clearTimeout(a.timeoutTimer),a.timeoutTimer=null);var t=a._jar&&a._jar.setCookie?a._jar:B,i=function(e){try{t.setCookie(e,a.uri.href,{ignoreError:!0})}catch(e){a.emit("error",e)}};if(e.caseless=d(e.headers),e.caseless.has("set-cookie")&&!a._disableCookies){var n=e.caseless.has("set-cookie");Array.isArray(e.headers[n])?e.headers[n].forEach(i):i(e.headers[n])}if(!a._redirect.onResponse(e)){e.on("close",function(){a._ended||a.response.emit("end")}),e.once("end",function(){a._ended=!0});var r,s;if(!a.gzip||(s=e.statusCode,"HEAD"===a.method||s>=100&&s<200||204===s||304===s))r=e;else{var p=e.headers["content-encoding"]||"identity";p=p.trim().toLowerCase();var u={flush:c.Z_SYNC_FLUSH,finishFlush:c.Z_SYNC_FLUSH};"gzip"===p?(r=c.createGunzip(u),e.pipe(r)):"deflate"===p?(r=c.createInflate(u),e.pipe(r)):("identity"!==p&&M("ignoring unrecognized Content-Encoding "+p),r=e)}a.encoding&&(0!==a.dests.length?console.error("Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid."):r.setEncoding(a.encoding)),a._paused&&r.pause(),a.responseContent=r,a.emit("response",e),a.dests.forEach(function(e){a.pipeDest(e)}),r.on("data",function(t){a.timing&&!a.responseStarted&&(a.responseStartTime=(new Date).getTime(),e.responseStartTime=a.responseStartTime),a._destdata=!0,a.emit("data",t)}),r.once("end",function(e){a.emit("end",e)}),r.on("error",function(e){a.emit("error",e)}),r.on("close",function(){a.emit("close")}),a.callback?a.readResponseBody(e):a.on("end",function(){a._aborted?M("aborted",a.uri.href):a.emit("complete",e)}),M("finish init function",a.uri.href)}}else{M("strict ssl error",a.uri.href);var l=e.hasOwnProperty("socket")?e.socket.authorizationError:a.uri.href+" does not support SSL";a.emit("error",new Error("SSL Error: "+l))}},H.prototype.readResponseBody=function(e){var a=this;M("reading response's body");var t=[],i=0,o=[];a.on("data",function(e){O.isBuffer(e)?e.length&&(i+=e.length,t.push(e)):o.push(e)}),a.on("end",function(){if(M("end event",a.uri.href),a._aborted)return M("aborted",a.uri.href),t=[],void(i=0);if(i?(M("has body",a.uri.href,i),e.body=O.concat(t,i),null!==a.encoding&&(e.body=e.body.toString(a.encoding)),t=[],i=0):o.length&&("utf8"===a.encoding&&o[0].length>0&&"\ufeff"===o[0][0]&&(o[0]=o[0].substring(1)),e.body=o.join("")),a._json)try{e.body=JSON.parse(e.body,a._jsonReviver)}catch(e){M("invalid JSON received",a.uri.href)}M("emitting complete",a.uri.href),void 0!==e.body||a._json||(e.body=null===a.encoding?O.alloc(0):""),a.emit("complete",e,e.body)})},H.prototype.abort=function(){this._aborted=!0,this.req?this.req.abort():this.response&&this.response.destroy(),this.emit("abort")},H.prototype.pipeDest=function(e){var a=this.response;if(e.headers&&!e.headersSent){if(a.caseless.has("content-type")){var t=a.caseless.has("content-type");e.setHeader?e.setHeader(t,a.headers[t]):e.headers[t]=a.headers[t]}if(a.caseless.has("content-length")){var i=a.caseless.has("content-length");e.setHeader?e.setHeader(i,a.headers[i]):e.headers[i]=a.headers[i]}}if(e.setHeader&&!e.headersSent){for(var o in a.headers)this.gzip&&"content-encoding"===o||e.setHeader(o,a.headers[o]);e.statusCode=a.statusCode}this.pipefilter&&this.pipefilter(a,e)},H.prototype.qs=function(e,a){var t;for(var i in t=!a&&this.uri.query?this._qs.parse(this.uri.query):{},e)t[i]=e[i];var o=this._qs.stringify(t);return""===o?this:(this.uri=n.parse(this.uri.href.split("?")[0]+"?"+o),this.url=this.uri,this.path=this.uri.path,"unix"===this.uri.host&&this.enableUnixSocket(),this)},H.prototype.form=function(e){var a=this;return e?(/^application\/x-www-form-urlencoded\b/.test(a.getHeader("content-type"))||a.setHeader("content-type","application/x-www-form-urlencoded"),a.body="string"==typeof e?a._qs.rfc3986(e.toString("utf8")):a._qs.stringify(e).toString("utf8"),a):(a._form=new f,a._form.on("error",function(e){e.message="form-data: "+e.message,a.emit("error",e),a.abort()}),a._form)},H.prototype.multipart=function(e){return this._multipart.onRequest(e),this._multipart.chunked||(this.body=this._multipart.body),this},H.prototype.json=function(e){return this.hasHeader("accept")||this.setHeader("accept","application/json"),"function"==typeof this.jsonReplacer&&(this._jsonReplacer=this.jsonReplacer),this._json=!0,"boolean"==typeof e?void 0!==this.body&&(/^application\/x-www-form-urlencoded\b/.test(this.getHeader("content-type"))?this.body=this._qs.rfc3986(this.body):this.body=z(this.body,this._jsonReplacer),this.hasHeader("content-type")||this.setHeader("content-type","application/json")):(this.body=z(e,this._jsonReplacer),this.hasHeader("content-type")||this.setHeader("content-type","application/json")),"function"==typeof this.jsonReviver&&(this._jsonReviver=this.jsonReviver),this},H.prototype.getHeader=function(e,a){var t,i;return a||(a=this.headers),Object.keys(a).forEach(function(o){o.length===e.length&&(i=new RegExp(e,"i"),o.match(i)&&(t=a[o]))}),t},H.prototype.enableUnixSocket=function(){var e=this.uri.path.split(":"),a=e[0],t=e[1];this.socketPath=a,this.uri.pathname=t,this.uri.path=t,this.uri.host=a,this.uri.hostname=a,this.uri.isUnix=!0},H.prototype.auth=function(e,a,t,i){return this._auth.onRequest(e,a,t,i),this},H.prototype.aws=function(e,a){if(!a)return this._aws=e,this;if(4===e.sign_version||"4"===e.sign_version){var t={host:this.uri.host,path:this.uri.path,method:this.method,headers:this.headers,body:this.body};e.service&&(t.service=e.service);var i=u.sign(t,{accessKeyId:e.key,secretAccessKey:e.secret,sessionToken:e.session});this.setHeader("authorization",i.headers.Authorization),this.setHeader("x-amz-date",i.headers["X-Amz-Date"]),i.headers["X-Amz-Security-Token"]&&this.setHeader("x-amz-security-token",i.headers["X-Amz-Security-Token"])}else{var o=new Date;this.setHeader("date",o.toUTCString());var n={key:e.key,secret:e.secret,verb:this.method.toUpperCase(),date:o,contentType:this.getHeader("content-type")||"",md5:this.getHeader("content-md5")||"",amazonHeaders:p.canonicalizeHeaders(this.headers)},r=this.uri.path;e.bucket&&r?n.resource="/"+e.bucket+r:e.bucket&&!r?n.resource="/"+e.bucket:!e.bucket&&r?n.resource=r:e.bucket||r||(n.resource="/"),n.resource=p.canonicalizeResource(n.resource),this.setHeader("authorization",p.authorization(n))}return this},H.prototype.httpSignature=function(e){var a=this;return l.signRequest({getHeader:function(e){return a.getHeader(e,a.headers)},setHeader:function(e,t){a.setHeader(e,t)},method:a.method,path:a.path},e),M("httpSignature authorization",a.getHeader("authorization")),a},H.prototype.hawk=function(e){this.setHeader("Authorization",_.header(this.uri,this.method,e))},H.prototype.oauth=function(e){return this._oauth.onRequest(e),this},H.prototype.jar=function(e){var a;if(0===this._redirect.redirectsFollowed&&(this.originalCookieHeader=this.getHeader("cookie")),e){var t=e&&e.getCookieString?e:B,i=this.uri.href;t&&(a=t.getCookieString(i))}else a=!1,this._disableCookies=!0;return a&&a.length&&(this.originalCookieHeader?this.setHeader("cookie",this.originalCookieHeader+"; "+a):this.setHeader("cookie",a)),this._jar=e,this},H.prototype.pipe=function(e,a){if(!this.response)return this.dests.push(e),s.Stream.prototype.pipe.call(this,e,a),e;if(this._destdata)this.emit("error",new Error("You cannot pipe after data has been emitted from the response."));else{if(!this._ended)return s.Stream.prototype.pipe.call(this,e,a),this.pipeDest(e),e;this.emit("error",new Error("You cannot pipe after the response has been ended."))}},H.prototype.write=function(){if(!this._aborted)return this._started||this.start(),this.req?this.req.write.apply(this.req,arguments):void 0},H.prototype.end=function(e){this._aborted||(e&&this.write(e),this._started||this.start(),this.req&&this.req.end())},H.prototype.pause=function(){this.responseContent?this.responseContent.pause.apply(this.responseContent,arguments):this._paused=!0},H.prototype.resume=function(){this.responseContent?this.responseContent.resume.apply(this.responseContent,arguments):this._paused=!1},H.prototype.destroy=function(){this._ended?this.response&&this.response.destroy():this.end()},H.defaultProxyHeaderWhiteList=C.defaultProxyHeaderWhiteList.slice(),H.defaultProxyHeaderExclusiveList=C.defaultProxyHeaderExclusiveList.slice(),H.prototype.toJSON=U,e.exports=H},function(e,a){e.exports=require("zlib")},function(e,a,t){
/*!
 *  Copyright 2010 LearnBoost <dev@learnboost.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var i=t(2),o=t(9).parse,n=["acl","location","logging","notification","partNumber","policy","requestPayment","torrent","uploadId","uploads","versionId","versioning","versions","website"];function r(e){return"AWS "+e.key+":"+c(e)}function s(e){return i.createHmac("sha1",e.secret).update(e.message).digest("base64")}function c(e){return e.message=p(e),s(e)}function p(e){var a=e.amazonHeaders||"";return a&&(a+="\n"),[e.verb,e.md5,e.contentType,e.date?e.date.toUTCString():"",a+e.resource].join("\n")}function u(e){return"GET\n\n\n"+e.date+"\n"+e.resource}e.exports=r,e.exports.authorization=r,e.exports.hmacSha1=s,e.exports.sign=c,e.exports.signQuery=function(e){return e.message=u(e),s(e)},e.exports.stringToSign=p,e.exports.queryStringToSign=u,e.exports.canonicalizeHeaders=function(e){for(var a=[],t=Object.keys(e),i=0,o=t.length;i<o;++i){var n,r=e[n=t[i]];0===(n=n.toLowerCase()).indexOf("x-amz")&&a.push(n+":"+r)}return a.sort().join("\n")},e.exports.canonicalizeResource=function(e){var a=o(e,!0),t=a.pathname,i=[];return Object.keys(a.query).forEach(function(e){if(~n.indexOf(e)){var t=""==a.query[e]?"":"="+encodeURIComponent(a.query[e]);i.push(e+t)}}),t+(i.length?"?"+i.sort().join("&"):"")}},function(e,a,t){var i=a,o=t(9),n=t(23),r=t(2),s=t(125)(1e3);function c(e,a,t){return r.createHmac("sha256",e).update(a,"utf8").digest(t)}function p(e,a){return r.createHash("sha256").update(e,"utf8").digest(a)}function u(e){return e.replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e,a){"string"==typeof e&&(e=o.parse(e));var t=e.headers=e.headers||{},i=this.matchHost(e.hostname||e.host||t.Host||t.host);this.request=e,this.credentials=a||this.defaultCredentials(),this.service=e.service||i[0]||"",this.region=e.region||i[1]||"us-east-1","email"===this.service&&(this.service="ses"),!e.method&&e.body&&(e.method="POST"),t.Host||t.host||(t.Host=e.hostname||e.host||this.createHost(),e.port&&(t.Host+=":"+e.port)),e.hostname||e.host||(e.hostname=t.Host||t.host),this.isCodeCommitGit="codecommit"===this.service&&"GIT"===e.method}l.prototype.matchHost=function(e){var a=((e||"").match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(\.cn)?$/)||[]).slice(1,3);return"es"===a[1]&&(a=a.reverse()),a},l.prototype.isSingleRegion=function(){return["s3","sdb"].indexOf(this.service)>=0&&"us-east-1"===this.region||["cloudfront","ls","route53","iam","importexport","sts"].indexOf(this.service)>=0},l.prototype.createHost=function(){var e=this.isSingleRegion()?"":("s3"===this.service&&"us-east-1"!==this.region?"-":".")+this.region;return("ses"===this.service?"email":this.service)+e+".amazonaws.com"},l.prototype.prepareRequest=function(){this.parsePath();var e,a=this.request,t=a.headers;a.signQuery?(this.parsedPath.query=e=this.parsedPath.query||{},this.credentials.sessionToken&&(e["X-Amz-Security-Token"]=this.credentials.sessionToken),"s3"!==this.service||e["X-Amz-Expires"]||(e["X-Amz-Expires"]=86400),e["X-Amz-Date"]?this.datetime=e["X-Amz-Date"]:e["X-Amz-Date"]=this.getDateTime(),e["X-Amz-Algorithm"]="AWS4-HMAC-SHA256",e["X-Amz-Credential"]=this.credentials.accessKeyId+"/"+this.credentialString(),e["X-Amz-SignedHeaders"]=this.signedHeaders()):(a.doNotModifyHeaders||this.isCodeCommitGit||(!a.body||t["Content-Type"]||t["content-type"]||(t["Content-Type"]="application/x-www-form-urlencoded; charset=utf-8"),!a.body||t["Content-Length"]||t["content-length"]||(t["Content-Length"]=Buffer.byteLength(a.body)),!this.credentials.sessionToken||t["X-Amz-Security-Token"]||t["x-amz-security-token"]||(t["X-Amz-Security-Token"]=this.credentials.sessionToken),"s3"!==this.service||t["X-Amz-Content-Sha256"]||t["x-amz-content-sha256"]||(t["X-Amz-Content-Sha256"]=p(this.request.body||"","hex")),t["X-Amz-Date"]||t["x-amz-date"]?this.datetime=t["X-Amz-Date"]||t["x-amz-date"]:t["X-Amz-Date"]=this.getDateTime()),delete t.Authorization,delete t.authorization)},l.prototype.sign=function(){return this.parsedPath||this.prepareRequest(),this.request.signQuery?this.parsedPath.query["X-Amz-Signature"]=this.signature():this.request.headers.Authorization=this.authHeader(),this.request.path=this.formatPath(),this.request},l.prototype.getDateTime=function(){if(!this.datetime){var e=this.request.headers,a=new Date(e.Date||e.date||new Date);this.datetime=a.toISOString().replace(/[:\-]|\.\d{3}/g,""),this.isCodeCommitGit&&(this.datetime=this.datetime.slice(0,-1))}return this.datetime},l.prototype.getDate=function(){return this.getDateTime().substr(0,8)},l.prototype.authHeader=function(){return["AWS4-HMAC-SHA256 Credential="+this.credentials.accessKeyId+"/"+this.credentialString(),"SignedHeaders="+this.signedHeaders(),"Signature="+this.signature()].join(", ")},l.prototype.signature=function(){var e,a,t,i=this.getDate(),o=[this.credentials.secretAccessKey,i,this.region,this.service].join(),n=s.get(o);return n||(e=c("AWS4"+this.credentials.secretAccessKey,i),a=c(e,this.region),t=c(a,this.service),n=c(t,"aws4_request"),s.set(o,n)),c(n,this.stringToSign(),"hex")},l.prototype.stringToSign=function(){return["AWS4-HMAC-SHA256",this.getDateTime(),this.credentialString(),p(this.canonicalString(),"hex")].join("\n")},l.prototype.canonicalString=function(){this.parsedPath||this.prepareRequest();var e,a=this.parsedPath.path,t=this.parsedPath.query,i=this.request.headers,o="",r="s3"!==this.service,s="s3"===this.service||this.request.doNotEncodePath,c="s3"===this.service,l="s3"===this.service;return e="s3"===this.service&&this.request.signQuery?"UNSIGNED-PAYLOAD":this.isCodeCommitGit?"":i["X-Amz-Content-Sha256"]||i["x-amz-content-sha256"]||p(this.request.body||"","hex"),t&&(o=u(n.stringify(Object.keys(t).sort().reduce(function(e,a){return a?(e[a]=Array.isArray(t[a])?l?t[a][0]:t[a].slice().sort():t[a],e):e},{})))),"/"!==a&&(r&&(a=a.replace(/\/{2,}/g,"/")),"/"!==(a=a.split("/").reduce(function(e,a){return r&&".."===a?e.pop():r&&"."===a||(s&&(a=decodeURIComponent(a)),e.push(u(encodeURIComponent(a)))),e},[]).join("/"))[0]&&(a="/"+a),c&&(a=a.replace(/%2F/g,"/"))),[this.request.method||"GET",a,o,this.canonicalHeaders()+"\n",this.signedHeaders(),e].join("\n")},l.prototype.canonicalHeaders=function(){var e=this.request.headers;return Object.keys(e).sort(function(e,a){return e.toLowerCase()<a.toLowerCase()?-1:1}).map(function(a){return a.toLowerCase()+":"+e[a].toString().trim().replace(/\s+/g," ")}).join("\n")},l.prototype.signedHeaders=function(){return Object.keys(this.request.headers).map(function(e){return e.toLowerCase()}).sort().join(";")},l.prototype.credentialString=function(){return[this.getDate(),this.region,this.service,"aws4_request"].join("/")},l.prototype.defaultCredentials=function(){var e=process.env;return{accessKeyId:e.AWS_ACCESS_KEY_ID||e.AWS_ACCESS_KEY,secretAccessKey:e.AWS_SECRET_ACCESS_KEY||e.AWS_SECRET_KEY,sessionToken:e.AWS_SESSION_TOKEN}},l.prototype.parsePath=function(){var e=this.request.path||"/",a=e.indexOf("?"),t=null;a>=0&&(t=n.parse(e.slice(a+1)),e=e.slice(0,a)),/[^0-9A-Za-z!'()*\-._~%\/]/.test(e)&&(e=e.split("/").map(function(e){return encodeURIComponent(decodeURIComponent(e))}).join("/")),this.parsedPath={path:e,query:t}},l.prototype.formatPath=function(){var e=this.parsedPath.path,a=this.parsedPath.query;return a?(null!=a[""]&&delete a[""],e+"?"+u(n.stringify(a))):e},i.RequestSigner=l,i.sign=function(e,a){return new l(e,a).sign()}},function(e,a){function t(e){this.capacity=0|e,this.map=Object.create(null),this.list=new i}function i(){this.firstNode=null,this.lastNode=null}function o(e,a){this.key=e,this.val=a,this.prev=null,this.next=null}e.exports=function(e){return new t(e)},t.prototype.get=function(e){var a=this.map[e];if(null!=a)return this.used(a),a.val},t.prototype.set=function(e,a){var t=this.map[e];if(null!=t)t.val=a;else{if(this.capacity||this.prune(),!this.capacity)return!1;t=new o(e,a),this.map[e]=t,this.capacity--}return this.used(t),!0},t.prototype.used=function(e){this.list.moveToFront(e)},t.prototype.prune=function(){var e=this.list.pop();null!=e&&(delete this.map[e.key],this.capacity++)},i.prototype.moveToFront=function(e){this.firstNode!=e&&(this.remove(e),null==this.firstNode?(this.firstNode=e,this.lastNode=e,e.prev=null,e.next=null):(e.prev=null,e.next=this.firstNode,e.next.prev=e,this.firstNode=e))},i.prototype.pop=function(){var e=this.lastNode;return null!=e&&this.remove(e),e},i.prototype.remove=function(e){this.firstNode==e?this.firstNode=e.next:null!=e.prev&&(e.prev.next=e.next),this.lastNode==e?this.lastNode=e.prev:null!=e.next&&(e.next.prev=e.prev)}},function(e,a,t){var i=t(127),o=t(135),n=t(142),r=t(33);e.exports={parse:i.parseRequest,parseRequest:i.parseRequest,sign:o.signRequest,signRequest:o.signRequest,createSigner:o.createSigner,isSigner:o.isSigner,sshKeyToPEM:r.sshKeyToPEM,sshKeyFingerprint:r.fingerprint,pemToRsaSSHKey:r.pemToRsaSSHKey,verify:n.verifySignature,verifySignature:n.verifySignature,verifyHMAC:n.verifyHMAC}},function(e,a,t){var i=t(0),o=t(1),n=t(33),r=(n.HASH_ALGOS,n.PK_ALGOS,n.HttpSignatureError),s=n.InvalidAlgorithmError,c=n.validateAlgorithm,p=0,u=1,l=0,m=1,d=2,h=3;function f(e){r.call(this,e,f)}function v(e){r.call(this,e,v)}function g(e){r.call(this,e,g)}function b(e){r.call(this,e,b)}function y(e){r.call(this,e,y)}o.inherits(f,r),o.inherits(v,r),o.inherits(g,r),o.inherits(b,r),o.inherits(y,r),e.exports={parseRequest:function(e,a){i.object(e,"request"),i.object(e.headers,"request.headers"),void 0===a&&(a={}),void 0===a.headers&&(a.headers=[e.headers["x-date"]?"x-date":"date"]),i.object(a,"options"),i.arrayOfString(a.headers,"options.headers"),i.optionalFinite(a.clockSkew,"options.clockSkew");var t=a.authorizationHeaderName||"authorization";if(!e.headers[t])throw new b("no "+t+" header present in the request");a.clockSkew=a.clockSkew||300;var o,n=0,r=p,x=l,k="",w="",j={scheme:"",params:{},signingString:""},E=e.headers[t];for(n=0;n<E.length;n++){var S=E.charAt(n);switch(Number(r)){case p:" "!==S?j.scheme+=S:r=u;break;case u:switch(Number(x)){case l:var _=S.charCodeAt(0);if(_>=65&&_<=90||_>=97&&_<=122)k+=S;else{if("="!==S)throw new v("bad param format");if(0===k.length)throw new v("bad param format");x=m}break;case m:if('"'!==S)throw new v("bad param format");w="",x=d;break;case d:'"'===S?(j.params[k]=w,x=h):w+=S;break;case h:if(","!==S)throw new v("bad param format");k="",x=l;break;default:throw new Error("Invalid substate")}break;default:throw new Error("Invalid substate")}}if(j.params.headers&&""!==j.params.headers?j.params.headers=j.params.headers.split(" "):e.headers["x-date"]?j.params.headers=["x-date"]:j.params.headers=["date"],!j.scheme||"Signature"!==j.scheme)throw new v('scheme was not "Signature"');if(!j.params.keyId)throw new v("keyId was not specified");if(!j.params.algorithm)throw new v("algorithm was not specified");if(!j.params.signature)throw new v("signature was not specified");j.params.algorithm=j.params.algorithm.toLowerCase();try{c(j.params.algorithm)}catch(e){throw e instanceof s?new g(j.params.algorithm+" is not supported"):e}for(n=0;n<j.params.headers.length;n++){var R=j.params.headers[n].toLowerCase();if(j.params.headers[n]=R,"request-line"===R){if(a.strict)throw new y("request-line is not a valid header with strict parsing enabled.");j.signingString+=e.method+" "+e.url+" HTTP/"+e.httpVersion}else if("(request-target)"===R)j.signingString+="(request-target): "+e.method.toLowerCase()+" "+e.url;else{var A=e.headers[R];if(void 0===A)throw new b(R+" was not in the request");j.signingString+=R+": "+A}n+1<j.params.headers.length&&(j.signingString+="\n")}if(e.headers.date||e.headers["x-date"]){o=e.headers["x-date"]?new Date(e.headers["x-date"]):new Date(e.headers.date);var C=new Date,q=Math.abs(C.getTime()-o.getTime());if(q>1e3*a.clockSkew)throw new f("clock skew of "+q/1e3+"s was greater than "+a.clockSkew+"s")}if(a.headers.forEach(function(e){if(j.params.headers.indexOf(e.toLowerCase())<0)throw new b(e+" was not a signed header")}),a.algorithms&&-1===a.algorithms.indexOf(j.params.algorithm))throw new g(j.params.algorithm+" is not a supported algorithm");return j.algorithm=j.params.algorithm.toUpperCase(),j.keyId=j.params.keyId,j}}},function(e,a,t){var i=t(42),o=t(43),n=t(129),r=t(130);for(var s in e.exports={Reader:n,Writer:r},o)o.hasOwnProperty(s)&&(e.exports[s]=o[s]);for(var c in i)i.hasOwnProperty(c)&&(e.exports[c]=i[c])},function(e,a,t){var i=t(20),o=t(3).Buffer,n=t(43),r=t(42).newInvalidAsn1Error;function s(e){if(!e||!o.isBuffer(e))throw new TypeError("data must be a node Buffer");this._buf=e,this._size=e.length,this._len=0,this._offset=0}Object.defineProperty(s.prototype,"length",{enumerable:!0,get:function(){return this._len}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){return this._offset}}),Object.defineProperty(s.prototype,"remain",{get:function(){return this._size-this._offset}}),Object.defineProperty(s.prototype,"buffer",{get:function(){return this._buf.slice(this._offset)}}),s.prototype.readByte=function(e){if(this._size-this._offset<1)return null;var a=255&this._buf[this._offset];return e||(this._offset+=1),a},s.prototype.peek=function(){return this.readByte(!0)},s.prototype.readLength=function(e){if(void 0===e&&(e=this._offset),e>=this._size)return null;var a=255&this._buf[e++];if(null===a)return null;if(128==(128&a)){if(0===(a&=127))throw r("Indefinite length not supported");if(a>4)throw r("encoding too long");if(this._size-e<a)return null;this._len=0;for(var t=0;t<a;t++)this._len=(this._len<<8)+(255&this._buf[e++])}else this._len=a;return e},s.prototype.readSequence=function(e){var a=this.peek();if(null===a)return null;if(void 0!==e&&e!==a)throw r("Expected 0x"+e.toString(16)+": got 0x"+a.toString(16));var t=this.readLength(this._offset+1);return null===t?null:(this._offset=t,a)},s.prototype.readInt=function(){return this._readTag(n.Integer)},s.prototype.readBoolean=function(){return 0!==this._readTag(n.Boolean)},s.prototype.readEnumeration=function(){return this._readTag(n.Enumeration)},s.prototype.readString=function(e,a){e||(e=n.OctetString);var t=this.peek();if(null===t)return null;if(t!==e)throw r("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var i=this.readLength(this._offset+1);if(null===i)return null;if(this.length>this._size-i)return null;if(this._offset=i,0===this.length)return a?o.alloc(0):"";var s=this._buf.slice(this._offset,this._offset+this.length);return this._offset+=this.length,a?s:s.toString("utf8")},s.prototype.readOID=function(e){e||(e=n.OID);var a=this.readString(e,!0);if(null===a)return null;for(var t=[],i=0,o=0;o<a.length;o++){var r=255&a[o];i<<=7,i+=127&r,0==(128&r)&&(t.push(i),i=0)}return i=t.shift(),t.unshift(i%40),t.unshift(i/40>>0),t.join(".")},s.prototype._readTag=function(e){i.ok(void 0!==e);var a=this.peek();if(null===a)return null;if(a!==e)throw r("Expected 0x"+e.toString(16)+": got 0x"+a.toString(16));var t=this.readLength(this._offset+1);if(null===t)return null;if(this.length>4)throw r("Integer too long: "+this.length);if(this.length>this._size-t)return null;this._offset=t;for(var o=this._buf[this._offset],n=0,s=0;s<this.length;s++)n<<=8,n|=255&this._buf[this._offset++];return 128==(128&o)&&4!==s&&(n-=1<<8*s),n>>0},e.exports=s},function(e,a,t){var i=t(20),o=t(3).Buffer,n=t(43),r=t(42).newInvalidAsn1Error,s={size:1024,growthFactor:8};function c(e){var a,t;a=s,t=e||{},i.ok(a),i.equal(typeof a,"object"),i.ok(t),i.equal(typeof t,"object"),Object.getOwnPropertyNames(a).forEach(function(e){if(!t[e]){var i=Object.getOwnPropertyDescriptor(a,e);Object.defineProperty(t,e,i)}}),e=t,this._buf=o.alloc(e.size||1024),this._size=this._buf.length,this._offset=0,this._options=e,this._seq=[]}Object.defineProperty(c.prototype,"buffer",{get:function(){if(this._seq.length)throw r(this._seq.length+" unended sequence(s)");return this._buf.slice(0,this._offset)}}),c.prototype.writeByte=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");this._ensure(1),this._buf[this._offset++]=e},c.prototype.writeInt=function(e,a){if("number"!=typeof e)throw new TypeError("argument must be a Number");"number"!=typeof a&&(a=n.Integer);for(var t=4;(0==(4286578688&e)||-8388608==(4286578688&e))&&t>1;)t--,e<<=8;if(t>4)throw r("BER ints cannot be > 0xffffffff");for(this._ensure(2+t),this._buf[this._offset++]=a,this._buf[this._offset++]=t;t-- >0;)this._buf[this._offset++]=(4278190080&e)>>>24,e<<=8},c.prototype.writeNull=function(){this.writeByte(n.Null),this.writeByte(0)},c.prototype.writeEnumeration=function(e,a){if("number"!=typeof e)throw new TypeError("argument must be a Number");return"number"!=typeof a&&(a=n.Enumeration),this.writeInt(e,a)},c.prototype.writeBoolean=function(e,a){if("boolean"!=typeof e)throw new TypeError("argument must be a Boolean");"number"!=typeof a&&(a=n.Boolean),this._ensure(3),this._buf[this._offset++]=a,this._buf[this._offset++]=1,this._buf[this._offset++]=e?255:0},c.prototype.writeString=function(e,a){if("string"!=typeof e)throw new TypeError("argument must be a string (was: "+typeof e+")");"number"!=typeof a&&(a=n.OctetString);var t=o.byteLength(e);this.writeByte(a),this.writeLength(t),t&&(this._ensure(t),this._buf.write(e,this._offset),this._offset+=t)},c.prototype.writeBuffer=function(e,a){if("number"!=typeof a)throw new TypeError("tag must be a number");if(!o.isBuffer(e))throw new TypeError("argument must be a buffer");this.writeByte(a),this.writeLength(e.length),this._ensure(e.length),e.copy(this._buf,this._offset,0,e.length),this._offset+=e.length},c.prototype.writeStringArray=function(e){if(!e instanceof Array)throw new TypeError("argument must be an Array[String]");var a=this;e.forEach(function(e){a.writeString(e)})},c.prototype.writeOID=function(e,a){if("string"!=typeof e)throw new TypeError("argument must be a string");if("number"!=typeof a&&(a=n.OID),!/^([0-9]+\.){3,}[0-9]+$/.test(e))throw new Error("argument is not a valid OID string");var t=e.split("."),i=[];i.push(40*parseInt(t[0],10)+parseInt(t[1],10)),t.slice(2).forEach(function(e){!function(e,a){a<128?e.push(a):a<16384?(e.push(a>>>7|128),e.push(127&a)):a<2097152?(e.push(a>>>14|128),e.push(255&(a>>>7|128)),e.push(127&a)):a<268435456?(e.push(a>>>21|128),e.push(255&(a>>>14|128)),e.push(255&(a>>>7|128)),e.push(127&a)):(e.push(255&(a>>>28|128)),e.push(255&(a>>>21|128)),e.push(255&(a>>>14|128)),e.push(255&(a>>>7|128)),e.push(127&a))}(i,parseInt(e,10))});var o=this;this._ensure(2+i.length),this.writeByte(a),this.writeLength(i.length),i.forEach(function(e){o.writeByte(e)})},c.prototype.writeLength=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");if(this._ensure(4),e<=127)this._buf[this._offset++]=e;else if(e<=255)this._buf[this._offset++]=129,this._buf[this._offset++]=e;else if(e<=65535)this._buf[this._offset++]=130,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e;else{if(!(e<=16777215))throw r("Length too long (> 4 bytes)");this._buf[this._offset++]=131,this._buf[this._offset++]=e>>16,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e}},c.prototype.startSequence=function(e){"number"!=typeof e&&(e=n.Sequence|n.Constructor),this.writeByte(e),this._seq.push(this._offset),this._ensure(3),this._offset+=3},c.prototype.endSequence=function(){var e=this._seq.pop(),a=e+3,t=this._offset-a;if(t<=127)this._shift(a,t,-2),this._buf[e]=t;else if(t<=255)this._shift(a,t,-1),this._buf[e]=129,this._buf[e+1]=t;else if(t<=65535)this._buf[e]=130,this._buf[e+1]=t>>8,this._buf[e+2]=t;else{if(!(t<=16777215))throw r("Sequence too long");this._shift(a,t,1),this._buf[e]=131,this._buf[e+1]=t>>16,this._buf[e+2]=t>>8,this._buf[e+3]=t}},c.prototype._shift=function(e,a,t){i.ok(void 0!==e),i.ok(void 0!==a),i.ok(t),this._buf.copy(this._buf,e+t,e,e+a),this._offset+=t},c.prototype._ensure=function(e){if(i.ok(e),this._size-this._offset<e){var a=this._size*this._options.growthFactor;a-this._offset<e&&(a+=e);var t=o.alloc(a);this._buf.copy(t,0,0,this._offset),this._buf=t,this._size=a}},e.exports=c},function(e,a,t){var i=t(2),o=t(25).BigInteger,n=(t(34).ECPointFp,t(3).Buffer);function r(e,a){return e.length>=a?e:r("0"+e,a)}a.ECCurves=t(132),a.ECKey=function(e,a,t){var s,c=e(),p=c.getN(),u=Math.floor(p.bitLength()/8);if(a)if(t){e=c.getCurve();this.P=e.decodePointHex(a.toString("hex"))}else{if(a.length!=u)return!1;s=new o(a.toString("hex"),16)}else{var l=p.subtract(o.ONE),m=new o(i.randomBytes(p.bitLength()));s=m.mod(l).add(o.ONE),this.P=c.getG().multiply(s)}this.P&&(this.PublicKey=n.from(c.getCurve().encodeCompressedPointHex(this.P),"hex")),s&&(this.PrivateKey=n.from(r(s.toString(16),2*u),"hex"),this.deriveSharedSecret=function(e){if(!e||!e.P)return!1;var a=e.P.multiply(s);return n.from(r(a.getX().toBigInteger().toString(16),2*u),"hex")})}},function(e,a,t){var i=t(25).BigInteger,o=t(34).ECCurveFp;function n(e,a,t,i){this.curve=e,this.g=a,this.n=t,this.h=i}function r(e){return new i(e,16)}function s(){var e=r("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF"),a=r("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC"),t=r("E87579C11079F43DD824993C2CEE5ED3"),s=r("FFFFFFFE0000000075A30D1B9038A115"),c=i.ONE,p=new o(e,a,t),u=p.decodePointHex("04161FF7528B899B2D0C28607CA52C5B86CF5AC8395BAFEB13C02DA292DDED7A83");return new n(p,u,s,c)}function c(){var e=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73"),a=i.ZERO,t=r("7"),s=r("0100000000000000000001B8FA16DFAB9ACA16B6B3"),c=i.ONE,p=new o(e,a,t),u=p.decodePointHex("043B4C382CE37AA192A4019E763036F4F5DD4D7EBB938CF935318FDCED6BC28286531733C3F03C4FEE");return new n(p,u,s,c)}function p(){var e=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF"),a=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC"),t=r("1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45"),s=r("0100000000000000000001F4C8F927AED3CA752257"),c=i.ONE,p=new o(e,a,t),u=p.decodePointHex("044A96B5688EF573284664698968C38BB913CBFC8223A628553168947D59DCC912042351377AC5FB32");return new n(p,u,s,c)}function u(){var e=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37"),a=i.ZERO,t=r("3"),s=r("FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D"),c=i.ONE,p=new o(e,a,t),u=p.decodePointHex("04DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D");return new n(p,u,s,c)}function l(){var e=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF"),a=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC"),t=r("64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1"),s=r("FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831"),c=i.ONE,p=new o(e,a,t),u=p.decodePointHex("04188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF101207192B95FFC8DA78631011ED6B24CDD573F977A11E794811");return new n(p,u,s,c)}function m(){var e=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001"),a=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE"),t=r("B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4"),s=r("FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D"),c=i.ONE,p=new o(e,a,t),u=p.decodePointHex("04B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34");return new n(p,u,s,c)}function d(){var e=r("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"),a=r("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"),t=r("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"),s=r("FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"),c=i.ONE,p=new o(e,a,t),u=p.decodePointHex("046B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C2964FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5");return new n(p,u,s,c)}n.prototype.getCurve=function(){return this.curve},n.prototype.getG=function(){return this.g},n.prototype.getN=function(){return this.n},n.prototype.getH=function(){return this.h},e.exports={secp128r1:s,secp160k1:c,secp160r1:p,secp192k1:u,secp192r1:l,secp224r1:m,secp256r1:d}},function(e,a,t){e.exports={read:function(e,a){r.isBuffer(e)&&(e=e.toString("ascii"));var t=e.trim().split(/[ \t\n]+/g);if(t.length<2||t.length>3)throw new Error("Not a valid SSH certificate line");var i=t[0],o=t[1];return v(o=r.from(o,"base64"),i)},verify:function(e,a){return!1},sign:function(e,a){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var t=y(e,!0)}catch(a){return delete e.signatures.openssh,!1}var i=e.signatures.openssh,o=void 0;"rsa"!==a.type&&"dsa"!==a.type||(o="sha1");var n=a.createSign(o);return n.write(t),i.signature=n.sign(),!0},signAsync:function(e,a,t){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var i=y(e,!0)}catch(a){return delete e.signatures.openssh,void t(a)}var o=e.signatures.openssh;a(i,function(e,a){if(e)t(e);else{try{a.toBuffer("ssh")}catch(e){return void t(e)}o.signature=a,t()}})},write:function(e,a){void 0===a&&(a={});var t=y(e),i=x(e.subjectKey)+" "+t.toString("base64");a.comment&&(i=i+" "+a.comment);return i},fromBuffer:v,toBuffer:y};var i=t(0),o=t(27),n=t(2),r=t(3).Buffer,s=t(7),c=t(4),p=(t(6),t(30)),u=t(16),l=t(13),m=t(5),d=t(29);var h={user:1,host:2};Object.keys(h).forEach(function(e){h[h[e]]=e});var f=/^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;function v(e,a,t){var n=new o({buffer:e}),r=n.readString();if(void 0!==a&&r!==a)throw new Error("SSH certificate algorithm mismatch");void 0===a&&(a=r);var v={signatures:{}};v.signatures.openssh={},v.signatures.openssh.nonce=n.readBuffer();var b={},y=b.parts=[];b.type=function(e){if("ssh-rsa-cert-v01@openssh.com"===e)return"rsa";if("ssh-dss-cert-v01@openssh.com"===e)return"dsa";if(e.match(f))return"ecdsa";if("ssh-ed25519-cert-v01@openssh.com"===e)return"ed25519";throw new Error("Unsupported cert type "+e)}(a);for(var x=s.info[b.type].parts.length;y.length<x;)y.push(n.readPart());i.ok(y.length>=1,"key must have at least one part");var k=s.info[b.type];if("ecdsa"===b.type){var w=f.exec(a);i.ok(null!==w),i.strictEqual(w[1],y[0].data.toString())}for(var j=0;j<k.parts.length;++j)if(y[j].name=k.parts[j],"curve"!==y[j].name&&!1!==k.normalize){var E=y[j];E.data=m.mpNormalize(E.data)}v.subjectKey=new c(b),v.serial=n.readInt64();var S=h[n.readInt()];i.string(S,"valid cert type"),v.signatures.openssh.keyId=n.readString();for(var _=[],R=n.readBuffer(),A=new o({buffer:R});!A.atEnd();)_.push(A.readString());0===_.length&&(_=["*"]),v.subjects=_.map(function(e){if("user"===S)return p.forUser(e);if("host"===S)return p.forHost(e);throw new Error("Unknown identity type "+S)}),v.validFrom=g(n.readInt64()),v.validUntil=g(n.readInt64());for(var C,q=[],O=new o({buffer:n.readBuffer()});!O.atEnd();)(C={critical:!0}).name=O.readString(),C.data=O.readBuffer(),q.push(C);for(O=new o({buffer:n.readBuffer()});!O.atEnd();)(C={critical:!1}).name=O.readString(),C.data=O.readBuffer(),q.push(C);v.signatures.openssh.exts=q,n.readBuffer();var z=n.readBuffer();v.issuerKey=u.read(z),v.issuer=p.forHost("**");var P=n.readBuffer();return v.signatures.openssh.signature=l.parse(P,v.issuerKey.type,"ssh"),void 0!==t&&(t.remainder=n.remainder(),t.consumed=n._offset),new d(v)}function g(e){var a=4294967296*e.readUInt32BE(0);a+=e.readUInt32BE(4);var t=new Date;return t.setTime(1e3*a),t.sourceInt64=e,t}function b(e){if(void 0!==e.sourceInt64)return e.sourceInt64;var a=Math.round(e.getTime()/1e3),t=Math.floor(a/4294967296),i=Math.floor(a%4294967296),o=r.alloc(8);return o.writeUInt32BE(t,0),o.writeUInt32BE(i,4),o}function y(e,a){i.object(e.signatures.openssh,"signature for openssh format");var t=e.signatures.openssh;void 0===t.nonce&&(t.nonce=n.randomBytes(16));var c=new o({});c.writeString(x(e.subjectKey)),c.writeBuffer(t.nonce);var p=e.subjectKey;s.info[p.type].parts.forEach(function(e){c.writePart(p.part[e])}),c.writeInt64(e.serial);var l=e.subjects[0].type;i.notStrictEqual(l,"unknown"),e.subjects.forEach(function(e){i.strictEqual(e.type,l)}),l=h[l],c.writeInt(l),void 0===t.keyId&&(t.keyId=e.subjects[0].type+"_"+(e.subjects[0].uid||e.subjects[0].hostname)),c.writeString(t.keyId);var m=new o({});e.subjects.forEach(function(e){l===h.host?m.writeString(e.hostname):l===h.user&&m.writeString(e.uid)}),c.writeBuffer(m.toBuffer()),c.writeInt64(b(e.validFrom)),c.writeInt64(b(e.validUntil));var d=t.exts;void 0===d&&(d=[]);var f=new o({});return d.forEach(function(e){!0===e.critical&&(f.writeString(e.name),f.writeBuffer(e.data))}),c.writeBuffer(f.toBuffer()),f=new o({}),d.forEach(function(e){!0!==e.critical&&(f.writeString(e.name),f.writeBuffer(e.data))}),c.writeBuffer(f.toBuffer()),c.writeBuffer(r.alloc(0)),m=u.write(e.issuerKey),c.writeBuffer(m),a||c.writeBuffer(t.signature.toBuffer("ssh")),c.toBuffer()}function x(e){if("rsa"===e.type)return"ssh-rsa-cert-v01@openssh.com";if("dsa"===e.type)return"ssh-dss-cert-v01@openssh.com";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.curve+"-cert-v01@openssh.com";if("ed25519"===e.type)return"ssh-ed25519-cert-v01@openssh.com";throw new Error("Unsupported key type "+e.type)}},function(e,a,t){var i=t(65);e.exports={read:function(e,a){"string"!=typeof e&&(o.buffer(e,"buf"),e=e.toString("ascii"));var t,r,s=e.trim().split(/[\r\n]+/g),c=-1;for(;!t&&c<s.length;)t=s[++c].match(/[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);o.ok(t,"invalid PEM header");var p=s.length;for(;!r&&p>0;)r=s[--p].match(/[-]+[ ]*END CERTIFICATE[ ]*[-]+/);o.ok(r,"invalid PEM footer"),s=s.slice(c,p+1);var u={};for(;s=s.slice(1),t=s[0].match(/^([A-Za-z0-9-]+): (.+)$/);)u[t[1].toLowerCase()]=t[2];return s=s.slice(0,-1).join(""),e=n.from(s,"base64"),i.read(e,a)},verify:i.verify,sign:i.sign,write:function(e,a){var t=i.write(e,a),o=t.toString("base64"),r=o.length+o.length/64+18+16+2*"CERTIFICATE".length+10,s=n.alloc(r),c=0;c+=s.write("-----BEGIN CERTIFICATE-----\n",c);for(var p=0;p<o.length;){var u=p+64;u>o.length&&(u=o.length),c+=s.write(o.slice(p,u),c),s[c++]=10,p=u}return c+=s.write("-----END CERTIFICATE-----\n",c),s.slice(0,c)}};var o=t(0),n=(t(14),t(3).Buffer);t(7),t(5),t(4),t(6),t(15),t(30),t(13),t(29)},function(e,a,t){var i=t(0),o=t(2),n=(t(17),t(1)),r=t(41),s=t(136),c=t(33),p=t(1).format,u=c.HASH_ALGOS,l=c.PK_ALGOS,m=c.InvalidAlgorithmError,d=c.HttpSignatureError,h=c.validateAlgorithm,f='Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';function v(e){d.call(this,e,v)}function g(e){d.call(this,e,g)}function b(e){i.object(e,"options");var a=[];if(void 0!==e.algorithm&&(i.string(e.algorithm,"options.algorithm"),a=h(e.algorithm)),this.rs_alg=a,void 0!==e.sign)i.func(e.sign,"options.sign"),this.rs_signFunc=e.sign;else if("hmac"===a[0]&&void 0!==e.key){if(i.string(e.keyId,"options.keyId"),this.rs_keyId=e.keyId,"string"!=typeof e.key&&!Buffer.isBuffer(e.key))throw new TypeError("options.key for HMAC must be a string or Buffer");this.rs_signer=o.createHmac(a[1].toUpperCase(),e.key),this.rs_signer.sign=function(){var e=this.digest("base64");return{hashAlgorithm:a[1],toString:function(){return e}}}}else{if(void 0===e.key)throw new TypeError("options.sign (func) or options.key is required");var t=e.key;if(("string"==typeof t||Buffer.isBuffer(t))&&(t=r.parsePrivateKey(t)),i.ok(r.PrivateKey.isPrivateKey(t,[1,2]),"options.key must be a sshpk.PrivateKey"),this.rs_key=t,i.string(e.keyId,"options.keyId"),this.rs_keyId=e.keyId,!l[t.type])throw new m(t.type.toUpperCase()+" type keys are not supported");if(void 0!==a[0]&&t.type!==a[0])throw new m("options.key must be a "+a[0].toUpperCase()+" key, was given a "+t.type.toUpperCase()+" key instead");this.rs_signer=t.createSign(a[1])}this.rs_headers=[],this.rs_lines=[]}n.inherits(v,d),n.inherits(g,d),b.prototype.writeHeader=function(e,a){if(i.string(e,"header"),e=e.toLowerCase(),i.string(a,"value"),this.rs_headers.push(e),this.rs_signFunc)this.rs_lines.push(e+": "+a);else{var t=e+": "+a;this.rs_headers.length>0&&(t="\n"+t),this.rs_signer.update(t)}return a},b.prototype.writeDateHeader=function(){return this.writeHeader("date",s.rfc1123(new Date))},b.prototype.writeTarget=function(e,a){i.string(e,"method"),i.string(a,"path"),e=e.toLowerCase(),this.writeHeader("(request-target)",e+" "+a)},b.prototype.sign=function(e){if(i.func(e,"callback"),this.rs_headers.length<1)throw new Error("At least one header must be signed");var a,t;if(this.rs_signFunc){var o=this.rs_lines.join("\n"),n=this;this.rs_signFunc(o,function(o,r){if(o)e(o);else{try{i.object(r,"signature"),i.string(r.keyId,"signature.keyId"),i.string(r.algorithm,"signature.algorithm"),i.string(r.signature,"signature.signature"),a=h(r.algorithm),t=p(f,r.keyId,r.algorithm,n.rs_headers.join(" "),r.signature)}catch(a){return void e(a)}e(null,t)}})}else{try{var r=this.rs_signer.sign()}catch(a){return void e(a)}a=(this.rs_alg[0]||this.rs_key.type)+"-"+r.hashAlgorithm;var s=r.toString();t=p(f,this.rs_keyId,a,this.rs_headers.join(" "),s),e(null,t)}},e.exports={isSigner:function(e){return"object"==typeof e&&e instanceof b},createSigner:function(e){return new b(e)},signRequest:function(e,a){i.object(e,"request"),i.object(a,"options"),i.optionalString(a.algorithm,"options.algorithm"),i.string(a.keyId,"options.keyId"),i.optionalArrayOfString(a.headers,"options.headers"),i.optionalString(a.httpVersion,"options.httpVersion"),e.getHeader("Date")||e.setHeader("Date",s.rfc1123(new Date)),a.headers||(a.headers=["date"]),a.httpVersion||(a.httpVersion="1.1");var t,n=[];a.algorithm&&(a.algorithm=a.algorithm.toLowerCase(),n=h(a.algorithm));var c,d="";for(t=0;t<a.headers.length;t++){if("string"!=typeof a.headers[t])throw new TypeError("options.headers must be an array of Strings");var b=a.headers[t].toLowerCase();if("request-line"===b){if(a.strict)throw new g("request-line is not a valid header with strict parsing enabled.");d+=e.method+" "+e.path+" HTTP/"+a.httpVersion}else if("(request-target)"===b)d+="(request-target): "+e.method.toLowerCase()+" "+e.path;else{var y=e.getHeader(b);if(void 0===y||""===y)throw new v(b+" was not in the request");d+=b+": "+y}t+1<a.headers.length&&(d+="\n")}if(e.hasOwnProperty("_stringToSign")&&(e._stringToSign=d),"hmac"===n[0]){if("string"!=typeof a.key&&!Buffer.isBuffer(a.key))throw new TypeError("options.key must be a string or Buffer");var x=o.createHmac(n[1].toUpperCase(),a.key);x.update(d),c=x.digest("base64")}else{var k=a.key;if(("string"==typeof k||Buffer.isBuffer(k))&&(k=r.parsePrivateKey(a.key)),i.ok(r.PrivateKey.isPrivateKey(k,[1,2]),"options.key must be a sshpk.PrivateKey"),!l[k.type])throw new m(k.type.toUpperCase()+" type keys are not supported");if(void 0!==n[0]&&k.type!==n[0])throw new m("options.key must be a "+n[0].toUpperCase()+" key, was given a "+k.type.toUpperCase()+" key instead");var w=k.createSign(n[1]);w.update(d);var j=w.sign();if(!u[j.hashAlgorithm])throw new m(j.hashAlgorithm.toUpperCase()+" is not a supported hash algorithm");a.algorithm=k.type+"-"+j.hashAlgorithm,c=j.toString(),i.notStrictEqual(c,"","empty signature produced")}var E=a.authorizationHeaderName||"Authorization";return e.setHeader(E,p(f,a.keyId,a.algorithm,a.headers.join(" "),c)),!0}}},function(e,a,t){var i=t(0),o=(t(1),t(137)),n=t(138),r=t(141);function s(e,a){return i.equal(typeof a,"string"),Object.prototype.hasOwnProperty.call(e,a)}a.deepCopy=function e(a){var t,i;var o="__deepCopy";if(a&&a[o])throw new Error("attempted deep copy of cyclic object");if(a&&a.constructor==Object){for(i in t={},a[o]=!0,a)i!=o&&(t[i]=e(a[i]));return delete a[o],t}if(a&&a.constructor==Array){for(t=[],a[o]=!0,i=0;i<a.length;i++)t.push(e(a[i]));return delete a[o],t}return a},a.deepEqual=function e(a,t){if(typeof a!=typeof t)return!1;if(null===a||null===t||"object"!=typeof a)return a===t;if(a.constructor!=t.constructor)return!1;var i;for(i in a){if(!t.hasOwnProperty(i))return!1;if(!e(a[i],t[i]))return!1}for(i in t)if(!a.hasOwnProperty(i))return!1;return!0},a.isEmpty=function(e){var a;for(a in e)return!1;return!0},a.hasKey=s,a.forEachKey=function(e,a){for(var t in e)s(e,t)&&a(t,e[t])},a.pluck=function(e,a){return i.equal(typeof a,"string"),function e(a,t){if(null!==a&&"object"==typeof a){if(a.hasOwnProperty(t))return a[t];var i=t.indexOf(".");if(-1!=i){var o=t.substr(0,i);if(a.hasOwnProperty(o))return e(a[o],t.substr(i+1))}}}(e,a)},a.flattenObject=function e(a,t){if(0===t)return[a];i.ok(null!==a);i.equal(typeof a,"object");i.equal(typeof t,"number");i.ok(t>=0);var o=[];var n;for(n in a)e(a[n],t-1).forEach(function(e){o.push([n].concat(e))});return o},a.flattenIter=function(e,a,t){!function e(a,t,o,n){var r;var s;if(0===t)return(r=o.slice(0)).push(a),void n(r);i.ok(null!==a);i.equal(typeof a,"object");i.equal(typeof t,"number");i.ok(t>=0);for(s in a)(r=o.slice(0)).push(s),e(a[s],t-1,r,n)}(e,a,[],t)},a.validateJsonObject=z,a.validateJsonObjectJS=z,a.randElt=function(e){return i.ok(Array.isArray(e)&&e.length>0,"randElt argument must be a non-empty array"),e[Math.floor(Math.random()*e.length)]},a.extraProperties=function(e,a){i.ok("object"==typeof e&&null!==e,"obj argument must be a non-null object"),i.ok(Array.isArray(a),"allowed argument must be an array of strings");for(var t=0;t<a.length;t++)i.ok("string"==typeof a[t],"allowed argument must be an array of strings");return Object.keys(e).filter(function(e){return-1===a.indexOf(e)})},a.mergeObjects=I,a.startsWith=function(e,a){return e.substr(0,a.length)==a},a.endsWith=function(e,a){return e.substr(e.length-a.length,a.length)==a},a.parseInteger=function(e,a){i.string(e,"str"),i.optionalObject(a,"options");var t,o=!1,n=m;a&&(o=s(a,"base"),n=I(n,a),i.number(n.base,"options.base"),i.ok(n.base>=2,"options.base >= 2"),i.ok(n.base<=36,"options.base <= 36"),i.bool(n.allowSign,"options.allowSign"),i.bool(n.allowPrefix,"options.allowPrefix"),i.bool(n.allowTrailing,"options.allowTrailing"),i.bool(n.allowImprecise,"options.allowImprecise"),i.bool(n.trimWhitespace,"options.trimWhitespace"),i.bool(n.leadingZeroIsOctal,"options.leadingZeroIsOctal"),n.leadingZeroIsOctal&&i.ok(!o,'"base" and "leadingZeroIsOctal" are mutually exclusive'));var r,c=-1,p=n.base,d=1,h=0,f=0,x=e.length;if(n.trimWhitespace)for(;f<x&&O(e.charCodeAt(f));)++f;n.allowSign&&("-"===e[f]?(f+=1,d=-1):"+"===e[f]&&(f+=1));"0"===e[f]&&(n.allowPrefix&&(-1===(c=function(e){return e===w||e===v?2:e===j||e===g?8:e===E||e===b?10:e===S||e===y?16:-1}(e.charCodeAt(f+1)))||o&&c!==p||(p=c,f+=2)),-1===c&&n.leadingZeroIsOctal&&(p=8));for(r=f;f<x&&(-1!==(t=q(e.charCodeAt(f)))&&t<p);++f)h*=p,h+=t;if(r===f)return new Error("invalid number: "+JSON.stringify(e));if(n.trimWhitespace)for(;f<x&&O(e.charCodeAt(f));)++f;if(f<x&&!n.allowTrailing)return new Error("trailing characters after number: "+JSON.stringify(e.slice(f)));if(0===h)return 0;var k=h*d;if(!n.allowImprecise&&(h>u||k<l))return new Error("number is outside of the supported range: "+JSON.stringify(e.slice(r,f)));return k},a.iso8601=function(e){"number"==typeof e&&(e=new Date(e));return i.ok(e.constructor===Date),o.sprintf("%4d-%02d-%02dT%02d:%02d:%02d.%03dZ",e.getUTCFullYear(),e.getUTCMonth()+1,e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds())},a.rfc1123=function(e){return o.sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",p[e.getUTCDay()],e.getUTCDate(),c[e.getUTCMonth()],e.getUTCFullYear(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds())},a.parseDateTime=function(e){var a=+e;return isNaN(a)?new Date(e):new Date(a)},a.hrtimediff=F,a.hrtimeDiff=F,a.hrtimeAccum=T,a.hrtimeAdd=function(e,a){return P(e),T([e[0],e[1]],a)},a.hrtimeNanosec=function(e){return P(e),Math.floor(1e9*e[0]+e[1])},a.hrtimeMicrosec=function(e){return P(e),Math.floor(1e6*e[0]+e[1]/1e3)},a.hrtimeMillisec=function(e){return P(e),Math.floor(1e3*e[0]+e[1]/1e6)};var c=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],p=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];var u=Number.MAX_SAFE_INTEGER||9007199254740991,l=Number.MIN_SAFE_INTEGER||-9007199254740991,m={base:10,allowSign:!0,allowPrefix:!1,allowTrailing:!1,allowImprecise:!1,trimWhitespace:!1,leadingZeroIsOctal:!1},d=48,h=57,f=65,v=66,g=79,b=84,y=88,x=90,k=97,w=98,j=111,E=116,S=120,_=122,R=48,A=55,C=87;function q(e){return e>=d&&e<=h?e-R:e>=f&&e<=x?e-A:e>=k&&e<=_?e-C:-1}function O(e){return 32===e||e>=9&&e<=13||160===e||5760===e||6158===e||e>=8192&&e<=8202||8232===e||8233===e||8239===e||8287===e||12288===e||65279===e}function z(e,a){var t=r.validate(a,e);if(0===t.errors.length)return null;var i,o,s=t.errors[0],c=s.property,p=s.message.toLowerCase();-1!=(i=p.indexOf("the property "))&&-1!=(o=p.indexOf(" is not defined in the schema and the schema does not allow additional properties"))&&(i+="the property ".length,c=""===c?p.substr(i,o-i):c+"."+p.substr(i,o-i),p="unsupported property");var u=new n.VError('property "%s": %s',c,p);return u.jsv_details=s,u}function P(e){i.ok(e[0]>=0&&e[1]>=0,"negative numbers not allowed in hrtimes"),i.ok(e[1]<1e9,"nanoseconds column overflow")}function F(e,a){P(e),P(a),i.ok(e[0]>a[0]||e[0]==a[0]&&e[1]>=a[1],"negative differences not allowed");var t=[e[0]-a[0],0];return e[1]>=a[1]?t[1]=e[1]-a[1]:(t[0]--,t[1]=1e9-(a[1]-e[1])),t}function T(e,a){return P(e),P(a),e[1]+=a[1],e[1]>=1e9&&(e[0]++,e[1]-=1e9),e[0]+=a[0],e}function I(e,a,t){var i,o;if(i={},t)for(o in t)i[o]=t[o];if(e)for(o in e)i[o]=e[o];if(a)for(o in a)i[o]=a[o];return i}},function(e,a,t){var i=t(20),o=t(1);function n(e){var a,t,n,r,p,u,l,m,d,h=["([^%]*)","%","(['\\-+ #0]*?)","([1-9]\\d*)?","(\\.([1-9]\\d*))?","[lhjztL]*?","([diouxXfFeEgGaAcCsSp%jr])"].join(""),f=new RegExp(h),v=Array.prototype.slice.call(arguments,1),g="",b=1;for(i.equal("string",typeof e);null!==(d=f.exec(e));)if(g+=d[1],e=e.substring(d[0].length),a=d[2]||"",t=d[3]||0,n=d[4]||"",p=!1,l=!1,u=" ","%"!=(r=d[6])){if(0===v.length)throw new Error("too few args to sprintf");if(m=v.shift(),b++,a.match(/[\' #]/))throw new Error("unsupported flags: "+a);if(n.length>0)throw new Error("non-zero precision not supported");switch(a.match(/-/)&&(p=!0),a.match(/0/)&&(u="0"),a.match(/\+/)&&(l=!0),r){case"s":if(null==m)throw new Error("argument "+b+": attempted to print undefined or null as a string");g+=s(u,t,p,m.toString());break;case"d":m=Math.floor(m);case"f":g+=(l=l&&m>0?"+":"")+s(u,t,p,m.toString());break;case"x":g+=s(u,t,p,m.toString(16));break;case"j":0===t&&(t=10),g+=o.inspect(m,!1,t);break;case"r":g+=c(m);break;default:throw new Error("unsupported conversion: "+r)}}else g+="%";return g+=e}function r(e){var a=Array.prototype.slice.call(arguments,1);return e.write(n.apply(this,a))}function s(e,a,t,i){for(var o=i;o.length<a;)t?o+=e:o=e+o;return o}function c(e){var a;if(!(e instanceof Error))throw new Error(n("invalid type for %%r: %j",e));if(a="EXCEPTION: "+e.constructor.name+": "+e.stack,e.cause&&"function"==typeof e.cause){var t=e.cause();t&&(a+="\nCaused by: "+c(t))}return a}a.sprintf=n,a.printf=function(){var e=Array.prototype.slice.call(arguments);e.unshift(process.stdout),r.apply(null,e)},a.fprintf=r},function(e,a,t){var i=t(0),o=t(1),n=t(139),r=t(140).isError,s=n.sprintf;function c(e){var a,t,o,n;if(i.object(e,"args"),i.bool(e.strict,"args.strict"),i.array(e.argv,"args.argv"),0===(a=e.argv).length)t={},o=[];else if(r(a[0]))t={cause:a[0]},o=a.slice(1);else if("object"==typeof a[0]){for(n in t={},a[0])t[n]=a[0][n];o=a.slice(1)}else i.string(a[0],"first argument to VError, SError, or WError constructor must be a string, object, or Error"),t={},o=a;return i.object(t),t.strict||e.strict||(o=o.map(function(e){return null===e?"null":void 0===e?"undefined":e})),{options:t,shortmessage:0===o.length?"":s.apply(null,o)}}function p(){var e,a,t,o,n,s,u;if(e=Array.prototype.slice.call(arguments,0),!(this instanceof p))return a=Object.create(p.prototype),p.apply(a,arguments),a;if((t=c({argv:e,strict:!1})).options.name&&(i.string(t.options.name,'error\'s "name" must be a string'),this.name=t.options.name),this.jse_shortmsg=t.shortmessage,s=t.shortmessage,(o=t.options.cause)&&(i.ok(r(o),"cause is not an Error"),this.jse_cause=o,t.options.skipCauseMessage||(s+=": "+o.message)),this.jse_info={},t.options.info)for(u in t.options.info)this.jse_info[u]=t.options.info[u];return this.message=s,Error.call(this,s),Error.captureStackTrace&&(n=t.options.constructorOpt||this.constructor,Error.captureStackTrace(this,n)),this}function u(){var e,a,t,i;return e=Array.prototype.slice.call(arguments,0),this instanceof u?(i=(t=c({argv:e,strict:!0})).options,p.call(this,i,"%s",t.shortmessage),this):(a=Object.create(u.prototype),u.apply(a,arguments),a)}function l(e){i.array(e,"list of errors"),i.ok(e.length>0,"must be at least one error"),this.ase_errors=e,p.call(this,{cause:e[0]},"first of %d error%s",e.length,1==e.length?"":"s")}function m(){var e,a,t,i;return e=Array.prototype.slice.call(arguments,0),this instanceof m?((i=(t=c({argv:e,strict:!1})).options).skipCauseMessage=!0,p.call(this,i,"%s",t.shortmessage),this):(a=Object.create(m.prototype),m.apply(a,e),a)}e.exports=p,p.VError=p,p.SError=u,p.WError=m,p.MultiError=l,o.inherits(p,Error),p.prototype.name="VError",p.prototype.toString=function(){var e=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(e+=": "+this.message),e},p.prototype.cause=function(){var e=p.cause(this);return null===e?void 0:e},p.cause=function(e){return i.ok(r(e),"err must be an Error"),r(e.jse_cause)?e.jse_cause:null},p.info=function(e){var a,t,o;if(i.ok(r(e),"err must be an Error"),a=null!==(t=p.cause(e))?p.info(t):{},"object"==typeof e.jse_info&&null!==e.jse_info)for(o in e.jse_info)a[o]=e.jse_info[o];return a},p.findCauseByName=function(e,a){var t;for(i.ok(r(e),"err must be an Error"),i.string(a,"name"),i.ok(a.length>0,"name cannot be empty"),t=e;null!==t;t=p.cause(t))if(i.ok(r(t)),t.name==a)return t;return null},p.hasCauseWithName=function(e,a){return null!==p.findCauseByName(e,a)},p.fullStack=function(e){i.ok(r(e),"err must be an Error");var a=p.cause(e);return a?e.stack+"\ncaused by: "+p.fullStack(a):e.stack},p.errorFromList=function(e){return i.arrayOfObject(e,"errors"),0===e.length?null:(e.forEach(function(e){i.ok(r(e))}),1==e.length?e[0]:new l(e))},p.errorForEach=function(e,a){i.ok(r(e),"err must be an Error"),i.func(a,"func"),e instanceof l?e.errors().forEach(function(e){a(e)}):a(e)},o.inherits(u,p),o.inherits(l,p),l.prototype.name="MultiError",l.prototype.errors=function(){return this.ase_errors.slice(0)},o.inherits(m,p),m.prototype.name="WError",m.prototype.toString=function(){var e=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(e+=": "+this.message),this.jse_cause&&this.jse_cause.message&&(e+="; caused by "+this.jse_cause.toString()),e},m.prototype.cause=function(e){return r(e)&&(this.jse_cause=e),this.jse_cause}},function(e,a,t){var i=t(20),o=t(1);function n(e){var a,t,n,s,u,l,m,d,h,f,v,g=["([^%]*)","%","(['\\-+ #0]*?)","([1-9]\\d*)?","(\\.([1-9]\\d*))?","[lhjztL]*?","([diouxXfFeEgGaAcCsSp%jr])"].join(""),b=new RegExp(g),y=Array.prototype.slice.call(arguments,1),x=e,k="",w=1,j=0;for(i.equal("string",typeof x,"first argument must be a format string");null!==(h=b.exec(x));)if(k+=h[1],x=x.substring(h[0].length),v=h[0].substring(h[1].length),f=j+h[1].length+1,j+=h[0].length,a=h[2]||"",t=h[3]||0,n=h[4]||"",u=!1,m=!1,l=" ","%"!=(s=h[6])){if(0===y.length)throw r(e,f,v,"has no matching argument (too few arguments passed)");if(d=y.shift(),w++,a.match(/[\' #]/))throw r(e,f,v,"uses unsupported flags");if(n.length>0)throw r(e,f,v,"uses non-zero precision (not supported)");switch(a.match(/-/)&&(u=!0),a.match(/0/)&&(l="0"),a.match(/\+/)&&(m=!0),s){case"s":if(null==d)throw r(e,f,v,"attempted to print undefined or null as a string (argument "+w+" to sprintf)");k+=c(l,t,u,d.toString());break;case"d":d=Math.floor(d);case"f":k+=(m=m&&d>0?"+":"")+c(l,t,u,d.toString());break;case"x":k+=c(l,t,u,d.toString(16));break;case"j":0===t&&(t=10),k+=o.inspect(d,!1,t);break;case"r":k+=p(d);break;default:throw r(e,f,v,"is not supported")}}else k+="%";return k+=x}function r(e,a,t,o){return i.equal(typeof e,"string"),i.equal(typeof t,"string"),i.equal(typeof a,"number"),i.equal(typeof o,"string"),new Error('format string "'+e+'": conversion specifier "'+t+'" at character '+a+" "+o)}function s(e){var a=Array.prototype.slice.call(arguments,1);return e.write(n.apply(this,a))}function c(e,a,t,i){for(var o=i;o.length<a;)t?o+=e:o=e+o;return o}function p(e){var a;if(!(e instanceof Error))throw new Error(n("invalid type for %%r: %j",e));if(a="EXCEPTION: "+e.constructor.name+": "+e.stack,e.cause&&"function"==typeof e.cause){var t=e.cause();t&&(a+="\nCaused by: "+p(t))}return a}a.sprintf=n,a.printf=function(){var e=Array.prototype.slice.call(arguments);e.unshift(process.stdout),s.apply(null,e)},a.fprintf=s},function(e,a){function t(e){return Object.prototype.toString.call(e)}a.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===t(e)},a.isBoolean=function(e){return"boolean"==typeof e},a.isNull=function(e){return null===e},a.isNullOrUndefined=function(e){return null==e},a.isNumber=function(e){return"number"==typeof e},a.isString=function(e){return"string"==typeof e},a.isSymbol=function(e){return"symbol"==typeof e},a.isUndefined=function(e){return void 0===e},a.isRegExp=function(e){return"[object RegExp]"===t(e)},a.isObject=function(e){return"object"==typeof e&&null!==e},a.isDate=function(e){return"[object Date]"===t(e)},a.isError=function(e){return"[object Error]"===t(e)||e instanceof Error},a.isFunction=function(e){return"function"==typeof e},a.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},a.isBuffer=Buffer.isBuffer},function(e,a,t){var i;void 0===(i=function(){return function(){var e=t;e.Integer={type:"integer"};var a={String:String,Boolean:Boolean,Number:Number,Object:Object,Array:Array,Date:Date};function t(e,a){return t(e,a,{changing:!1})}e.validate=t,e.checkPropertyChange=function(e,a,i){return t(e,a,{changing:i||"property"})};var t=e._validate=function(e,t,i){i||(i={});var o=i.changing;function n(e){return e.type||a[e.name]==e&&e.name.toLowerCase()}var r=[];function s(e,a,t,c){var p;function u(e){r.push({property:t,message:e})}if(t+=t?"number"==typeof c?"["+c+"]":void 0===c?"":"."+c:c,("object"!=typeof a||a instanceof Array)&&(t||"function"!=typeof a)&&(!a||!n(a)))return"function"==typeof a?e instanceof a||u("is not an instance of the class/constructor "+a.name):a&&u("Invalid schema/property definition "+a),null;function l(e,a){if(e){if(!("string"!=typeof e||"any"==e||("null"==e?null===a:typeof a==e)||a instanceof Array&&"array"==e||a instanceof Date&&"date"==e||"integer"==e&&a%1==0))return[{property:t,message:typeof a+" value found, but a "+e+" is required"}];if(e instanceof Array){for(var i=[],o=0;o<e.length&&(i=l(e[o],a)).length;o++);if(i.length)return i}else if("object"==typeof e){var n=r;r=[],s(a,e,t);var c=r;return r=n,c}}return[]}if(o&&a.readonly&&u("is a readonly field, it can not be changed"),a.extends&&s(e,a.extends,t,c),void 0===e)a.required&&u("is missing and it is required");else if(r=r.concat(l(n(a),e)),a.disallow&&!l(a.disallow,e).length&&u(" disallowed value was matched"),null!==e){if(e instanceof Array){if(a.items){var m=a.items instanceof Array,d=a.items;for(c=0,p=e.length;c<p;c+=1)m&&(d=a.items[c]),i.coerce&&(e[c]=i.coerce(e[c],d)),r.concat(s(e[c],d,t,c))}a.minItems&&e.length<a.minItems&&u("There must be a minimum of "+a.minItems+" in the array"),a.maxItems&&e.length>a.maxItems&&u("There must be a maximum of "+a.maxItems+" in the array")}else(a.properties||a.additionalProperties)&&r.concat(function(e,a,t,n){if("object"==typeof a)for(var c in("object"!=typeof e||e instanceof Array)&&r.push({property:t,message:"an object is required"}),a)if(a.hasOwnProperty(c)){var p=e[c];if(void 0===p&&i.existingOnly)continue;var u=a[c];void 0===p&&u.default&&(p=e[c]=u.default),i.coerce&&c in e&&(p=e[c]=i.coerce(p,u)),s(p,u,t,c)}for(c in e){if(e.hasOwnProperty(c)&&("_"!=c.charAt(0)||"_"!=c.charAt(1))&&a&&!a[c]&&!1===n){if(i.filter){delete e[c];continue}r.push({property:t,message:typeof p+"The property "+c+" is not defined in the schema and the schema does not allow additional properties"})}var l=a&&a[c]&&a[c].requires;!l||l in e||r.push({property:t,message:"the presence of the property "+c+" requires that "+l+" also be present"}),p=e[c],!n||a&&"object"==typeof a&&c in a||(i.coerce&&(p=e[c]=i.coerce(p,n)),s(p,n,t,c)),!o&&p&&p.$schema&&(r=r.concat(s(p,p.$schema,t,c)))}return r}(e,a.properties,t,a.additionalProperties));if(a.pattern&&"string"==typeof e&&!e.match(a.pattern)&&u("does not match the regex pattern "+a.pattern),a.maxLength&&"string"==typeof e&&e.length>a.maxLength&&u("may only be "+a.maxLength+" characters long"),a.minLength&&"string"==typeof e&&e.length<a.minLength&&u("must be at least "+a.minLength+" characters long"),void 0!==typeof a.minimum&&typeof e==typeof a.minimum&&a.minimum>e&&u("must have a minimum value of "+a.minimum),void 0!==typeof a.maximum&&typeof e==typeof a.maximum&&a.maximum<e&&u("must have a maximum value of "+a.maximum),a.enum){var h,f=a.enum;p=f.length;for(var v=0;v<p;v++)if(f[v]===e){h=1;break}h||u("does not have a value in the enumeration "+f.join(", "))}"number"==typeof a.maxDecimal&&e.toString().match(new RegExp("\\.[0-9]{"+(a.maxDecimal+1)+",}"))&&u("may only have "+a.maxDecimal+" digits of decimal places")}return null}return t&&s(e,t,"",o||""),!o&&e&&e.$schema&&s(e,e.$schema,"",""),{valid:!r.length,errors:r}};return e.mustBeValid=function(e){if(!e.valid)throw new TypeError(e.errors.map(function(e){return"for property "+e.property+": "+e.message}).join(", \n"))},e}()}.apply(a,[]))||(e.exports=i)},function(e,a,t){var i=t(0),o=t(2),n=t(41),r=t(33),s=(r.HASH_ALGOS,r.PK_ALGOS,r.InvalidAlgorithmError,r.HttpSignatureError,r.validateAlgorithm);e.exports={verifySignature:function(e,a){i.object(e,"parsedSignature"),("string"==typeof a||Buffer.isBuffer(a))&&(a=n.parseKey(a)),i.ok(n.Key.isKey(a,[1,1]),"pubkey must be a sshpk.Key");var t=s(e.algorithm);if("hmac"===t[0]||t[0]!==a.type)return!1;var o=a.createVerify(t[1]);return o.update(e.signingString),o.verify(e.params.signature,"base64")},verifyHMAC:function(e,a){i.object(e,"parsedHMAC"),i.string(a,"secret");var t=s(e.algorithm);if("hmac"!==t[0])return!1;var n=t[1].toUpperCase(),r=o.createHmac(n,a);r.update(e.signingString);var c=o.createHmac(n,a);c.update(r.digest()),c=c.digest();var p=o.createHmac(n,a);return p.update(new Buffer(e.params.signature,"base64")),p=p.digest(),"string"==typeof c?c===p:Buffer.isBuffer(c)&&!c.equals?c.toString("binary")===p.toString("binary"):c.equals(p)}}},function(e,a,t){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=t(144)},function(e){e.exports={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/cbor":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["ecma","es"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0},"application/fhir+json":{source:"iana",compressible:!0},"application/fhir+xml":{source:"iana",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mmt-usd+xml":{source:"iana",compressible:!0},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",compressible:!0},"application/msc-mixer+xml":{source:"iana",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana"},"application/n-triples":{source:"iana"},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana"},"application/news-groupinfo":{source:"iana"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana"},"application/nss":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p2p-overlay+xml":{source:"iana",compressible:!0},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana"},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",compressible:!0},"application/pidf-diff+xml":{source:"iana",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0},"application/route-s-tsid+xml":{source:"iana",compressible:!0},"application/route-usd+xml":{source:"iana",compressible:!0},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana"},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana"},"application/ttml+xml":{source:"iana",compressible:!0},"application/tve-trigger":{source:"iana"},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0},"application/urc-targetdesc+xml":{source:"iana",compressible:!0},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["keynote"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana"},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana"},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",compressible:!0},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"apache",extensions:["der","crt","pem"]},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0},"application/xcap-caps+xml":{source:"iana",compressible:!0},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana"},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana"},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tone":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana"},"image/avcs":{source:"iana"},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/stl":{source:"iana"},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana"},"model/vnd.parasolid.transmit.binary":{source:"iana"},"model/vnd.parasolid.transmit.text":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.usdz+zip":{source:"iana",compressible:!1},"model/vnd.valve.source.compiled-map":{source:"iana"},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana"},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana"},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana",compressible:!1},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fwdred":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shex":{extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana"},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vp8":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}},function(e,a,t){e.exports=p,p.SSL=u;var i=t(1),o=t(17).Agent,n=t(39),r=t(67),s=t(18).Agent;function c(e,a){return"string"==typeof e?e+":"+a:e.host+":"+e.port+":"+(e.localAddress?e.localAddress+":":":")}function p(e){var a=this;a.options=e||{},a.requests={},a.sockets={},a.freeSockets={},a.maxSockets=a.options.maxSockets||o.defaultMaxSockets,a.minSockets=a.options.minSockets||p.defaultMinSockets,a.on("free",function(e,t,i){var o=c(t,i);if(a.requests[o]&&a.requests[o].length)a.requests[o].shift().onSocket(e);else if(a.sockets[o].length<a.minSockets){a.freeSockets[o]||(a.freeSockets[o]=[]),a.freeSockets[o].push(e);var n=function(){e.destroy()};e._onIdleError=n,e.on("error",n)}else e.destroy()})}function u(e){p.call(this,e)}i.inherits(p,o),p.defaultMinSockets=5,p.prototype.createConnection=n.createConnection,p.prototype.addRequestNoreuse=o.prototype.addRequest,p.prototype.addRequest=function(e,a,t){var i=c(a,t);if("string"!=typeof a){var o=a;t=o.port,a=o.host}if(this.freeSockets[i]&&this.freeSockets[i].length>0&&!e.useChunkedEncodingByDefault){var n=this.freeSockets[i].pop();n.removeListener("error",n._onIdleError),delete n._onIdleError,e._reusedSocket=!0,e.onSocket(n)}else this.addRequestNoreuse(e,a,t)},p.prototype.removeSocket=function(e,a,t,i){var o;this.sockets[a]?-1!==(o=this.sockets[a].indexOf(e))&&this.sockets[a].splice(o,1):this.sockets[a]&&0===this.sockets[a].length&&(delete this.sockets[a],delete this.requests[a]);this.freeSockets[a]&&(-1!==(o=this.freeSockets[a].indexOf(e))&&(this.freeSockets[a].splice(o,1),0===this.freeSockets[a].length&&delete this.freeSockets[a]));this.requests[a]&&this.requests[a].length&&this.createSocket(a,t,i).emit("free")},i.inherits(u,p),u.prototype.createConnection=function(e,a,t){t="object"==typeof e?e:"object"==typeof a?a:"object"==typeof t?t:{};"number"==typeof e&&(t.port=e);"string"==typeof a&&(t.host=a);return r.connect(t)},u.prototype.addRequestNoreuse=s.prototype.addRequest},function(e,a,t){var i=t(68),o=t(1),n=t(8),r=t(17),s=t(18),c=t(9).parse,p=t(12),u=t(66),l=t(149),m=t(153);function d(e){if(!(this instanceof d))return new d;for(var a in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],i.call(this),e=e||{})this[a]=e[a]}e.exports=d,o.inherits(d,i),d.LINE_BREAK="\r\n",d.DEFAULT_CONTENT_TYPE="application/octet-stream",d.prototype.append=function(e,a,t){"string"==typeof(t=t||{})&&(t={filename:t});var n=i.prototype.append.bind(this);if("number"==typeof a&&(a=""+a),o.isArray(a))this._error(new Error("Arrays are not supported."));else{var r=this._multiPartHeader(e,a,t),s=this._multiPartFooter();n(r),n(a),n(s),this._trackLength(r,a,t)}},d.prototype._trackLength=function(e,a,t){var i=0;null!=t.knownLength?i+=+t.knownLength:Buffer.isBuffer(a)?i=a.length:"string"==typeof a&&(i=Buffer.byteLength(a)),this._valueLength+=i,this._overheadLength+=Buffer.byteLength(e)+d.LINE_BREAK.length,a&&(a.path||a.readable&&a.hasOwnProperty("httpVersion"))&&(t.knownLength||this._valuesToMeasure.push(a))},d.prototype._lengthRetriever=function(e,a){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?a(null,e.end+1-(e.start?e.start:0)):p.stat(e.path,function(t,i){var o;t?a(t):(o=i.size-(e.start?e.start:0),a(null,o))}):e.hasOwnProperty("httpVersion")?a(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",function(t){e.pause(),a(null,+t.headers["content-length"])}),e.resume()):a("Unknown stream")},d.prototype._multiPartHeader=function(e,a,t){if("string"==typeof t.header)return t.header;var i,o=this._getContentDisposition(a,t),n=this._getContentType(a,t),r="",s={"Content-Disposition":["form-data",'name="'+e+'"'].concat(o||[]),"Content-Type":[].concat(n||[])};for(var c in"object"==typeof t.header&&m(s,t.header),s)s.hasOwnProperty(c)&&null!=(i=s[c])&&(Array.isArray(i)||(i=[i]),i.length&&(r+=c+": "+i.join("; ")+d.LINE_BREAK));return"--"+this.getBoundary()+d.LINE_BREAK+r+d.LINE_BREAK},d.prototype._getContentDisposition=function(e,a){var t,i;return"string"==typeof a.filepath?t=n.normalize(a.filepath).replace(/\\/g,"/"):a.filename||e.name||e.path?t=n.basename(a.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(t=n.basename(e.client._httpMessage.path)),t&&(i='filename="'+t+'"'),i},d.prototype._getContentType=function(e,a){var t=a.contentType;return!t&&e.name&&(t=u.lookup(e.name)),!t&&e.path&&(t=u.lookup(e.path)),!t&&e.readable&&e.hasOwnProperty("httpVersion")&&(t=e.headers["content-type"]),t||!a.filepath&&!a.filename||(t=u.lookup(a.filepath||a.filename)),t||"object"!=typeof e||(t=d.DEFAULT_CONTENT_TYPE),t},d.prototype._multiPartFooter=function(){return function(e){var a=d.LINE_BREAK;0===this._streams.length&&(a+=this._lastBoundary()),e(a)}.bind(this)},d.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+d.LINE_BREAK},d.prototype.getHeaders=function(e){var a,t={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(a in e)e.hasOwnProperty(a)&&(t[a.toLowerCase()]=e[a]);return t},d.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},d.prototype._generateBoundary=function(){for(var e="--------------------------",a=0;a<24;a++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},d.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},d.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},d.prototype.getLength=function(e){var a=this._overheadLength+this._valueLength;this._streams.length&&(a+=this._lastBoundary().length),this._valuesToMeasure.length?l.parallel(this._valuesToMeasure,this._lengthRetriever,function(t,i){t?e(t):(i.forEach(function(e){a+=e}),e(null,a))}):process.nextTick(e.bind(this,null,a))},d.prototype.submit=function(e,a){var t,i,o={method:"post"};return"string"==typeof e?(e=c(e),i=m({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},o)):(i=m(e,o)).port||(i.port="https:"==i.protocol?443:80),i.headers=this.getHeaders(e.headers),t="https:"==i.protocol?s.request(i):r.request(i),this.getLength(function(e,i){e?this._error(e):(t.setHeader("Content-Length",i),this.pipe(t),a&&(t.on("error",a),t.on("response",a.bind(this,null))))}.bind(this)),t},d.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},d.prototype.toString=function(){return"[object FormData]"}},function(e,a,t){var i=t(19).Stream,o=t(1);function n(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=n,o.inherits(n,i),n.create=function(e,a){var t=new this;for(var i in a=a||{})t[i]=a[i];t.source=e;var o=e.emit;return e.emit=function(){return t._handleEmit(arguments),o.apply(e,arguments)},e.on("error",function(){}),t.pauseStream&&e.pause(),t},Object.defineProperty(n.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),n.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},n.prototype.resume=function(){this._released||this.release(),this.source.resume()},n.prototype.pause=function(){this.source.pause()},n.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},n.prototype.pipe=function(){var e=i.prototype.pipe.apply(this,arguments);return this.resume(),e},n.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},n.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}},function(e,a){e.exports=function(e){var a="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;a?a(e):setTimeout(e,0)}},function(e,a,t){e.exports={parallel:t(150),serial:t(152),serialOrdered:t(74)}},function(e,a,t){var i=t(69),o=t(72),n=t(73);e.exports=function(e,a,t){var r=o(e);for(;r.index<(r.keyedList||e).length;)i(e,a,r,function(e,a){e?t(e,a):0!==Object.keys(r.jobs).length||t(null,r.results)}),r.index++;return n.bind(r,t)}},function(e,a){e.exports=function(e){var a="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;a?a(e):setTimeout(e,0)}},function(e,a,t){var i=t(74);e.exports=function(e,a,t){return i(e,a,null,t)}},function(e,a){e.exports=function(e,a){return Object.keys(a).forEach(function(t){e[t]=e[t]||a[t]}),e}},function(e,a){e.exports=o,o.strict=n,o.loose=r;var t=Object.prototype.toString,i={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};function o(e){return n(e)||r(e)}function n(e){return e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array}function r(e){return i[t.call(e)]}},function(e,a,t){"use strict";function i(e){return e.replace(/^\.*/,".").toLowerCase()}function o(e){var a=(e=e.trim().toLowerCase()).split(":",2);return{hostname:i(a[0]),port:a[1],hasPort:e.indexOf(":")>-1}}e.exports=function(e){var a=process.env.NO_PROXY||process.env.no_proxy||"";return"*"===a?null:""!==a&&function(e,a){var t=e.port||("https:"===e.protocol?"443":"80"),n=i(e.hostname);return a.split(",").map(o).some(function(e){var a=n.indexOf(e.hostname),i=a>-1&&a===n.length-e.hostname.length;return e.hasPort?t===e.port&&i:i})}(e,a)?null:"http:"===e.protocol?process.env.HTTP_PROXY||process.env.http_proxy||null:"https:"===e.protocol&&(process.env.HTTPS_PROXY||process.env.https_proxy||process.env.HTTP_PROXY||process.env.http_proxy)||null}},function(e,a,t){"use strict";var i=t(76),o=t(23);function n(e){this.request=e,this.lib=null,this.useQuerystring=null,this.parseOptions=null,this.stringifyOptions=null}n.prototype.init=function(e){this.lib||(this.useQuerystring=e.useQuerystring,this.lib=this.useQuerystring?o:i,this.parseOptions=e.qsParseOptions||{},this.stringifyOptions=e.qsStringifyOptions||{})},n.prototype.stringify=function(e){return this.useQuerystring?this.rfc3986(this.lib.stringify(e,this.stringifyOptions.sep||null,this.stringifyOptions.eq||null,this.stringifyOptions)):this.lib.stringify(e,this.stringifyOptions)},n.prototype.parse=function(e){return this.useQuerystring?this.lib.parse(e,this.parseOptions.sep||null,this.parseOptions.eq||null,this.parseOptions):this.lib.parse(e,this.parseOptions)},n.prototype.rfc3986=function(e){return e.replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})},n.prototype.unescape=o.unescape,a.Querystring=n},function(e,a,t){"use strict";var i=t(77),o=t(78),n={brackets:function(e){return e+"[]"},indices:function(e,a){return e+"["+a+"]"},repeat:function(e){return e}},r=Date.prototype.toISOString,s={delimiter:"&",encode:!0,encoder:i.encode,encodeValuesOnly:!1,serializeDate:function(e){return r.call(e)},skipNulls:!1,strictNullHandling:!1},c=function e(a,t,o,n,r,c,p,u,l,m,d,h){var f=a;if("function"==typeof p)f=p(t,f);else if(f instanceof Date)f=m(f);else if(null===f){if(n)return c&&!h?c(t,s.encoder):t;f=""}if("string"==typeof f||"number"==typeof f||"boolean"==typeof f||i.isBuffer(f))return c?[d(h?t:c(t,s.encoder))+"="+d(c(f,s.encoder))]:[d(t)+"="+d(String(f))];var v,g=[];if(void 0===f)return g;if(Array.isArray(p))v=p;else{var b=Object.keys(f);v=u?b.sort(u):b}for(var y=0;y<v.length;++y){var x=v[y];r&&null===f[x]||(g=Array.isArray(f)?g.concat(e(f[x],o(t,x),o,n,r,c,p,u,l,m,d,h)):g.concat(e(f[x],t+(l?"."+x:"["+x+"]"),o,n,r,c,p,u,l,m,d,h)))}return g};e.exports=function(e,a){var t=e,r=a?i.assign({},a):{};if(null!==r.encoder&&void 0!==r.encoder&&"function"!=typeof r.encoder)throw new TypeError("Encoder has to be a function.");var p=void 0===r.delimiter?s.delimiter:r.delimiter,u="boolean"==typeof r.strictNullHandling?r.strictNullHandling:s.strictNullHandling,l="boolean"==typeof r.skipNulls?r.skipNulls:s.skipNulls,m="boolean"==typeof r.encode?r.encode:s.encode,d="function"==typeof r.encoder?r.encoder:s.encoder,h="function"==typeof r.sort?r.sort:null,f=void 0!==r.allowDots&&r.allowDots,v="function"==typeof r.serializeDate?r.serializeDate:s.serializeDate,g="boolean"==typeof r.encodeValuesOnly?r.encodeValuesOnly:s.encodeValuesOnly;if(void 0===r.format)r.format=o.default;else if(!Object.prototype.hasOwnProperty.call(o.formatters,r.format))throw new TypeError("Unknown format option provided.");var b,y,x=o.formatters[r.format];"function"==typeof r.filter?t=(y=r.filter)("",t):Array.isArray(r.filter)&&(b=y=r.filter);var k,w=[];if("object"!=typeof t||null===t)return"";k=r.arrayFormat in n?r.arrayFormat:"indices"in r?r.indices?"indices":"repeat":"indices";var j=n[k];b||(b=Object.keys(t)),h&&b.sort(h);for(var E=0;E<b.length;++E){var S=b[E];l&&null===t[S]||(w=w.concat(c(t[S],S,j,u,l,m?d:null,y,h,f,v,x,g)))}var _=w.join(p),R=!0===r.addQueryPrefix?"?":"";return _.length>0?R+_:""}},function(e,a,t){"use strict";var i=t(77),o=Object.prototype.hasOwnProperty,n={allowDots:!1,allowPrototypes:!1,arrayLimit:20,decoder:i.decode,delimiter:"&",depth:5,parameterLimit:1e3,plainObjects:!1,strictNullHandling:!1},r=function(e,a,t){if(e){var i=t.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,n=/(\[[^[\]]*])/g,r=/(\[[^[\]]*])/.exec(i),s=r?i.slice(0,r.index):i,c=[];if(s){if(!t.plainObjects&&o.call(Object.prototype,s)&&!t.allowPrototypes)return;c.push(s)}for(var p=0;null!==(r=n.exec(i))&&p<t.depth;){if(p+=1,!t.plainObjects&&o.call(Object.prototype,r[1].slice(1,-1))&&!t.allowPrototypes)return;c.push(r[1])}return r&&c.push("["+i.slice(r.index)+"]"),function(e,a,t){for(var i=a,o=e.length-1;o>=0;--o){var n,r=e[o];if("[]"===r)n=(n=[]).concat(i);else{n=t.plainObjects?Object.create(null):{};var s="["===r.charAt(0)&&"]"===r.charAt(r.length-1)?r.slice(1,-1):r,c=parseInt(s,10);!isNaN(c)&&r!==s&&String(c)===s&&c>=0&&t.parseArrays&&c<=t.arrayLimit?(n=[])[c]=i:n[s]=i}i=n}return i}(c,a,t)}};e.exports=function(e,a){var t=a?i.assign({},a):{};if(null!==t.decoder&&void 0!==t.decoder&&"function"!=typeof t.decoder)throw new TypeError("Decoder has to be a function.");if(t.ignoreQueryPrefix=!0===t.ignoreQueryPrefix,t.delimiter="string"==typeof t.delimiter||i.isRegExp(t.delimiter)?t.delimiter:n.delimiter,t.depth="number"==typeof t.depth?t.depth:n.depth,t.arrayLimit="number"==typeof t.arrayLimit?t.arrayLimit:n.arrayLimit,t.parseArrays=!1!==t.parseArrays,t.decoder="function"==typeof t.decoder?t.decoder:n.decoder,t.allowDots="boolean"==typeof t.allowDots?t.allowDots:n.allowDots,t.plainObjects="boolean"==typeof t.plainObjects?t.plainObjects:n.plainObjects,t.allowPrototypes="boolean"==typeof t.allowPrototypes?t.allowPrototypes:n.allowPrototypes,t.parameterLimit="number"==typeof t.parameterLimit?t.parameterLimit:n.parameterLimit,t.strictNullHandling="boolean"==typeof t.strictNullHandling?t.strictNullHandling:n.strictNullHandling,""===e||null==e)return t.plainObjects?Object.create(null):{};for(var s="string"==typeof e?function(e,a){for(var t={},i=a.ignoreQueryPrefix?e.replace(/^\?/,""):e,r=a.parameterLimit===1/0?void 0:a.parameterLimit,s=i.split(a.delimiter,r),c=0;c<s.length;++c){var p,u,l=s[c],m=l.indexOf("]="),d=-1===m?l.indexOf("="):m+1;-1===d?(p=a.decoder(l,n.decoder),u=a.strictNullHandling?null:""):(p=a.decoder(l.slice(0,d),n.decoder),u=a.decoder(l.slice(d+1),n.decoder)),o.call(t,p)?t[p]=[].concat(t[p]).concat(u):t[p]=u}return t}(e,t):e,c=t.plainObjects?Object.create(null):{},p=Object.keys(s),u=0;u<p.length;++u){var l=p[u],m=r(l,s[l],t);c=i.merge(c,m,t)}return i.compact(c)}},function(e,a,t){"use strict";var i=t(12),o=t(23),n=t(160),r=t(38);function s(e){this.request=e}s.prototype.reducer=function(e,a){if(void 0===e[a.name])return e[a.name]=a.value,e;var t=[e[a.name],a.value];return e[a.name]=t,e},s.prototype.prep=function(e){if(e.queryObj={},e.headersObj={},e.postData.jsonObj=!1,e.postData.paramsObj=!1,e.queryString&&e.queryString.length&&(e.queryObj=e.queryString.reduce(this.reducer,{})),e.headers&&e.headers.length&&(e.headersObj=e.headers.reduceRight(function(e,a){return e[a.name]=a.value,e},{})),e.cookies&&e.cookies.length){var a=e.cookies.map(function(e){return e.name+"="+e.value});a.length&&(e.headersObj.cookie=a.join("; "))}function t(a){return a.some(function(a){return 0===e.postData.mimeType.indexOf(a)})}if(t(["multipart/mixed","multipart/related","multipart/form-data","multipart/alternative"]))e.postData.mimeType="multipart/form-data";else if(t(["application/x-www-form-urlencoded"]))e.postData.params?(e.postData.paramsObj=e.postData.params.reduce(this.reducer,{}),e.postData.text=o.stringify(e.postData.paramsObj)):e.postData.text="";else if(t(["text/json","text/x-json","application/json","application/x-json"])&&(e.postData.mimeType="application/json",e.postData.text))try{e.postData.jsonObj=JSON.parse(e.postData.text)}catch(a){this.request.debug(a),e.postData.mimeType="text/plain"}return e},s.prototype.options=function(e){if(!e.har)return e;var a={};if(r(a,e.har),a.log&&a.log.entries&&(a=a.log.entries[0]),a.url=a.url||e.url||e.uri||e.baseUrl||"/",a.httpVersion=a.httpVersion||"HTTP/1.1",a.queryString=a.queryString||[],a.headers=a.headers||[],a.cookies=a.cookies||[],a.postData=a.postData||{},a.postData.mimeType=a.postData.mimeType||"application/octet-stream",a.bodySize=0,a.headersSize=0,a.postData.size=0,!n.request(a))return e;var t=this.prep(a);function o(e){return 0===t.postData.mimeType.indexOf(e)}return t.url&&(e.url=t.url),t.method&&(e.method=t.method),Object.keys(t.queryObj).length&&(e.qs=t.queryObj),Object.keys(t.headersObj).length&&(e.headers=t.headersObj),o("application/x-www-form-urlencoded")?e.form=t.postData.paramsObj:o("application/json")?t.postData.jsonObj&&(e.body=t.postData.jsonObj,e.json=!0):o("multipart/form-data")?(e.formData={},t.postData.params.forEach(function(a){var t={};a.fileName||a.fileName||a.contentType?(a.fileName&&!a.value?t.value=i.createReadStream(a.fileName):a.value&&(t.value=a.value),a.fileName&&(t.options={filename:a.fileName,contentType:a.contentType?a.contentType:null}),e.formData[a.name]=t):e.formData[a.name]=a.value})):t.postData.text&&(e.body=t.postData.text),e},a.Har=s},function(e,a,t){var i,o=t(161),n=t(195),r=t(196);function s(e,a){a=a||{};var s=(i=i||function(){var e=new o({allErrors:!0});return e.addMetaSchema(t(215)),e.addSchema(r),e}()).getSchema(e+".json");return new Promise(function(e,t){s(a)?e(a):t(new n(s.errors))})}a.afterRequest=function(e){return s("afterRequest",e)},a.beforeRequest=function(e){return s("beforeRequest",e)},a.browser=function(e){return s("browser",e)},a.cache=function(e){return s("cache",e)},a.content=function(e){return s("content",e)},a.cookie=function(e){return s("cookie",e)},a.creator=function(e){return s("creator",e)},a.entry=function(e){return s("entry",e)},a.har=function(e){return s("har",e)},a.header=function(e){return s("header",e)},a.log=function(e){return s("log",e)},a.page=function(e){return s("page",e)},a.pageTimings=function(e){return s("pageTimings",e)},a.postData=function(e){return s("postData",e)},a.query=function(e){return s("query",e)},a.request=function(e){return s("request",e)},a.response=function(e){return s("response",e)},a.timings=function(e){return s("timings",e)}},function(e,a,t){"use strict";var i=t(162),o=t(48),n=t(166),r=t(79),s=t(80),c=t(167),p=t(168),u=t(189),l=t(21);e.exports=g,g.prototype.validate=function(e,a){var t;if("string"==typeof e){if(!(t=this.getSchema(e)))throw new Error('no schema with key or ref "'+e+'"')}else{var i=this._addSchema(e);t=i.validate||this._compile(i)}var o=t(a);!0!==t.$async&&(this.errors=t.errors);return o},g.prototype.compile=function(e,a){var t=this._addSchema(e,void 0,a);return t.validate||this._compile(t)},g.prototype.addSchema=function(e,a,t,i){if(Array.isArray(e)){for(var n=0;n<e.length;n++)this.addSchema(e[n],void 0,t,i);return this}var r=this._getId(e);if(void 0!==r&&"string"!=typeof r)throw new Error("schema id must be string");return j(this,a=o.normalizeId(a||r)),this._schemas[a]=this._addSchema(e,t,i,!0),this},g.prototype.addMetaSchema=function(e,a,t){return this.addSchema(e,a,t,!0),this},g.prototype.validateSchema=function(e,a){var t=e.$schema;if(void 0!==t&&"string"!=typeof t)throw new Error("$schema must be a string");if(!(t=t||this._opts.defaultMeta||(i=this,o=i._opts.meta,i._opts.defaultMeta="object"==typeof o?i._getId(o)||o:i.getSchema(h)?h:void 0,i._opts.defaultMeta)))return this.logger.warn("meta-schema not available"),this.errors=null,!0;var i,o;var n=this.validate(t,e);if(!n&&a){var r="schema is invalid: "+this.errorsText();if("log"!=this._opts.validateSchema)throw new Error(r);this.logger.error(r)}return n},g.prototype.getSchema=function(e){var a=b(this,e);switch(typeof a){case"object":return a.validate||this._compile(a);case"string":return this.getSchema(a);case"undefined":return function(e,a){var t=o.schema.call(e,{schema:{}},a);if(t){var n=t.schema,s=t.root,c=t.baseId,p=i.call(e,n,s,void 0,c);return e._fragments[a]=new r({ref:a,fragment:!0,schema:n,root:s,baseId:c,validate:p}),p}}(this,e)}},g.prototype.removeSchema=function(e){if(e instanceof RegExp)return y(this,this._schemas,e),y(this,this._refs,e),this;switch(typeof e){case"undefined":return y(this,this._schemas),y(this,this._refs),this._cache.clear(),this;case"string":var a=b(this,e);return a&&this._cache.del(a.cacheKey),delete this._schemas[e],delete this._refs[e],this;case"object":var t=this._opts.serialize,i=t?t(e):e;this._cache.del(i);var n=this._getId(e);n&&(n=o.normalizeId(n),delete this._schemas[n],delete this._refs[n])}return this},g.prototype.addFormat=function(e,a){"string"==typeof a&&(a=new RegExp(a));return this._formats[e]=a,this},g.prototype.errorsText=function(e,a){if(!(e=e||this.errors))return"No errors";for(var t=void 0===(a=a||{}).separator?", ":a.separator,i=void 0===a.dataVar?"data":a.dataVar,o="",n=0;n<e.length;n++){var r=e[n];r&&(o+=i+r.dataPath+" "+r.message+t)}return o.slice(0,-t.length)},g.prototype._addSchema=function(e,a,t,i){if("object"!=typeof e&&"boolean"!=typeof e)throw new Error("schema should be object or boolean");var n=this._opts.serialize,s=n?n(e):e,c=this._cache.get(s);if(c)return c;i=i||!1!==this._opts.addUsedSchema;var p=o.normalizeId(this._getId(e));p&&i&&j(this,p);var u,l=!1!==this._opts.validateSchema&&!a;l&&!(u=p&&p==o.normalizeId(e.$schema))&&this.validateSchema(e,!0);var m=o.ids.call(this,e),d=new r({id:p,schema:e,localRefs:m,cacheKey:s,meta:t});"#"!=p[0]&&i&&(this._refs[p]=d);this._cache.put(s,d),l&&u&&this.validateSchema(e,!0);return d},g.prototype._compile=function(e,a){if(e.compiling)return e.validate=n,n.schema=e.schema,n.errors=null,n.root=a||n,!0===e.schema.$async&&(n.$async=!0),n;var t,o;e.compiling=!0,e.meta&&(t=this._opts,this._opts=this._metaOpts);try{o=i.call(this,e.schema,a,e.localRefs)}catch(a){throw delete e.validate,a}finally{e.compiling=!1,e.meta&&(this._opts=t)}return e.validate=o,e.refs=o.refs,e.refVal=o.refVal,e.root=o.root,o;function n(){var a=e.validate,t=a.apply(this,arguments);return n.errors=a.errors,t}},g.prototype.compileAsync=t(190);var m=t(191);g.prototype.addKeyword=m.add,g.prototype.getKeyword=m.get,g.prototype.removeKeyword=m.remove;var d=t(50);g.ValidationError=d.Validation,g.MissingRefError=d.MissingRef,g.$dataMetaSchema=u;var h="http://json-schema.org/draft-07/schema",f=["removeAdditional","useDefaults","coerceTypes"],v=["/properties"];function g(e){if(!(this instanceof g))return new g(e);e=this._opts=l.copy(e)||{},function(e){var a=e._opts.logger;if(!1===a)e.logger={log:E,warn:E,error:E};else{if(void 0===a&&(a=console),!("object"==typeof a&&a.log&&a.warn&&a.error))throw new Error("logger must implement log, warn and error methods");e.logger=a}}(this),this._schemas={},this._refs={},this._fragments={},this._formats=c(e.format),this._cache=e.cache||new n,this._loadingSchemas={},this._compilations=[],this.RULES=p(),this._getId=function(e){switch(e.schemaId){case"auto":return w;case"id":return x;default:return k}}(e),e.loopRequired=e.loopRequired||1/0,"property"==e.errorDataPath&&(e._errorDataPathProperty=!0),void 0===e.serialize&&(e.serialize=s),this._metaOpts=function(e){for(var a=l.copy(e._opts),t=0;t<f.length;t++)delete a[f[t]];return a}(this),e.formats&&function(e){for(var a in e._opts.formats){var t=e._opts.formats[a];e.addFormat(a,t)}}(this),function(e){var a;e._opts.$data&&(a=t(193),e.addMetaSchema(a,a.$id,!0));if(!1===e._opts.meta)return;var i=t(194);e._opts.$data&&(i=u(i,v));e.addMetaSchema(i,h,!0),e._refs["http://json-schema.org/schema"]=h}(this),"object"==typeof e.meta&&this.addMetaSchema(e.meta),e.nullable&&this.addKeyword("nullable",{metaSchema:{const:!0}}),function(e){var a=e._opts.schemas;if(!a)return;if(Array.isArray(a))e.addSchema(a);else for(var t in a)e.addSchema(a[t],t)}(this)}function b(e,a){return a=o.normalizeId(a),e._schemas[a]||e._refs[a]||e._fragments[a]}function y(e,a,t){for(var i in a){var o=a[i];o.meta||t&&!t.test(i)||(e._cache.del(o.cacheKey),delete a[i])}}function x(e){return e.$id&&this.logger.warn("schema $id ignored",e.$id),e.id}function k(e){return e.id&&this.logger.warn("schema id ignored",e.id),e.$id}function w(e){if(e.$id&&e.id&&e.$id!=e.id)throw new Error("schema $id is different from id");return e.$id||e.id}function j(e,a){if(e._schemas[a]||e._refs[a])throw new Error('schema with key or id "'+a+'" already exists')}function E(){}},function(e,a,t){"use strict";var i=t(48),o=t(21),n=t(50),r=t(80),s=t(81),c=o.ucs2length,p=t(49),u=n.Validation;function l(e,a,t){for(var i=0;i<this._compilations.length;i++){var o=this._compilations[i];if(o.schema==e&&o.root==a&&o.baseId==t)return i}return-1}function m(e,a){return"var pattern"+e+" = new RegExp("+o.toQuotedString(a[e])+");"}function d(e){return"var default"+e+" = defaults["+e+"];"}function h(e,a){return void 0===a[e]?"":"var refVal"+e+" = refVal["+e+"];"}function f(e){return"var customRule"+e+" = customRules["+e+"];"}function v(e,a){if(!e.length)return"";for(var t="",i=0;i<e.length;i++)t+=a(i,e);return t}e.exports=function e(a,t,g,b){var y=this,x=this._opts,k=[void 0],w={},j=[],E={},S=[],_={},R=[];t=t||{schema:a,refVal:k,refs:w};var A=function(e,a,t){var i=l.call(this,e,a,t);return i>=0?{index:i,compiling:!0}:(i=this._compilations.length,this._compilations[i]={schema:e,root:a,baseId:t},{index:i,compiling:!1})}.call(this,a,t,b);var C=this._compilations[A.index];if(A.compiling)return C.callValidate=function e(){var a=C.validate;var t=a.apply(this,arguments);e.errors=a.errors;return t};var q=this._formats;var O=this.RULES;try{var z=F(a,t,g,b);C.validate=z;var P=C.callValidate;return P&&(P.schema=z.schema,P.errors=null,P.refs=z.refs,P.refVal=z.refVal,P.root=z.root,P.$async=z.$async,x.sourceCode&&(P.source=z.source)),z}finally{(function(e,a,t){var i=l.call(this,e,a,t);i>=0&&this._compilations.splice(i,1)}).call(this,a,t,b)}function F(a,r,l,g){var b=!r||r&&r.schema==a;if(r.schema!=t.schema)return e.call(y,a,r,l,g);var E,_=!0===a.$async,A=s({isTop:!0,schema:a,isRoot:b,baseId:g,root:r,schemaPath:"",errSchemaPath:"#",errorPath:'""',MissingRefError:n.MissingRef,RULES:O,validate:s,util:o,resolve:i,resolveRef:T,usePattern:B,useDefault:L,useCustomRule:U,opts:x,formats:q,logger:y.logger,self:y});A=v(k,h)+v(j,m)+v(S,d)+v(R,f)+A,x.processCode&&(A=x.processCode(A));try{var C=new Function("self","RULES","formats","root","refVal","defaults","customRules","equal","ucs2length","ValidationError",A);E=C(y,O,q,t,k,S,R,p,c,u),k[0]=E}catch(e){throw y.logger.error("Error compiling schema, function code:",A),e}return E.schema=a,E.errors=null,E.refs=w,E.refVal=k,E.root=b?E:r,_&&(E.$async=!0),!0===x.sourceCode&&(E.source={code:A,patterns:j,defaults:S}),E}function T(a,o,n){o=i.url(a,o);var r,s,c=w[o];if(void 0!==c)return D(r=k[c],s="refVal["+c+"]");if(!n&&t.refs){var p=t.refs[o];if(void 0!==p)return r=t.refVal[p],s=I(o,r),D(r,s)}s=I(o);var u=i.call(y,F,t,o);if(void 0===u){var l=g&&g[o];l&&(u=i.inlineRef(l,x.inlineRefs)?l:e.call(y,l,t,g,a))}if(void 0!==u)return function(e,a){var t=w[e];k[t]=a}(o,u),D(u,s);!function(e){delete w[e]}(o)}function I(e,a){var t=k.length;return k[t]=a,w[e]=t,"refVal"+t}function D(e,a){return"object"==typeof e||"boolean"==typeof e?{code:a,schema:e,inline:!0}:{code:a,$async:e&&!!e.$async}}function B(e){var a=E[e];return void 0===a&&(a=E[e]=j.length,j[a]=e),"pattern"+a}function L(e){switch(typeof e){case"boolean":case"number":return""+e;case"string":return o.toQuotedString(e);case"object":if(null===e)return"null";var a=r(e),t=_[a];return void 0===t&&(t=_[a]=S.length,S[t]=e),"default"+t}}function U(e,a,t,i){var o=e.definition.validateSchema;if(o&&!1!==y._opts.validateSchema){var n=o(a);if(!n){var r="keyword schema is invalid: "+y.errorsText(o.errors);if("log"!=y._opts.validateSchema)throw new Error(r);y.logger.error(r)}}var s,c=e.definition.compile,p=e.definition.inline,u=e.definition.macro;if(c)s=c.call(y,a,t,i);else if(u)s=u.call(y,a,t,i),!1!==x.validateSchema&&y.validateSchema(s,!0);else if(p)s=p.call(y,i,e.keyword,a,t);else if(!(s=e.definition.validate))return;if(void 0===s)throw new Error('custom keyword "'+e.keyword+'"failed to compile');var l=R.length;return R[l]=s,{code:"customRule"+l,validate:s}}}},function(e,a,t){
/** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
!function(e){"use strict";function a(){for(var e=arguments.length,a=Array(e),t=0;t<e;t++)a[t]=arguments[t];if(a.length>1){a[0]=a[0].slice(0,-1);for(var i=a.length-1,o=1;o<i;++o)a[o]=a[o].slice(1,-1);return a[i]=a[i].slice(1),a.join("")}return a[0]}function t(e){return"(?:"+e+")"}function i(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function o(e){return e.toUpperCase()}function n(e){var i=a("[0-9]","[A-Fa-f]"),o=t(t("%[EFef]"+i+"%"+i+i+"%"+i+i)+"|"+t("%[89A-Fa-f]"+i+"%"+i+i)+"|"+t("%"+i+i)),n="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",r=a("[\\:\\/\\?\\#\\[\\]\\@]",n),s=e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]",c=e?"[\\uE000-\\uF8FF]":"[]",p=a("[A-Za-z]","[0-9]","[\\-\\.\\_\\~]",s),u=t("[A-Za-z]"+a("[A-Za-z]","[0-9]","[\\+\\-\\.]")+"*"),l=t(t(o+"|"+a(p,n,"[\\:]"))+"*"),m=(t(t("25[0-5]")+"|"+t("2[0-4][0-9]")+"|"+t("1[0-9][0-9]")+"|"+t("[1-9][0-9]")+"|[0-9]"),t(t("25[0-5]")+"|"+t("2[0-4][0-9]")+"|"+t("1[0-9][0-9]")+"|"+t("0?[1-9][0-9]")+"|0?0?[0-9]")),d=t(m+"\\."+m+"\\."+m+"\\."+m),h=t(i+"{1,4}"),f=t(t(h+"\\:"+h)+"|"+d),v=t(t(h+"\\:")+"{6}"+f),g=t("\\:\\:"+t(h+"\\:")+"{5}"+f),b=t(t(h)+"?\\:\\:"+t(h+"\\:")+"{4}"+f),y=t(t(t(h+"\\:")+"{0,1}"+h)+"?\\:\\:"+t(h+"\\:")+"{3}"+f),x=t(t(t(h+"\\:")+"{0,2}"+h)+"?\\:\\:"+t(h+"\\:")+"{2}"+f),k=t(t(t(h+"\\:")+"{0,3}"+h)+"?\\:\\:"+h+"\\:"+f),w=t(t(t(h+"\\:")+"{0,4}"+h)+"?\\:\\:"+f),j=t(t(t(h+"\\:")+"{0,5}"+h)+"?\\:\\:"+h),E=t(t(t(h+"\\:")+"{0,6}"+h)+"?\\:\\:"),S=t([v,g,b,y,x,k,w,j,E].join("|")),_=t(t(p+"|"+o)+"+"),R=(t(S+"\\%25"+_),t(S+t("\\%25|\\%(?!"+i+"{2})")+_)),A=t("[vV]"+i+"+\\."+a(p,n,"[\\:]")+"+"),C=t("\\["+t(R+"|"+S+"|"+A)+"\\]"),q=t(t(o+"|"+a(p,n))+"*"),O=t(C+"|"+d+"(?!"+q+")|"+q),z=t("[0-9]*"),P=t(t(l+"@")+"?"+O+t("\\:"+z)+"?"),F=t(o+"|"+a(p,n,"[\\:\\@]")),T=t(F+"*"),I=t(F+"+"),D=t(t(o+"|"+a(p,n,"[\\@]"))+"+"),B=t(t("\\/"+T)+"*"),L=t("\\/"+t(I+B)+"?"),U=t(D+B),N=t(I+B),H="(?!"+F+")",M=(t(B+"|"+L+"|"+U+"|"+N+"|"+H),t(t(F+"|"+a("[\\/\\?]",c))+"*")),K=t(t(F+"|[\\/\\?]")+"*"),$=t(t("\\/\\/"+P+B)+"|"+L+"|"+N+"|"+H),G=t(u+"\\:"+$+t("\\?"+M)+"?"+t("\\#"+K)+"?"),V=t(t("\\/\\/"+P+B)+"|"+L+"|"+U+"|"+H),Q=t(V+t("\\?"+M)+"?"+t("\\#"+K)+"?");return t(G+"|"+Q),t(u+"\\:"+$+t("\\?"+M)+"?"),t(t("\\/\\/("+t("("+l+")@")+"?("+O+")"+t("\\:("+z+")")+"?)")+"?("+B+"|"+L+"|"+N+"|"+H+")"),t("\\?("+M+")"),t("\\#("+K+")"),t(t("\\/\\/("+t("("+l+")@")+"?("+O+")"+t("\\:("+z+")")+"?)")+"?("+B+"|"+L+"|"+U+"|"+H+")"),t("\\?("+M+")"),t("\\#("+K+")"),t(t("\\/\\/("+t("("+l+")@")+"?("+O+")"+t("\\:("+z+")")+"?)")+"?("+B+"|"+L+"|"+N+"|"+H+")"),t("\\?("+M+")"),t("\\#("+K+")"),t("("+l+")@"),t("\\:("+z+")"),{NOT_SCHEME:new RegExp(a("[^]","[A-Za-z]","[0-9]","[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(a("[^\\%\\:]",p,n),"g"),NOT_HOST:new RegExp(a("[^\\%\\[\\]\\:]",p,n),"g"),NOT_PATH:new RegExp(a("[^\\%\\/\\:\\@]",p,n),"g"),NOT_PATH_NOSCHEME:new RegExp(a("[^\\%\\/\\@]",p,n),"g"),NOT_QUERY:new RegExp(a("[^\\%]",p,n,"[\\:\\@\\/\\?]",c),"g"),NOT_FRAGMENT:new RegExp(a("[^\\%]",p,n,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(a("[^]",p,n),"g"),UNRESERVED:new RegExp(p,"g"),OTHER_CHARS:new RegExp(a("[^\\%]",p,r),"g"),PCT_ENCODED:new RegExp(o,"g"),IPV4ADDRESS:new RegExp("^("+d+")$"),IPV6ADDRESS:new RegExp("^\\[?("+S+")"+t(t("\\%25|\\%(?!"+i+"{2})")+"("+_+")")+"?\\]?$")}}var r=n(!1),s=n(!0),c=function(e,a){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,a){var t=[],i=!0,o=!1,n=void 0;try{for(var r,s=e[Symbol.iterator]();!(i=(r=s.next()).done)&&(t.push(r.value),!a||t.length!==a);i=!0);}catch(e){o=!0,n=e}finally{try{!i&&s.return&&s.return()}finally{if(o)throw n}}return t}(e,a);throw new TypeError("Invalid attempt to destructure non-iterable instance")},p=2147483647,u=/^xn--/,l=/[^\0-\x7E]/,m=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},h=Math.floor,f=String.fromCharCode;function v(e){throw new RangeError(d[e])}function g(e,a){var t=e.split("@"),i="";t.length>1&&(i=t[0]+"@",e=t[1]);var o=(e=e.replace(m,".")).split("."),n=function(e,a){for(var t=[],i=e.length;i--;)t[i]=a(e[i]);return t}(o,a).join(".");return i+n}function b(e){for(var a=[],t=0,i=e.length;t<i;){var o=e.charCodeAt(t++);if(o>=55296&&o<=56319&&t<i){var n=e.charCodeAt(t++);56320==(64512&n)?a.push(((1023&o)<<10)+(1023&n)+65536):(a.push(o),t--)}else a.push(o)}return a}var y=function(e,a){return e+22+75*(e<26)-((0!=a)<<5)},x=function(e,a,t){var i=0;for(e=t?h(e/700):e>>1,e+=h(e/a);e>455;i+=36)e=h(e/35);return h(i+36*e/(e+38))},k=function(e){var a,t=[],i=e.length,o=0,n=128,r=72,s=e.lastIndexOf("-");s<0&&(s=0);for(var c=0;c<s;++c)e.charCodeAt(c)>=128&&v("not-basic"),t.push(e.charCodeAt(c));for(var u=s>0?s+1:0;u<i;){for(var l=o,m=1,d=36;;d+=36){u>=i&&v("invalid-input");var f=(a=e.charCodeAt(u++))-48<10?a-22:a-65<26?a-65:a-97<26?a-97:36;(f>=36||f>h((p-o)/m))&&v("overflow"),o+=f*m;var g=d<=r?1:d>=r+26?26:d-r;if(f<g)break;var b=36-g;m>h(p/b)&&v("overflow"),m*=b}var y=t.length+1;r=x(o-l,y,0==l),h(o/y)>p-n&&v("overflow"),n+=h(o/y),o%=y,t.splice(o++,0,n)}return String.fromCodePoint.apply(String,t)},w=function(e){var a=[],t=(e=b(e)).length,i=128,o=0,n=72,r=!0,s=!1,c=void 0;try{for(var u,l=e[Symbol.iterator]();!(r=(u=l.next()).done);r=!0){var m=u.value;m<128&&a.push(f(m))}}catch(e){s=!0,c=e}finally{try{!r&&l.return&&l.return()}finally{if(s)throw c}}var d=a.length,g=d;for(d&&a.push("-");g<t;){var k=p,w=!0,j=!1,E=void 0;try{for(var S,_=e[Symbol.iterator]();!(w=(S=_.next()).done);w=!0){var R=S.value;R>=i&&R<k&&(k=R)}}catch(e){j=!0,E=e}finally{try{!w&&_.return&&_.return()}finally{if(j)throw E}}var A=g+1;k-i>h((p-o)/A)&&v("overflow"),o+=(k-i)*A,i=k;var C=!0,q=!1,O=void 0;try{for(var z,P=e[Symbol.iterator]();!(C=(z=P.next()).done);C=!0){var F=z.value;if(F<i&&++o>p&&v("overflow"),F==i){for(var T=o,I=36;;I+=36){var D=I<=n?1:I>=n+26?26:I-n;if(T<D)break;var B=T-D,L=36-D;a.push(f(y(D+B%L,0))),T=h(B/L)}a.push(f(y(T,0))),n=x(o,A,g==d),o=0,++g}}}catch(e){q=!0,O=e}finally{try{!C&&P.return&&P.return()}finally{if(q)throw O}}++o,++i}return a.join("")},j={version:"2.1.0",ucs2:{decode:b,encode:function(e){return String.fromCodePoint.apply(String,function(e){if(Array.isArray(e)){for(var a=0,t=Array(e.length);a<e.length;a++)t[a]=e[a];return t}return Array.from(e)}(e))}},decode:k,encode:w,toASCII:function(e){return g(e,function(e){return l.test(e)?"xn--"+w(e):e})},toUnicode:function(e){return g(e,function(e){return u.test(e)?k(e.slice(4).toLowerCase()):e})}},E={};function S(e){var a=e.charCodeAt(0);return a<16?"%0"+a.toString(16).toUpperCase():a<128?"%"+a.toString(16).toUpperCase():a<2048?"%"+(a>>6|192).toString(16).toUpperCase()+"%"+(63&a|128).toString(16).toUpperCase():"%"+(a>>12|224).toString(16).toUpperCase()+"%"+(a>>6&63|128).toString(16).toUpperCase()+"%"+(63&a|128).toString(16).toUpperCase()}function _(e){for(var a="",t=0,i=e.length;t<i;){var o=parseInt(e.substr(t+1,2),16);if(o<128)a+=String.fromCharCode(o),t+=3;else if(o>=194&&o<224){if(i-t>=6){var n=parseInt(e.substr(t+4,2),16);a+=String.fromCharCode((31&o)<<6|63&n)}else a+=e.substr(t,6);t+=6}else if(o>=224){if(i-t>=9){var r=parseInt(e.substr(t+4,2),16),s=parseInt(e.substr(t+7,2),16);a+=String.fromCharCode((15&o)<<12|(63&r)<<6|63&s)}else a+=e.substr(t,9);t+=9}else a+=e.substr(t,3),t+=3}return a}function R(e,a){function t(e){var t=_(e);return t.match(a.UNRESERVED)?t:e}return e.scheme&&(e.scheme=String(e.scheme).replace(a.PCT_ENCODED,t).toLowerCase().replace(a.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(a.PCT_ENCODED,t).replace(a.NOT_USERINFO,S).replace(a.PCT_ENCODED,o)),void 0!==e.host&&(e.host=String(e.host).replace(a.PCT_ENCODED,t).toLowerCase().replace(a.NOT_HOST,S).replace(a.PCT_ENCODED,o)),void 0!==e.path&&(e.path=String(e.path).replace(a.PCT_ENCODED,t).replace(e.scheme?a.NOT_PATH:a.NOT_PATH_NOSCHEME,S).replace(a.PCT_ENCODED,o)),void 0!==e.query&&(e.query=String(e.query).replace(a.PCT_ENCODED,t).replace(a.NOT_QUERY,S).replace(a.PCT_ENCODED,o)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(a.PCT_ENCODED,t).replace(a.NOT_FRAGMENT,S).replace(a.PCT_ENCODED,o)),e}function A(e){return e.replace(/^0*(.*)/,"$1")||"0"}function C(e,a){var t=e.match(a.IPV4ADDRESS)||[],i=c(t,2),o=i[1];return o?o.split(".").map(A).join("."):e}function q(e,a){var t=e.match(a.IPV6ADDRESS)||[],i=c(t,3),o=i[1],n=i[2];if(o){for(var r=o.toLowerCase().split("::").reverse(),s=c(r,2),p=s[0],u=s[1],l=u?u.split(":").map(A):[],m=p.split(":").map(A),d=a.IPV4ADDRESS.test(m[m.length-1]),h=d?7:8,f=m.length-h,v=Array(h),g=0;g<h;++g)v[g]=l[g]||m[f+g]||"";d&&(v[h-1]=C(v[h-1],a));var b=v.reduce(function(e,a,t){if(!a||"0"===a){var i=e[e.length-1];i&&i.index+i.length===t?i.length++:e.push({index:t,length:1})}return e},[]),y=b.sort(function(e,a){return a.length-e.length})[0],x=void 0;if(y&&y.length>1){var k=v.slice(0,y.index),w=v.slice(y.index+y.length);x=k.join(":")+"::"+w.join(":")}else x=v.join(":");return n&&(x+="%"+n),x}return e}var O=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,z=void 0==="".match(/(){0}/)[1];function P(e){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t={},i=!1!==a.iri?s:r;"suffix"===a.reference&&(e=(a.scheme?a.scheme+":":"")+"//"+e);var o=e.match(O);if(o){z?(t.scheme=o[1],t.userinfo=o[3],t.host=o[4],t.port=parseInt(o[5],10),t.path=o[6]||"",t.query=o[7],t.fragment=o[8],isNaN(t.port)&&(t.port=o[5])):(t.scheme=o[1]||void 0,t.userinfo=-1!==e.indexOf("@")?o[3]:void 0,t.host=-1!==e.indexOf("//")?o[4]:void 0,t.port=parseInt(o[5],10),t.path=o[6]||"",t.query=-1!==e.indexOf("?")?o[7]:void 0,t.fragment=-1!==e.indexOf("#")?o[8]:void 0,isNaN(t.port)&&(t.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?o[4]:void 0)),t.host&&(t.host=q(C(t.host,i),i)),void 0!==t.scheme||void 0!==t.userinfo||void 0!==t.host||void 0!==t.port||t.path||void 0!==t.query?void 0===t.scheme?t.reference="relative":void 0===t.fragment?t.reference="absolute":t.reference="uri":t.reference="same-document",a.reference&&"suffix"!==a.reference&&a.reference!==t.reference&&(t.error=t.error||"URI is not a "+a.reference+" reference.");var n=E[(a.scheme||t.scheme||"").toLowerCase()];if(a.unicodeSupport||n&&n.unicodeSupport)R(t,i);else{if(t.host&&(a.domainHost||n&&n.domainHost))try{t.host=j.toASCII(t.host.replace(i.PCT_ENCODED,_).toLowerCase())}catch(e){t.error=t.error||"Host's domain name can not be converted to ASCII via punycode: "+e}R(t,r)}n&&n.parse&&n.parse(t,a)}else t.error=t.error||"URI can not be parsed.";return t}var F=/^\.\.?\//,T=/^\/\.(\/|$)/,I=/^\/\.\.(\/|$)/,D=/^\/?(?:.|\n)*?(?=\/|$)/;function B(e){for(var a=[];e.length;)if(e.match(F))e=e.replace(F,"");else if(e.match(T))e=e.replace(T,"/");else if(e.match(I))e=e.replace(I,"/"),a.pop();else if("."===e||".."===e)e="";else{var t=e.match(D);if(!t)throw new Error("Unexpected dot segment condition");var i=t[0];e=e.slice(i.length),a.push(i)}return a.join("")}function L(e){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=a.iri?s:r,i=[],o=E[(a.scheme||e.scheme||"").toLowerCase()];if(o&&o.serialize&&o.serialize(e,a),e.host)if(t.IPV6ADDRESS.test(e.host));else if(a.domainHost||o&&o.domainHost)try{e.host=a.iri?j.toUnicode(e.host):j.toASCII(e.host.replace(t.PCT_ENCODED,_).toLowerCase())}catch(t){e.error=e.error||"Host's domain name can not be converted to "+(a.iri?"Unicode":"ASCII")+" via punycode: "+t}R(e,t),"suffix"!==a.reference&&e.scheme&&(i.push(e.scheme),i.push(":"));var n=function(e,a){var t=!1!==a.iri?s:r,i=[];return void 0!==e.userinfo&&(i.push(e.userinfo),i.push("@")),void 0!==e.host&&i.push(q(C(String(e.host),t),t).replace(t.IPV6ADDRESS,function(e,a,t){return"["+a+(t?"%25"+t:"")+"]"})),"number"==typeof e.port&&(i.push(":"),i.push(e.port.toString(10))),i.length?i.join(""):void 0}(e,a);if(void 0!==n&&("suffix"!==a.reference&&i.push("//"),i.push(n),e.path&&"/"!==e.path.charAt(0)&&i.push("/")),void 0!==e.path){var c=e.path;a.absolutePath||o&&o.absolutePath||(c=B(c)),void 0===n&&(c=c.replace(/^\/\//,"/%2F")),i.push(c)}return void 0!==e.query&&(i.push("?"),i.push(e.query)),void 0!==e.fragment&&(i.push("#"),i.push(e.fragment)),i.join("")}function U(e,a){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments[3],o={};return i||(e=P(L(e,t),t),a=P(L(a,t),t)),!(t=t||{}).tolerant&&a.scheme?(o.scheme=a.scheme,o.userinfo=a.userinfo,o.host=a.host,o.port=a.port,o.path=B(a.path||""),o.query=a.query):(void 0!==a.userinfo||void 0!==a.host||void 0!==a.port?(o.userinfo=a.userinfo,o.host=a.host,o.port=a.port,o.path=B(a.path||""),o.query=a.query):(a.path?("/"===a.path.charAt(0)?o.path=B(a.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?o.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+a.path:o.path=a.path:o.path="/"+a.path,o.path=B(o.path)),o.query=a.query):(o.path=e.path,void 0!==a.query?o.query=a.query:o.query=e.query),o.userinfo=e.userinfo,o.host=e.host,o.port=e.port),o.scheme=e.scheme),o.fragment=a.fragment,o}function N(e,a){return e&&e.toString().replace(a&&a.iri?s.PCT_ENCODED:r.PCT_ENCODED,_)}var H={scheme:"http",domainHost:!0,parse:function(e,a){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,a){return e.port!==("https"!==String(e.scheme).toLowerCase()?80:443)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},M={scheme:"https",domainHost:H.domainHost,parse:H.parse,serialize:H.serialize},K={},$="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",G="[0-9A-Fa-f]",V=t(t("%[EFef][0-9A-Fa-f]%"+G+G+"%"+G+G)+"|"+t("%[89A-Fa-f][0-9A-Fa-f]%"+G+G)+"|"+t("%"+G+G)),Q=a("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),W=new RegExp($,"g"),Y=new RegExp(V,"g"),Z=new RegExp(a("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',Q),"g"),J=new RegExp(a("[^]",$,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),X=J;function ee(e){var a=_(e);return a.match(W)?a:e}var ae={scheme:"mailto",parse:function(e,a){var t=e,i=t.to=t.path?t.path.split(","):[];if(t.path=void 0,t.query){for(var o=!1,n={},r=t.query.split("&"),s=0,c=r.length;s<c;++s){var p=r[s].split("=");switch(p[0]){case"to":for(var u=p[1].split(","),l=0,m=u.length;l<m;++l)i.push(u[l]);break;case"subject":t.subject=N(p[1],a);break;case"body":t.body=N(p[1],a);break;default:o=!0,n[N(p[0],a)]=N(p[1],a)}}o&&(t.headers=n)}t.query=void 0;for(var d=0,h=i.length;d<h;++d){var f=i[d].split("@");if(f[0]=N(f[0]),a.unicodeSupport)f[1]=N(f[1],a).toLowerCase();else try{f[1]=j.toASCII(N(f[1],a).toLowerCase())}catch(e){t.error=t.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}i[d]=f.join("@")}return t},serialize:function(e,a){var t,i=e,n=null!=(t=e.to)?t instanceof Array?t:"number"!=typeof t.length||t.split||t.setInterval||t.call?[t]:Array.prototype.slice.call(t):[];if(n){for(var r=0,s=n.length;r<s;++r){var c=String(n[r]),p=c.lastIndexOf("@"),u=c.slice(0,p).replace(Y,ee).replace(Y,o).replace(Z,S),l=c.slice(p+1);try{l=a.iri?j.toUnicode(l):j.toASCII(N(l,a).toLowerCase())}catch(e){i.error=i.error||"Email address's domain name can not be converted to "+(a.iri?"Unicode":"ASCII")+" via punycode: "+e}n[r]=u+"@"+l}i.path=n.join(",")}var m=e.headers=e.headers||{};e.subject&&(m.subject=e.subject),e.body&&(m.body=e.body);var d=[];for(var h in m)m[h]!==K[h]&&d.push(h.replace(Y,ee).replace(Y,o).replace(J,S)+"="+m[h].replace(Y,ee).replace(Y,o).replace(X,S));return d.length&&(i.query=d.join("&")),i}},te=/^([^\:]+)\:(.*)/,ie={scheme:"urn",parse:function(e,a){var t=e.path&&e.path.match(te),i=e;if(t){var o=a.scheme||i.scheme||"urn",n=t[1].toLowerCase(),r=t[2],s=o+":"+(a.nid||n),c=E[s];i.nid=n,i.nss=r,i.path=void 0,c&&(i=c.parse(i,a))}else i.error=i.error||"URN can not be parsed.";return i},serialize:function(e,a){var t=a.scheme||e.scheme||"urn",i=e.nid,o=t+":"+(a.nid||i),n=E[o];n&&(e=n.serialize(e,a));var r=e,s=e.nss;return r.path=(i||a.nid)+":"+s,r}},oe=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,ne={scheme:"urn:uuid",parse:function(e,a){var t=e;return t.uuid=t.nss,t.nss=void 0,a.tolerant||t.uuid&&t.uuid.match(oe)||(t.error=t.error||"UUID is not valid."),t},serialize:function(e,a){var t=e;return t.nss=(e.uuid||"").toLowerCase(),t}};E[H.scheme]=H,E[M.scheme]=M,E[ae.scheme]=ae,E[ie.scheme]=ie,E[ne.scheme]=ne,e.SCHEMES=E,e.pctEncChar=S,e.pctDecChars=_,e.parse=P,e.removeDotSegments=B,e.serialize=L,e.resolveComponents=U,e.resolve=function(e,a,t){var i=function(e,a){var t=e;if(a)for(var i in a)t[i]=a[i];return t}({scheme:"null"},t);return L(U(P(e,i),P(a,i),i,!0),i)},e.normalize=function(e,a){return"string"==typeof e?e=L(P(e,a),a):"object"===i(e)&&(e=P(L(e,a),a)),e},e.equal=function(e,a,t){return"string"==typeof e?e=L(P(e,t),t):"object"===i(e)&&(e=L(e,t)),"string"==typeof a?a=L(P(a,t),t):"object"===i(a)&&(a=L(a,t)),e===a},e.escapeComponent=function(e,a){return e&&e.toString().replace(a&&a.iri?s.ESCAPE:r.ESCAPE,S)},e.unescapeComponent=N,Object.defineProperty(e,"__esModule",{value:!0})}(a)},function(e,a,t){"use strict";e.exports=function(e){for(var a,t=0,i=e.length,o=0;o<i;)t++,(a=e.charCodeAt(o++))>=55296&&a<=56319&&o<i&&56320==(64512&(a=e.charCodeAt(o)))&&o++;return t}},function(e,a,t){"use strict";var i=e.exports=function(e,a,t){"function"==typeof a&&(t=a,a={}),function e(a,t,o,n,r,s,c,p,u,l){if(n&&"object"==typeof n&&!Array.isArray(n)){for(var m in t(n,r,s,c,p,u,l),n){var d=n[m];if(Array.isArray(d)){if(m in i.arrayKeywords)for(var h=0;h<d.length;h++)e(a,t,o,d[h],r+"/"+m+"/"+h,s,r,m,n,h)}else if(m in i.propsKeywords){if(d&&"object"==typeof d)for(var f in d)e(a,t,o,d[f],r+"/"+m+"/"+f.replace(/~/g,"~0").replace(/\//g,"~1"),s,r,m,n,f)}else(m in i.keywords||a.allKeys&&!(m in i.skipKeywords))&&e(a,t,o,d,r+"/"+m,s,r,m,n)}o(n,r,s,c,p,u,l)}}(a,"function"==typeof(t=a.cb||t)?t:t.pre||function(){},t.post||function(){},e,"",e)};i.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0},i.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},i.propsKeywords={definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},i.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}},function(e,a,t){"use strict";var i=e.exports=function(){this._cache={}};i.prototype.put=function(e,a){this._cache[e]=a},i.prototype.get=function(e){return this._cache[e]},i.prototype.del=function(e){delete this._cache[e]},i.prototype.clear=function(){this._cache={}}},function(e,a,t){"use strict";var i=t(21),o=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,n=[0,31,28,31,30,31,30,31,31,30,31,30,31],r=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i,s=/^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i,c=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i,p=/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#.\/;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,u=/^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i,l=/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,m=/^(?:\/(?:[^~\/]|~0|~1)*)*$/,d=/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,h=/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~\/]|~0|~1)*)*)$/;function f(e){return e="full"==e?"full":"fast",i.copy(f[e])}function v(e){var a=e.match(o);if(!a)return!1;var t=+a[1],i=+a[2],r=+a[3];return i>=1&&i<=12&&r>=1&&r<=(2==i&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(t)?29:n[i])}function g(e,a){var t=e.match(r);if(!t)return!1;var i=t[1],o=t[2],n=t[3],s=t[5];return(i<=23&&o<=59&&n<=59||23==i&&59==o&&60==n)&&(!a||s)}e.exports=f,f.fast={date:/^\d\d\d\d-[0-1]\d-[0-3]\d$/,time:/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,"date-time":/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,uri:/^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,"uri-template":p,url:u,email:/^[a-z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,hostname:s,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:k,uuid:l,"json-pointer":m,"json-pointer-uri-fragment":d,"relative-json-pointer":h},f.full={date:v,time:g,"date-time":function(e){var a=e.split(b);return 2==a.length&&v(a[0])&&g(a[1],!0)},uri:function(e){return y.test(e)&&c.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i,"uri-template":p,url:u,email:/^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:function(e){return e.length<=255&&s.test(e)},ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:k,uuid:l,"json-pointer":m,"json-pointer-uri-fragment":d,"relative-json-pointer":h};var b=/t|\s/i;var y=/\/|:/;var x=/[^\\]\\Z/;function k(e){if(x.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}}},function(e,a,t){"use strict";var i=t(169),o=t(21).toHash;e.exports=function(){var e=[{type:"number",rules:[{maximum:["exclusiveMaximum"]},{minimum:["exclusiveMinimum"]},"multipleOf","format"]},{type:"string",rules:["maxLength","minLength","pattern","format"]},{type:"array",rules:["maxItems","minItems","items","contains","uniqueItems"]},{type:"object",rules:["maxProperties","minProperties","required","dependencies","propertyNames",{properties:["additionalProperties","patternProperties"]}]},{rules:["$ref","const","enum","not","anyOf","oneOf","allOf","if"]}],a=["type","$comment"];return e.all=o(a),e.types=o(["number","integer","string","array","object","boolean","null"]),e.forEach(function(t){t.rules=t.rules.map(function(t){var o;if("object"==typeof t){var n=Object.keys(t)[0];o=t[n],t=n,o.forEach(function(t){a.push(t),e.all[t]=!0})}return a.push(t),e.all[t]={keyword:t,code:i[t],implements:o}}),e.all.$comment={keyword:"$comment",code:i.$comment},t.type&&(e.types[t.type]=t)}),e.keywords=o(a.concat(["$schema","$id","id","$data","title","description","default","definitions","examples","readOnly","writeOnly","contentMediaType","contentEncoding","additionalItems","then","else"])),e.custom={},e}},function(e,a,t){"use strict";e.exports={$ref:t(170),allOf:t(171),anyOf:t(172),$comment:t(173),const:t(174),contains:t(175),dependencies:t(176),enum:t(177),format:t(178),if:t(179),items:t(180),maximum:t(82),minimum:t(82),maxItems:t(83),minItems:t(83),maxLength:t(84),minLength:t(84),maxProperties:t(85),minProperties:t(85),multipleOf:t(181),not:t(182),oneOf:t(183),pattern:t(184),properties:t(185),propertyNames:t(186),required:t(187),uniqueItems:t(188),validate:t(81)}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o,n=" ",r=e.level,s=e.dataLevel,c=e.schema[a],p=e.errSchemaPath+"/"+a,u=!e.opts.allErrors,l="data"+(s||""),m="valid"+r;if("#"==c||"#/"==c)e.isRoot?(i=e.async,o="validate"):(i=!0===e.root.schema.$async,o="root.refVal[0]");else{var d=e.resolveRef(e.baseId,c,e.isRoot);if(void 0===d){var h=e.MissingRefError.message(e.baseId,c);if("fail"==e.opts.missingRefs){e.logger.error(h),(b=b||[]).push(n),n="",!1!==e.createErrors?(n+=" { keyword: '$ref' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { ref: '"+e.util.escapeQuotes(c)+"' } ",!1!==e.opts.messages&&(n+=" , message: 'can\\'t resolve reference "+e.util.escapeQuotes(c)+"' "),e.opts.verbose&&(n+=" , schema: "+e.util.toQuotedString(c)+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),n+=" } "):n+=" {} ";var f=n;n=b.pop(),!e.compositeRule&&u?e.async?n+=" throw new ValidationError(["+f+"]); ":n+=" validate.errors = ["+f+"]; return false; ":n+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",u&&(n+=" if (false) { ")}else{if("ignore"!=e.opts.missingRefs)throw new e.MissingRefError(e.baseId,c,h);e.logger.warn(h),u&&(n+=" if (true) { ")}}else if(d.inline){var v=e.util.copy(e);v.level++;var g="valid"+v.level;v.schema=d.schema,v.schemaPath="",v.errSchemaPath=c,n+=" "+e.validate(v).replace(/validate\.schema/g,d.code)+" ",u&&(n+=" if ("+g+") { ")}else i=!0===d.$async||e.async&&!1!==d.$async,o=d.code}if(o){var b;(b=b||[]).push(n),n="",e.opts.passContext?n+=" "+o+".call(this, ":n+=" "+o+"( ",n+=" "+l+", (dataPath || '')",'""'!=e.errorPath&&(n+=" + "+e.errorPath);var y=n+=" , "+(s?"data"+(s-1||""):"parentData")+" , "+(s?e.dataPathArr[s]:"parentDataProperty")+", rootData)  ";if(n=b.pop(),i){if(!e.async)throw new Error("async schema referenced by sync schema");u&&(n+=" var "+m+"; "),n+=" try { await "+y+"; ",u&&(n+=" "+m+" = true; "),n+=" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ",u&&(n+=" "+m+" = false; "),n+=" } ",u&&(n+=" if ("+m+") { ")}else n+=" if (!"+y+") { if (vErrors === null) vErrors = "+o+".errors; else vErrors = vErrors.concat("+o+".errors); errors = vErrors.length; } ",u&&(n+=" else { ")}return n}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.schema[a],n=e.schemaPath+e.util.getProperty(a),r=e.errSchemaPath+"/"+a,s=!e.opts.allErrors,c=e.util.copy(e),p="";c.level++;var u="valid"+c.level,l=c.baseId,m=!0,d=o;if(d)for(var h,f=-1,v=d.length-1;f<v;)h=d[f+=1],e.util.schemaHasRules(h,e.RULES.all)&&(m=!1,c.schema=h,c.schemaPath=n+"["+f+"]",c.errSchemaPath=r+"/"+f,i+="  "+e.validate(c)+" ",c.baseId=l,s&&(i+=" if ("+u+") { ",p+="}"));return s&&(i+=m?" if (true) { ":" "+p.slice(0,-1)+" "),i=e.util.cleanUpCode(i)}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="valid"+o,m="errs__"+o,d=e.util.copy(e),h="";d.level++;var f="valid"+d.level;if(r.every(function(a){return e.util.schemaHasRules(a,e.RULES.all)})){var v=d.baseId;i+=" var "+m+" = errors; var "+l+" = false;  ";var g=e.compositeRule;e.compositeRule=d.compositeRule=!0;var b=r;if(b)for(var y,x=-1,k=b.length-1;x<k;)y=b[x+=1],d.schema=y,d.schemaPath=s+"["+x+"]",d.errSchemaPath=c+"/"+x,i+="  "+e.validate(d)+" ",d.baseId=v,i+=" "+l+" = "+l+" || "+f+"; if (!"+l+") { ",h+="}";e.compositeRule=d.compositeRule=g,i+=" "+h+" if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'anyOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should match some schema in anyOf' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&p&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+=" } else {  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; } ",e.opts.allErrors&&(i+=" } "),i=e.util.cleanUpCode(i)}else p&&(i+=" if (true) { ");return i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.schema[a],n=e.errSchemaPath+"/"+a,r=(e.opts.allErrors,e.util.toQuotedString(o));return!0===e.opts.$comment?i+=" console.log("+r+");":"function"==typeof e.opts.$comment&&(i+=" self._opts.$comment("+r+", "+e.util.toQuotedString(n)+", validate.root.schema);"),i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="valid"+o,m=e.opts.$data&&r&&r.$data;m&&(i+=" var schema"+o+" = "+e.util.getData(r.$data,n,e.dataPathArr)+"; "),m||(i+=" var schema"+o+" = validate.schema"+s+";"),i+="var "+l+" = equal("+u+", schema"+o+"); if (!"+l+") {   ";var d=d||[];d.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'const' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { allowedValue: schema"+o+" } ",!1!==e.opts.messages&&(i+=" , message: 'should be equal to constant' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var h=i;return i=d.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+h+"]); ":i+=" validate.errors = ["+h+"]; return false; ":i+=" var err = "+h+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" }",p&&(i+=" else { "),i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="valid"+o,m="errs__"+o,d=e.util.copy(e);d.level++;var h="valid"+d.level,f="i"+o,v=d.dataLevel=e.dataLevel+1,g="data"+v,b=e.baseId,y=e.util.schemaHasRules(r,e.RULES.all);if(i+="var "+m+" = errors;var "+l+";",y){var x=e.compositeRule;e.compositeRule=d.compositeRule=!0,d.schema=r,d.schemaPath=s,d.errSchemaPath=c,i+=" var "+h+" = false; for (var "+f+" = 0; "+f+" < "+u+".length; "+f+"++) { ",d.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers,!0);var k=u+"["+f+"]";d.dataPathArr[v]=f;var w=e.validate(d);d.baseId=b,e.util.varOccurences(w,g)<2?i+=" "+e.util.varReplace(w,g,k)+" ":i+=" var "+g+" = "+k+"; "+w+" ",i+=" if ("+h+") break; }  ",e.compositeRule=d.compositeRule=x,i+="  if (!"+h+") {"}else i+=" if ("+u+".length == 0) {";var j=j||[];j.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'contains' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should contain a valid item' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var E=i;return i=j.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { ",y&&(i+="  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; } "),e.opts.allErrors&&(i+=" } "),i=e.util.cleanUpCode(i)}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="errs__"+o,m=e.util.copy(e),d="";m.level++;var h="valid"+m.level,f={},v={},g=e.opts.ownProperties;for(k in r){var b=r[k],y=Array.isArray(b)?v:f;y[k]=b}i+="var "+l+" = errors;";var x=e.errorPath;for(var k in i+="var missing"+o+";",v)if((y=v[k]).length){if(i+=" if ( "+u+e.util.getProperty(k)+" !== undefined ",g&&(i+=" && Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(k)+"') "),p){i+=" && ( ";var w=y;if(w)for(var j=-1,E=w.length-1;j<E;){q=w[j+=1],j&&(i+=" || "),i+=" ( ( "+(F=u+(P=e.util.getProperty(q)))+" === undefined ",g&&(i+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(q)+"') "),i+=") && (missing"+o+" = "+e.util.toQuotedString(e.opts.jsonPointers?q:P)+") ) "}i+=")) {  ";var S="missing"+o,_="' + "+S+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(x,S,!0):x+" + "+S);var R=R||[];R.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { property: '"+e.util.escapeQuotes(k)+"', missingProperty: '"+_+"', depsCount: "+y.length+", deps: '"+e.util.escapeQuotes(1==y.length?y[0]:y.join(", "))+"' } ",!1!==e.opts.messages&&(i+=" , message: 'should have ",1==y.length?i+="property "+e.util.escapeQuotes(y[0]):i+="properties "+e.util.escapeQuotes(y.join(", ")),i+=" when property "+e.util.escapeQuotes(k)+" is present' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var A=i;i=R.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+A+"]); ":i+=" validate.errors = ["+A+"]; return false; ":i+=" var err = "+A+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else{i+=" ) { ";var C=y;if(C)for(var q,O=-1,z=C.length-1;O<z;){q=C[O+=1];var P=e.util.getProperty(q),F=(_=e.util.escapeQuotes(q),u+P);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(x,q,e.opts.jsonPointers)),i+=" if ( "+F+" === undefined ",g&&(i+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(q)+"') "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { property: '"+e.util.escapeQuotes(k)+"', missingProperty: '"+_+"', depsCount: "+y.length+", deps: '"+e.util.escapeQuotes(1==y.length?y[0]:y.join(", "))+"' } ",!1!==e.opts.messages&&(i+=" , message: 'should have ",1==y.length?i+="property "+e.util.escapeQuotes(y[0]):i+="properties "+e.util.escapeQuotes(y.join(", ")),i+=" when property "+e.util.escapeQuotes(k)+" is present' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}i+=" }   ",p&&(d+="}",i+=" else { ")}e.errorPath=x;var T=m.baseId;for(var k in f){b=f[k];e.util.schemaHasRules(b,e.RULES.all)&&(i+=" "+h+" = true; if ( "+u+e.util.getProperty(k)+" !== undefined ",g&&(i+=" && Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(k)+"') "),i+=") { ",m.schema=b,m.schemaPath=s+e.util.getProperty(k),m.errSchemaPath=c+"/"+e.util.escapeFragment(k),i+="  "+e.validate(m)+" ",m.baseId=T,i+=" }  ",p&&(i+=" if ("+h+") { ",d+="}"))}return p&&(i+="   "+d+" if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="valid"+o,m=e.opts.$data&&r&&r.$data;m&&(i+=" var schema"+o+" = "+e.util.getData(r.$data,n,e.dataPathArr)+"; ");var d="i"+o,h="schema"+o;m||(i+=" var "+h+" = validate.schema"+s+";"),i+="var "+l+";",m&&(i+=" if (schema"+o+" === undefined) "+l+" = true; else if (!Array.isArray(schema"+o+")) "+l+" = false; else {"),i+=l+" = false;for (var "+d+"=0; "+d+"<"+h+".length; "+d+"++) if (equal("+u+", "+h+"["+d+"])) { "+l+" = true; break; }",m&&(i+="  }  "),i+=" if (!"+l+") {   ";var f=f||[];f.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'enum' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { allowedValues: schema"+o+" } ",!1!==e.opts.messages&&(i+=" , message: 'should be equal to one of the allowed values' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var v=i;return i=f.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+v+"]); ":i+=" validate.errors = ["+v+"]; return false; ":i+=" var err = "+v+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" }",p&&(i+=" else { "),i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||"");if(!1===e.opts.format)return p&&(i+=" if (true) { "),i;var l,m=e.opts.$data&&r&&r.$data;m?(i+=" var schema"+o+" = "+e.util.getData(r.$data,n,e.dataPathArr)+"; ",l="schema"+o):l=r;var d=e.opts.unknownFormats,h=Array.isArray(d);if(m){i+=" var "+(f="format"+o)+" = formats["+l+"]; var "+(v="isObject"+o)+" = typeof "+f+" == 'object' && !("+f+" instanceof RegExp) && "+f+".validate; var "+(g="formatType"+o)+" = "+v+" && "+f+".type || 'string'; if ("+v+") { ",e.async&&(i+=" var async"+o+" = "+f+".async; "),i+=" "+f+" = "+f+".validate; } if (  ",m&&(i+=" ("+l+" !== undefined && typeof "+l+" != 'string') || "),i+=" (","ignore"!=d&&(i+=" ("+l+" && !"+f+" ",h&&(i+=" && self._opts.unknownFormats.indexOf("+l+") == -1 "),i+=") || "),i+=" ("+f+" && "+g+" == '"+t+"' && !(typeof "+f+" == 'function' ? ",e.async?i+=" (async"+o+" ? await "+f+"("+u+") : "+f+"("+u+")) ":i+=" "+f+"("+u+") ",i+=" : "+f+".test("+u+"))))) {"}else{var f;if(!(f=e.formats[r])){if("ignore"==d)return e.logger.warn('unknown format "'+r+'" ignored in schema at path "'+e.errSchemaPath+'"'),p&&(i+=" if (true) { "),i;if(h&&d.indexOf(r)>=0)return p&&(i+=" if (true) { "),i;throw new Error('unknown format "'+r+'" is used in schema at path "'+e.errSchemaPath+'"')}var v,g=(v="object"==typeof f&&!(f instanceof RegExp)&&f.validate)&&f.type||"string";if(v){var b=!0===f.async;f=f.validate}if(g!=t)return p&&(i+=" if (true) { "),i;if(b){if(!e.async)throw new Error("async format in sync schema");i+=" if (!(await "+(y="formats"+e.util.getProperty(r)+".validate")+"("+u+"))) { "}else{i+=" if (! ";var y="formats"+e.util.getProperty(r);v&&(y+=".validate"),i+="function"==typeof f?" "+y+"("+u+") ":" "+y+".test("+u+") ",i+=") { "}}var x=x||[];x.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'format' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { format:  ",i+=m?""+l:""+e.util.toQuotedString(r),i+="  } ",!1!==e.opts.messages&&(i+=" , message: 'should match format \"",i+=m?"' + "+l+" + '":""+e.util.escapeQuotes(r),i+="\"' "),e.opts.verbose&&(i+=" , schema:  ",i+=m?"validate.schema"+s:""+e.util.toQuotedString(r),i+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var k=i;return i=x.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+k+"]); ":i+=" validate.errors = ["+k+"]; return false; ":i+=" var err = "+k+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } ",p&&(i+=" else { "),i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="valid"+o,m="errs__"+o,d=e.util.copy(e);d.level++;var h="valid"+d.level,f=e.schema.then,v=e.schema.else,g=void 0!==f&&e.util.schemaHasRules(f,e.RULES.all),b=void 0!==v&&e.util.schemaHasRules(v,e.RULES.all),y=d.baseId;if(g||b){var x;d.createErrors=!1,d.schema=r,d.schemaPath=s,d.errSchemaPath=c,i+=" var "+m+" = errors; var "+l+" = true;  ";var k=e.compositeRule;e.compositeRule=d.compositeRule=!0,i+="  "+e.validate(d)+" ",d.baseId=y,d.createErrors=!0,i+="  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; }  ",e.compositeRule=d.compositeRule=k,g?(i+=" if ("+h+") {  ",d.schema=e.schema.then,d.schemaPath=e.schemaPath+".then",d.errSchemaPath=e.errSchemaPath+"/then",i+="  "+e.validate(d)+" ",d.baseId=y,i+=" "+l+" = "+h+"; ",g&&b?i+=" var "+(x="ifClause"+o)+" = 'then'; ":x="'then'",i+=" } ",b&&(i+=" else { ")):i+=" if (!"+h+") { ",b&&(d.schema=e.schema.else,d.schemaPath=e.schemaPath+".else",d.errSchemaPath=e.errSchemaPath+"/else",i+="  "+e.validate(d)+" ",d.baseId=y,i+=" "+l+" = "+h+"; ",g&&b?i+=" var "+(x="ifClause"+o)+" = 'else'; ":x="'else'",i+=" } "),i+=" if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'if' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { failingKeyword: "+x+" } ",!1!==e.opts.messages&&(i+=" , message: 'should match \"' + "+x+" + '\" schema' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&p&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+=" }   ",p&&(i+=" else { "),i=e.util.cleanUpCode(i)}else p&&(i+=" if (true) { ");return i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="valid"+o,m="errs__"+o,d=e.util.copy(e),h="";d.level++;var f="valid"+d.level,v="i"+o,g=d.dataLevel=e.dataLevel+1,b="data"+g,y=e.baseId;if(i+="var "+m+" = errors;var "+l+";",Array.isArray(r)){var x=e.schema.additionalItems;if(!1===x){i+=" "+l+" = "+u+".length <= "+r.length+"; ";var k=c;c=e.errSchemaPath+"/additionalItems",i+="  if (!"+l+") {   ";var w=w||[];w.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'additionalItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+r.length+" } ",!1!==e.opts.messages&&(i+=" , message: 'should NOT have more than "+r.length+" items' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var j=i;i=w.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+j+"]); ":i+=" validate.errors = ["+j+"]; return false; ":i+=" var err = "+j+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } ",c=k,p&&(h+="}",i+=" else { ")}var E=r;if(E)for(var S,_=-1,R=E.length-1;_<R;)if(S=E[_+=1],e.util.schemaHasRules(S,e.RULES.all)){i+=" "+f+" = true; if ("+u+".length > "+_+") { ";var A=u+"["+_+"]";d.schema=S,d.schemaPath=s+"["+_+"]",d.errSchemaPath=c+"/"+_,d.errorPath=e.util.getPathExpr(e.errorPath,_,e.opts.jsonPointers,!0),d.dataPathArr[g]=_;var C=e.validate(d);d.baseId=y,e.util.varOccurences(C,b)<2?i+=" "+e.util.varReplace(C,b,A)+" ":i+=" var "+b+" = "+A+"; "+C+" ",i+=" }  ",p&&(i+=" if ("+f+") { ",h+="}")}if("object"==typeof x&&e.util.schemaHasRules(x,e.RULES.all)){d.schema=x,d.schemaPath=e.schemaPath+".additionalItems",d.errSchemaPath=e.errSchemaPath+"/additionalItems",i+=" "+f+" = true; if ("+u+".length > "+r.length+") {  for (var "+v+" = "+r.length+"; "+v+" < "+u+".length; "+v+"++) { ",d.errorPath=e.util.getPathExpr(e.errorPath,v,e.opts.jsonPointers,!0);A=u+"["+v+"]";d.dataPathArr[g]=v;C=e.validate(d);d.baseId=y,e.util.varOccurences(C,b)<2?i+=" "+e.util.varReplace(C,b,A)+" ":i+=" var "+b+" = "+A+"; "+C+" ",p&&(i+=" if (!"+f+") break; "),i+=" } }  ",p&&(i+=" if ("+f+") { ",h+="}")}}else if(e.util.schemaHasRules(r,e.RULES.all)){d.schema=r,d.schemaPath=s,d.errSchemaPath=c,i+="  for (var "+v+" = 0; "+v+" < "+u+".length; "+v+"++) { ",d.errorPath=e.util.getPathExpr(e.errorPath,v,e.opts.jsonPointers,!0);A=u+"["+v+"]";d.dataPathArr[g]=v;C=e.validate(d);d.baseId=y,e.util.varOccurences(C,b)<2?i+=" "+e.util.varReplace(C,b,A)+" ":i+=" var "+b+" = "+A+"; "+C+" ",p&&(i+=" if (!"+f+") break; "),i+=" }"}return p&&(i+=" "+h+" if ("+m+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o=" ",n=e.level,r=e.dataLevel,s=e.schema[a],c=e.schemaPath+e.util.getProperty(a),p=e.errSchemaPath+"/"+a,u=!e.opts.allErrors,l="data"+(r||""),m=e.opts.$data&&s&&s.$data;m?(o+=" var schema"+n+" = "+e.util.getData(s.$data,r,e.dataPathArr)+"; ",i="schema"+n):i=s,o+="var division"+n+";if (",m&&(o+=" "+i+" !== undefined && ( typeof "+i+" != 'number' || "),o+=" (division"+n+" = "+l+" / "+i+", ",e.opts.multipleOfPrecision?o+=" Math.abs(Math.round(division"+n+") - division"+n+") > 1e-"+e.opts.multipleOfPrecision+" ":o+=" division"+n+" !== parseInt(division"+n+") ",o+=" ) ",m&&(o+="  )  "),o+=" ) {   ";var d=d||[];d.push(o),o="",!1!==e.createErrors?(o+=" { keyword: 'multipleOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { multipleOf: "+i+" } ",!1!==e.opts.messages&&(o+=" , message: 'should be multiple of ",o+=m?"' + "+i:i+"'"),e.opts.verbose&&(o+=" , schema:  ",o+=m?"validate.schema"+c:""+s,o+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var h=o;return o=d.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+h+"]); ":o+=" validate.errors = ["+h+"]; return false; ":o+=" var err = "+h+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",o+="} ",u&&(o+=" else { "),o}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="errs__"+o,m=e.util.copy(e);m.level++;var d="valid"+m.level;if(e.util.schemaHasRules(r,e.RULES.all)){m.schema=r,m.schemaPath=s,m.errSchemaPath=c,i+=" var "+l+" = errors;  ";var h,f=e.compositeRule;e.compositeRule=m.compositeRule=!0,m.createErrors=!1,m.opts.allErrors&&(h=m.opts.allErrors,m.opts.allErrors=!1),i+=" "+e.validate(m)+" ",m.createErrors=!0,h&&(m.opts.allErrors=h),e.compositeRule=m.compositeRule=f,i+=" if ("+d+") {   ";var v=v||[];v.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should NOT be valid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var g=i;i=v.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+g+"]); ":i+=" validate.errors = ["+g+"]; return false; ":i+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else {  errors = "+l+"; if (vErrors !== null) { if ("+l+") vErrors.length = "+l+"; else vErrors = null; } ",e.opts.allErrors&&(i+=" } ")}else i+="  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should NOT be valid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",p&&(i+=" if (false) { ");return i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="valid"+o,m="errs__"+o,d=e.util.copy(e),h="";d.level++;var f="valid"+d.level,v=d.baseId,g="prevValid"+o,b="passingSchemas"+o;i+="var "+m+" = errors , "+g+" = false , "+l+" = false , "+b+" = null; ";var y=e.compositeRule;e.compositeRule=d.compositeRule=!0;var x=r;if(x)for(var k,w=-1,j=x.length-1;w<j;)k=x[w+=1],e.util.schemaHasRules(k,e.RULES.all)?(d.schema=k,d.schemaPath=s+"["+w+"]",d.errSchemaPath=c+"/"+w,i+="  "+e.validate(d)+" ",d.baseId=v):i+=" var "+f+" = true; ",w&&(i+=" if ("+f+" && "+g+") { "+l+" = false; "+b+" = ["+b+", "+w+"]; } else { ",h+="}"),i+=" if ("+f+") { "+l+" = "+g+" = true; "+b+" = "+w+"; }";return e.compositeRule=d.compositeRule=y,i+=h+"if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'oneOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { passingSchemas: "+b+" } ",!1!==e.opts.messages&&(i+=" , message: 'should match exactly one schema in oneOf' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&p&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+="} else {  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; }",e.opts.allErrors&&(i+=" } "),i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o=" ",n=e.level,r=e.dataLevel,s=e.schema[a],c=e.schemaPath+e.util.getProperty(a),p=e.errSchemaPath+"/"+a,u=!e.opts.allErrors,l="data"+(r||""),m=e.opts.$data&&s&&s.$data;m?(o+=" var schema"+n+" = "+e.util.getData(s.$data,r,e.dataPathArr)+"; ",i="schema"+n):i=s,o+="if ( ",m&&(o+=" ("+i+" !== undefined && typeof "+i+" != 'string') || "),o+=" !"+(m?"(new RegExp("+i+"))":e.usePattern(s))+".test("+l+") ) {   ";var d=d||[];d.push(o),o="",!1!==e.createErrors?(o+=" { keyword: 'pattern' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { pattern:  ",o+=m?""+i:""+e.util.toQuotedString(s),o+="  } ",!1!==e.opts.messages&&(o+=" , message: 'should match pattern \"",o+=m?"' + "+i+" + '":""+e.util.escapeQuotes(s),o+="\"' "),e.opts.verbose&&(o+=" , schema:  ",o+=m?"validate.schema"+c:""+e.util.toQuotedString(s),o+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var h=o;return o=d.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+h+"]); ":o+=" validate.errors = ["+h+"]; return false; ":o+=" var err = "+h+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",o+="} ",u&&(o+=" else { "),o}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="errs__"+o,m=e.util.copy(e),d="";m.level++;var h="valid"+m.level,f="key"+o,v="idx"+o,g=m.dataLevel=e.dataLevel+1,b="data"+g,y="dataProperties"+o,x=Object.keys(r||{}),k=e.schema.patternProperties||{},w=Object.keys(k),j=e.schema.additionalProperties,E=x.length||w.length,S=!1===j,_="object"==typeof j&&Object.keys(j).length,R=e.opts.removeAdditional,A=S||_||R,C=e.opts.ownProperties,q=e.baseId,O=e.schema.required;if(O&&(!e.opts.$data||!O.$data)&&O.length<e.opts.loopRequired)var z=e.util.toHash(O);if(i+="var "+l+" = errors;var "+h+" = true;",C&&(i+=" var "+y+" = undefined;"),A){if(i+=C?" "+y+" = "+y+" || Object.keys("+u+"); for (var "+v+"=0; "+v+"<"+y+".length; "+v+"++) { var "+f+" = "+y+"["+v+"]; ":" for (var "+f+" in "+u+") { ",E){if(i+=" var isAdditional"+o+" = !(false ",x.length)if(x.length>8)i+=" || validate.schema"+s+".hasOwnProperty("+f+") ";else{var P=x;if(P)for(var F=-1,T=P.length-1;F<T;)Q=P[F+=1],i+=" || "+f+" == "+e.util.toQuotedString(Q)+" "}if(w.length){var I=w;if(I)for(var D=-1,B=I.length-1;D<B;)oe=I[D+=1],i+=" || "+e.usePattern(oe)+".test("+f+") "}i+=" ); if (isAdditional"+o+") { "}if("all"==R)i+=" delete "+u+"["+f+"]; ";else{var L=e.errorPath,U="' + "+f+" + '";if(e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers)),S)if(R)i+=" delete "+u+"["+f+"]; ";else{i+=" "+h+" = false; ";var N=c;c=e.errSchemaPath+"/additionalProperties",(ae=ae||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'additionalProperties' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { additionalProperty: '"+U+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is an invalid additional property":i+="should NOT have additional properties",i+="' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var H=i;i=ae.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+H+"]); ":i+=" validate.errors = ["+H+"]; return false; ":i+=" var err = "+H+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",c=N,p&&(i+=" break; ")}else if(_)if("failing"==R){i+=" var "+l+" = errors;  ";var M=e.compositeRule;e.compositeRule=m.compositeRule=!0,m.schema=j,m.schemaPath=e.schemaPath+".additionalProperties",m.errSchemaPath=e.errSchemaPath+"/additionalProperties",m.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);var K=u+"["+f+"]";m.dataPathArr[g]=f;var $=e.validate(m);m.baseId=q,e.util.varOccurences($,b)<2?i+=" "+e.util.varReplace($,b,K)+" ":i+=" var "+b+" = "+K+"; "+$+" ",i+=" if (!"+h+") { errors = "+l+"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete "+u+"["+f+"]; }  ",e.compositeRule=m.compositeRule=M}else{m.schema=j,m.schemaPath=e.schemaPath+".additionalProperties",m.errSchemaPath=e.errSchemaPath+"/additionalProperties",m.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);K=u+"["+f+"]";m.dataPathArr[g]=f;$=e.validate(m);m.baseId=q,e.util.varOccurences($,b)<2?i+=" "+e.util.varReplace($,b,K)+" ":i+=" var "+b+" = "+K+"; "+$+" ",p&&(i+=" if (!"+h+") break; ")}e.errorPath=L}E&&(i+=" } "),i+=" }  ",p&&(i+=" if ("+h+") { ",d+="}")}var G=e.opts.useDefaults&&!e.compositeRule;if(x.length){var V=x;if(V)for(var Q,W=-1,Y=V.length-1;W<Y;){var Z=r[Q=V[W+=1]];if(e.util.schemaHasRules(Z,e.RULES.all)){var J=e.util.getProperty(Q),X=(K=u+J,G&&void 0!==Z.default);m.schema=Z,m.schemaPath=s+J,m.errSchemaPath=c+"/"+e.util.escapeFragment(Q),m.errorPath=e.util.getPath(e.errorPath,Q,e.opts.jsonPointers),m.dataPathArr[g]=e.util.toQuotedString(Q);$=e.validate(m);if(m.baseId=q,e.util.varOccurences($,b)<2){$=e.util.varReplace($,b,K);var ee=K}else{ee=b;i+=" var "+b+" = "+K+"; "}if(X)i+=" "+$+" ";else{if(z&&z[Q]){i+=" if ( "+ee+" === undefined ",C&&(i+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(Q)+"') "),i+=") { "+h+" = false; ";L=e.errorPath,N=c;var ae,te=e.util.escapeQuotes(Q);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(L,Q,e.opts.jsonPointers)),c=e.errSchemaPath+"/required",(ae=ae||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { missingProperty: '"+te+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+te+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";H=i;i=ae.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+H+"]); ":i+=" validate.errors = ["+H+"]; return false; ":i+=" var err = "+H+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",c=N,e.errorPath=L,i+=" } else { "}else p?(i+=" if ( "+ee+" === undefined ",C&&(i+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(Q)+"') "),i+=") { "+h+" = true; } else { "):(i+=" if ("+ee+" !== undefined ",C&&(i+=" &&   Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(Q)+"') "),i+=" ) { ");i+=" "+$+" } "}}p&&(i+=" if ("+h+") { ",d+="}")}}if(w.length){var ie=w;if(ie)for(var oe,ne=-1,re=ie.length-1;ne<re;){Z=k[oe=ie[ne+=1]];if(e.util.schemaHasRules(Z,e.RULES.all)){m.schema=Z,m.schemaPath=e.schemaPath+".patternProperties"+e.util.getProperty(oe),m.errSchemaPath=e.errSchemaPath+"/patternProperties/"+e.util.escapeFragment(oe),i+=C?" "+y+" = "+y+" || Object.keys("+u+"); for (var "+v+"=0; "+v+"<"+y+".length; "+v+"++) { var "+f+" = "+y+"["+v+"]; ":" for (var "+f+" in "+u+") { ",i+=" if ("+e.usePattern(oe)+".test("+f+")) { ",m.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);K=u+"["+f+"]";m.dataPathArr[g]=f;$=e.validate(m);m.baseId=q,e.util.varOccurences($,b)<2?i+=" "+e.util.varReplace($,b,K)+" ":i+=" var "+b+" = "+K+"; "+$+" ",p&&(i+=" if (!"+h+") break; "),i+=" } ",p&&(i+=" else "+h+" = true; "),i+=" }  ",p&&(i+=" if ("+h+") { ",d+="}")}}}return p&&(i+=" "+d+" if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="errs__"+o,m=e.util.copy(e);m.level++;var d="valid"+m.level;if(i+="var "+l+" = errors;",e.util.schemaHasRules(r,e.RULES.all)){m.schema=r,m.schemaPath=s,m.errSchemaPath=c;var h="key"+o,f="idx"+o,v="i"+o,g="' + "+h+" + '",b="data"+(m.dataLevel=e.dataLevel+1),y="dataProperties"+o,x=e.opts.ownProperties,k=e.baseId;x&&(i+=" var "+y+" = undefined; "),i+=x?" "+y+" = "+y+" || Object.keys("+u+"); for (var "+f+"=0; "+f+"<"+y+".length; "+f+"++) { var "+h+" = "+y+"["+f+"]; ":" for (var "+h+" in "+u+") { ",i+=" var startErrs"+o+" = errors; ";var w=h,j=e.compositeRule;e.compositeRule=m.compositeRule=!0;var E=e.validate(m);m.baseId=k,e.util.varOccurences(E,b)<2?i+=" "+e.util.varReplace(E,b,w)+" ":i+=" var "+b+" = "+w+"; "+E+" ",e.compositeRule=m.compositeRule=j,i+=" if (!"+d+") { for (var "+v+"=startErrs"+o+"; "+v+"<errors; "+v+"++) { vErrors["+v+"].propertyName = "+h+"; }   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'propertyNames' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { propertyName: '"+g+"' } ",!1!==e.opts.messages&&(i+=" , message: 'property name \\'"+g+"\\' is invalid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&p&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),p&&(i+=" break; "),i+=" } }"}return p&&(i+="  if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i=" ",o=e.level,n=e.dataLevel,r=e.schema[a],s=e.schemaPath+e.util.getProperty(a),c=e.errSchemaPath+"/"+a,p=!e.opts.allErrors,u="data"+(n||""),l="valid"+o,m=e.opts.$data&&r&&r.$data;m&&(i+=" var schema"+o+" = "+e.util.getData(r.$data,n,e.dataPathArr)+"; ");var d="schema"+o;if(!m)if(r.length<e.opts.loopRequired&&e.schema.properties&&Object.keys(e.schema.properties).length){var h=[],f=r;if(f)for(var v,g=-1,b=f.length-1;g<b;){v=f[g+=1];var y=e.schema.properties[v];y&&e.util.schemaHasRules(y,e.RULES.all)||(h[h.length]=v)}}else h=r;if(m||h.length){var x=e.errorPath,k=m||h.length>=e.opts.loopRequired,w=e.opts.ownProperties;if(p)if(i+=" var missing"+o+"; ",k){m||(i+=" var "+d+" = validate.schema"+s+"; ");var j="' + "+(C="schema"+o+"["+(_="i"+o)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(x,C,e.opts.jsonPointers)),i+=" var "+l+" = true; ",m&&(i+=" if (schema"+o+" === undefined) "+l+" = true; else if (!Array.isArray(schema"+o+")) "+l+" = false; else {"),i+=" for (var "+_+" = 0; "+_+" < "+d+".length; "+_+"++) { "+l+" = "+u+"["+d+"["+_+"]] !== undefined ",w&&(i+=" &&   Object.prototype.hasOwnProperty.call("+u+", "+d+"["+_+"]) "),i+="; if (!"+l+") break; } ",m&&(i+="  }  "),i+="  if (!"+l+") {   ",(A=A||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { missingProperty: '"+j+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+j+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";var E=i;i=A.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { "}else{i+=" if ( ";var S=h;if(S)for(var _=-1,R=S.length-1;_<R;){O=S[_+=1],_&&(i+=" || "),i+=" ( ( "+(T=u+(F=e.util.getProperty(O)))+" === undefined ",w&&(i+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(O)+"') "),i+=") && (missing"+o+" = "+e.util.toQuotedString(e.opts.jsonPointers?O:F)+") ) "}i+=") {  ";var A;j="' + "+(C="missing"+o)+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(x,C,!0):x+" + "+C),(A=A||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { missingProperty: '"+j+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+j+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ";E=i;i=A.pop(),!e.compositeRule&&p?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { "}else if(k){m||(i+=" var "+d+" = validate.schema"+s+"; ");var C;j="' + "+(C="schema"+o+"["+(_="i"+o)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(x,C,e.opts.jsonPointers)),m&&(i+=" if ("+d+" && !Array.isArray("+d+")) {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { missingProperty: '"+j+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+j+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if ("+d+" !== undefined) { "),i+=" for (var "+_+" = 0; "+_+" < "+d+".length; "+_+"++) { if ("+u+"["+d+"["+_+"]] === undefined ",w&&(i+=" || ! Object.prototype.hasOwnProperty.call("+u+", "+d+"["+_+"]) "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { missingProperty: '"+j+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+j+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ",m&&(i+="  }  ")}else{var q=h;if(q)for(var O,z=-1,P=q.length-1;z<P;){O=q[z+=1];var F=e.util.getProperty(O),T=(j=e.util.escapeQuotes(O),u+F);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(x,O,e.opts.jsonPointers)),i+=" if ( "+T+" === undefined ",w&&(i+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(O)+"') "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { missingProperty: '"+j+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+j+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}e.errorPath=x}else p&&(i+=" if (true) {");return i}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o=" ",n=e.level,r=e.dataLevel,s=e.schema[a],c=e.schemaPath+e.util.getProperty(a),p=e.errSchemaPath+"/"+a,u=!e.opts.allErrors,l="data"+(r||""),m="valid"+n,d=e.opts.$data&&s&&s.$data;if(d?(o+=" var schema"+n+" = "+e.util.getData(s.$data,r,e.dataPathArr)+"; ",i="schema"+n):i=s,(s||d)&&!1!==e.opts.uniqueItems){d&&(o+=" var "+m+"; if ("+i+" === false || "+i+" === undefined) "+m+" = true; else if (typeof "+i+" != 'boolean') "+m+" = false; else { "),o+=" var i = "+l+".length , "+m+" = true , j; if (i > 1) { ";var h=e.schema.items&&e.schema.items.type,f=Array.isArray(h);if(!h||"object"==h||"array"==h||f&&(h.indexOf("object")>=0||h.indexOf("array")>=0))o+=" outer: for (;i--;) { for (j = i; j--;) { if (equal("+l+"[i], "+l+"[j])) { "+m+" = false; break outer; } } } ";else{o+=" var itemIndices = {}, item; for (;i--;) { var item = "+l+"[i]; ";var v="checkDataType"+(f?"s":"");o+=" if ("+e.util[v](h,"item",!0)+") continue; ",f&&(o+=" if (typeof item == 'string') item = '\"' + item; "),o+=" if (typeof itemIndices[item] == 'number') { "+m+" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } "}o+=" } ",d&&(o+="  }  "),o+=" if (!"+m+") {   ";var g=g||[];g.push(o),o="",!1!==e.createErrors?(o+=" { keyword: 'uniqueItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { i: i, j: j } ",!1!==e.opts.messages&&(o+=" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "),e.opts.verbose&&(o+=" , schema:  ",o+=d?"validate.schema"+c:""+s,o+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var b=o;o=g.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+b+"]); ":o+=" validate.errors = ["+b+"]; return false; ":o+=" var err = "+b+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",o+=" } ",u&&(o+=" else { ")}else u&&(o+=" if (true) { ");return o}},function(e,a,t){"use strict";var i=["multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","additionalItems","maxItems","minItems","uniqueItems","maxProperties","minProperties","required","additionalProperties","enum","format","const"];e.exports=function(e,a){for(var t=0;t<a.length;t++){e=JSON.parse(JSON.stringify(e));var o,n=a[t].split("/"),r=e;for(o=1;o<n.length;o++)r=r[n[o]];for(o=0;o<i.length;o++){var s=i[o],c=r[s];c&&(r[s]={anyOf:[c,{$ref:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#"}]})}}return e}},function(e,a,t){"use strict";var i=t(50).MissingRef;e.exports=function e(a,t,o){var n=this;if("function"!=typeof this._opts.loadSchema)throw new Error("options.loadSchema should be a function");"function"==typeof t&&(o=t,t=void 0);var r=s(a).then(function(){var e=n._addSchema(a,void 0,t);return e.validate||function e(a){try{return n._compile(a)}catch(e){if(e instanceof i)return function o(e){var o=e.missingSchema;if(p(o))throw new Error("Schema "+o+" is loaded but "+e.missingRef+" cannot be resolved");var r=n._loadingSchemas[o];r||(r=n._loadingSchemas[o]=n._opts.loadSchema(o)).then(c,c);return r.then(function(e){if(!p(o))return s(e).then(function(){p(o)||n.addSchema(e,o,void 0,t)})}).then(function(){return function e(a){try{return n._compile(a)}catch(e){if(e instanceof i)return o(e);throw e}function o(i){var o=i.missingSchema;if(p(o))throw new Error("Schema "+o+" is loaded but "+i.missingRef+" cannot be resolved");var r=n._loadingSchemas[o];return r||(r=n._loadingSchemas[o]=n._opts.loadSchema(o)).then(c,c),r.then(function(e){if(!p(o))return s(e).then(function(){p(o)||n.addSchema(e,o,void 0,t)})}).then(function(){return e(a)});function c(){delete n._loadingSchemas[o]}function p(e){return n._refs[e]||n._schemas[e]}}}(a)});function c(){delete n._loadingSchemas[o]}function p(e){return n._refs[e]||n._schemas[e]}}(e);throw e}function o(i){var o=i.missingSchema;if(p(o))throw new Error("Schema "+o+" is loaded but "+i.missingRef+" cannot be resolved");var r=n._loadingSchemas[o];return r||(r=n._loadingSchemas[o]=n._opts.loadSchema(o)).then(c,c),r.then(function(e){if(!p(o))return s(e).then(function(){p(o)||n.addSchema(e,o,void 0,t)})}).then(function(){return e(a)});function c(){delete n._loadingSchemas[o]}function p(e){return n._refs[e]||n._schemas[e]}}}(e)});o&&r.then(function(e){o(null,e)},o);return r;function s(a){var t=a.$schema;return t&&!n.getSchema(t)?e.call(n,{$ref:t},!0):Promise.resolve()}}},function(e,a,t){"use strict";var i=/^[a-z_$][a-z0-9_$-]*$/i,o=t(192);e.exports={add:function(e,a){var t=this.RULES;if(t.keywords[e])throw new Error("Keyword "+e+" is already defined");if(!i.test(e))throw new Error("Keyword "+e+" is not a valid identifier");if(a){if(a.macro&&void 0!==a.valid)throw new Error('"valid" option cannot be used with macro keywords');var n=a.type;if(Array.isArray(n)){var r,s=n.length;for(r=0;r<s;r++)l(n[r]);for(r=0;r<s;r++)u(e,n[r],a)}else n&&l(n),u(e,n,a);var c=!0===a.$data&&this._opts.$data;if(c&&!a.validate)throw new Error('$data support: "validate" function is not defined');var p=a.metaSchema;p&&(c&&(p={anyOf:[p,{$ref:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#"}]}),a.validateSchema=this.compile(p,!0))}function u(e,a,i){for(var n,r=0;r<t.length;r++){var s=t[r];if(s.type==a){n=s;break}}n||(n={type:a,rules:[]},t.push(n));var c={keyword:e,definition:i,custom:!0,code:o,implements:i.implements};n.rules.push(c),t.custom[e]=c}function l(e){if(!t.types[e])throw new Error("Unknown type "+e)}return t.keywords[e]=t.all[e]=!0,this},get:function(e){var a=this.RULES.custom[e];return a?a.definition:this.RULES.keywords[e]||!1},remove:function(e){var a=this.RULES;delete a.keywords[e],delete a.all[e],delete a.custom[e];for(var t=0;t<a.length;t++)for(var i=a[t].rules,o=0;o<i.length;o++)if(i[o].keyword==e){i.splice(o,1);break}return this}}},function(e,a,t){"use strict";e.exports=function(e,a,t){var i,o,n=" ",r=e.level,s=e.dataLevel,c=e.schema[a],p=e.schemaPath+e.util.getProperty(a),u=e.errSchemaPath+"/"+a,l=!e.opts.allErrors,m="data"+(s||""),d="valid"+r,h="errs__"+r,f=e.opts.$data&&c&&c.$data;f?(n+=" var schema"+r+" = "+e.util.getData(c.$data,s,e.dataPathArr)+"; ",o="schema"+r):o=c;var v,g,b,y,x,k="definition"+r,w=this.definition,j="";if(f&&w.$data){x="keywordValidate"+r;var E=w.validateSchema;n+=" var "+k+" = RULES.custom['"+a+"'].definition; var "+x+" = "+k+".validate;"}else{if(!(y=e.useCustomRule(this,c,e.schema,e)))return;o="validate.schema"+p,x=y.code,v=w.compile,g=w.inline,b=w.macro}var S=x+".errors",_="i"+r,R="ruleErr"+r,A=w.async;if(A&&!e.async)throw new Error("async keyword in sync schema");if(g||b||(n+=S+" = null;"),n+="var "+h+" = errors;var "+d+";",f&&w.$data&&(j+="}",n+=" if ("+o+" === undefined) { "+d+" = true; } else { ",E&&(j+="}",n+=" "+d+" = "+k+".validateSchema("+o+"); if ("+d+") { ")),g)w.statements?n+=" "+y.validate+" ":n+=" "+d+" = "+y.validate+"; ";else if(b){var C=e.util.copy(e);j="";C.level++;var q="valid"+C.level;C.schema=y.validate,C.schemaPath="";var O=e.compositeRule;e.compositeRule=C.compositeRule=!0;var z=e.validate(C).replace(/validate\.schema/g,x);e.compositeRule=C.compositeRule=O,n+=" "+z}else{(I=I||[]).push(n),n="",n+="  "+x+".call( ",e.opts.passContext?n+="this":n+="self",v||!1===w.schema?n+=" , "+m+" ":n+=" , "+o+" , "+m+" , validate.schema"+e.schemaPath+" ",n+=" , (dataPath || '')",'""'!=e.errorPath&&(n+=" + "+e.errorPath);var P=s?"data"+(s-1||""):"parentData",F=s?e.dataPathArr[s]:"parentDataProperty",T=n+=" , "+P+" , "+F+" , rootData )  ";n=I.pop(),!1===w.errors?(n+=" "+d+" = ",A&&(n+="await "),n+=T+"; "):n+=A?" var "+(S="customErrors"+r)+" = null; try { "+d+" = await "+T+"; } catch (e) { "+d+" = false; if (e instanceof ValidationError) "+S+" = e.errors; else throw e; } ":" "+S+" = null; "+d+" = "+T+"; "}if(w.modifying&&(n+=" if ("+P+") "+m+" = "+P+"["+F+"];"),n+=""+j,w.valid)l&&(n+=" if (true) { ");else{var I;n+=" if ( ",void 0===w.valid?(n+=" !",n+=b?""+q:""+d):n+=" "+!w.valid+" ",n+=") { ",i=this.keyword,(I=I||[]).push(n),n="",(I=I||[]).push(n),n="",!1!==e.createErrors?(n+=" { keyword: '"+(i||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { keyword: '"+this.keyword+"' } ",!1!==e.opts.messages&&(n+=" , message: 'should pass \""+this.keyword+"\" keyword validation' "),e.opts.verbose&&(n+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+m+" "),n+=" } "):n+=" {} ";var D=n;n=I.pop(),!e.compositeRule&&l?e.async?n+=" throw new ValidationError(["+D+"]); ":n+=" validate.errors = ["+D+"]; return false; ":n+=" var err = "+D+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";var B=n;n=I.pop(),g?w.errors?"full"!=w.errors&&(n+="  for (var "+_+"="+h+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+R+".schemaPath === undefined) { "+R+'.schemaPath = "'+u+'"; } ',e.opts.verbose&&(n+=" "+R+".schema = "+o+"; "+R+".data = "+m+"; "),n+=" } "):!1===w.errors?n+=" "+B+" ":(n+=" if ("+h+" == errors) { "+B+" } else {  for (var "+_+"="+h+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+R+".schemaPath === undefined) { "+R+'.schemaPath = "'+u+'"; } ',e.opts.verbose&&(n+=" "+R+".schema = "+o+"; "+R+".data = "+m+"; "),n+=" } } "):b?(n+="   var err =   ",!1!==e.createErrors?(n+=" { keyword: '"+(i||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { keyword: '"+this.keyword+"' } ",!1!==e.opts.messages&&(n+=" , message: 'should pass \""+this.keyword+"\" keyword validation' "),e.opts.verbose&&(n+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+m+" "),n+=" } "):n+=" {} ",n+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&l&&(e.async?n+=" throw new ValidationError(vErrors); ":n+=" validate.errors = vErrors; return false; ")):!1===w.errors?n+=" "+B+" ":(n+=" if (Array.isArray("+S+")) { if (vErrors === null) vErrors = "+S+"; else vErrors = vErrors.concat("+S+"); errors = vErrors.length;  for (var "+_+"="+h+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+";  "+R+'.schemaPath = "'+u+'";  ',e.opts.verbose&&(n+=" "+R+".schema = "+o+"; "+R+".data = "+m+"; "),n+=" } } else { "+B+" } "),n+=" } ",l&&(n+=" else { ")}return n}},function(e){e.exports={$schema:"http://json-schema.org/draft-07/schema#",$id:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON Schema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1}},function(e){e.exports={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0}},function(e,a){function t(e){this.name="HARError",this.message="validation failed",this.errors=e,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error("validation failed").stack}t.prototype=Error.prototype,e.exports=t},function(e,a,t){"use strict";e.exports={afterRequest:t(197),beforeRequest:t(198),browser:t(199),cache:t(200),content:t(201),cookie:t(202),creator:t(203),entry:t(204),har:t(205),header:t(206),log:t(207),page:t(208),pageTimings:t(209),postData:t(210),query:t(211),request:t(212),response:t(213),timings:t(214)}},function(e){e.exports={$id:"afterRequest.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["lastAccess","eTag","hitCount"],properties:{expires:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},lastAccess:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},eTag:{type:"string"},hitCount:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"beforeRequest.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["lastAccess","eTag","hitCount"],properties:{expires:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},lastAccess:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},eTag:{type:"string"},hitCount:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"browser.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","version"],properties:{name:{type:"string"},version:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"cache.json#",$schema:"http://json-schema.org/draft-06/schema#",properties:{beforeRequest:{oneOf:[{type:"null"},{$ref:"beforeRequest.json#"}]},afterRequest:{oneOf:[{type:"null"},{$ref:"afterRequest.json#"}]},comment:{type:"string"}}}},function(e){e.exports={$id:"content.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["size","mimeType"],properties:{size:{type:"integer"},compression:{type:"integer"},mimeType:{type:"string"},text:{type:"string"},encoding:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"cookie.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},path:{type:"string"},domain:{type:"string"},expires:{type:["string","null"],format:"date-time"},httpOnly:{type:"boolean"},secure:{type:"boolean"},comment:{type:"string"}}}},function(e){e.exports={$id:"creator.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","version"],properties:{name:{type:"string"},version:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"entry.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["startedDateTime","time","request","response","cache","timings"],properties:{pageref:{type:"string"},startedDateTime:{type:"string",format:"date-time",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"},time:{type:"number",min:0},request:{$ref:"request.json#"},response:{$ref:"response.json#"},cache:{$ref:"cache.json#"},timings:{$ref:"timings.json#"},serverIPAddress:{type:"string",oneOf:[{format:"ipv4"},{format:"ipv6"}]},connection:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"har.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["log"],properties:{log:{$ref:"log.json#"}}}},function(e){e.exports={$id:"header.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"log.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["version","creator","entries"],properties:{version:{type:"string"},creator:{$ref:"creator.json#"},browser:{$ref:"browser.json#"},pages:{type:"array",items:{$ref:"page.json#"}},entries:{type:"array",items:{$ref:"entry.json#"}},comment:{type:"string"}}}},function(e){e.exports={$id:"page.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["startedDateTime","id","title","pageTimings"],properties:{startedDateTime:{type:"string",format:"date-time",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"},id:{type:"string",unique:!0},title:{type:"string"},pageTimings:{$ref:"pageTimings.json#"},comment:{type:"string"}}}},function(e){e.exports={$id:"pageTimings.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",properties:{onContentLoad:{type:"number",min:-1},onLoad:{type:"number",min:-1},comment:{type:"string"}}}},function(e){e.exports={$id:"postData.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["mimeType"],properties:{mimeType:{type:"string"},text:{type:"string"},params:{type:"array",required:["name"],properties:{name:{type:"string"},value:{type:"string"},fileName:{type:"string"},contentType:{type:"string"},comment:{type:"string"}}},comment:{type:"string"}}}},function(e){e.exports={$id:"query.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"request.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["method","url","httpVersion","cookies","headers","queryString","headersSize","bodySize"],properties:{method:{type:"string"},url:{type:"string",format:"uri"},httpVersion:{type:"string"},cookies:{type:"array",items:{$ref:"cookie.json#"}},headers:{type:"array",items:{$ref:"header.json#"}},queryString:{type:"array",items:{$ref:"query.json#"}},postData:{$ref:"postData.json#"},headersSize:{type:"integer"},bodySize:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"response.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["status","statusText","httpVersion","cookies","headers","content","redirectURL","headersSize","bodySize"],properties:{status:{type:"integer"},statusText:{type:"string"},httpVersion:{type:"string"},cookies:{type:"array",items:{$ref:"cookie.json#"}},headers:{type:"array",items:{$ref:"header.json#"}},content:{$ref:"content.json#"},redirectURL:{type:"string"},headersSize:{type:"integer"},bodySize:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"timings.json#",$schema:"http://json-schema.org/draft-06/schema#",required:["send","wait","receive"],properties:{dns:{type:"number",min:-1},connect:{type:"number",min:-1},blocked:{type:"number",min:-1},send:{type:"number",min:-1},wait:{type:"number",min:-1},receive:{type:"number",min:-1},ssl:{type:"number",min:-1},comment:{type:"string"}}}},function(e){e.exports={$schema:"http://json-schema.org/draft-06/schema#",$id:"http://json-schema.org/draft-06/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},title:{type:"string"},description:{type:"string"},default:{},examples:{type:"array",items:{}},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:{}},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:{},enum:{type:"array",minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:{}}},function(e,a,t){"use strict";var i=t(47),o=t(51),n=t(40),r=n.md5,s=n.toBase64;function c(e){this.request=e,this.hasAuth=!1,this.sentAuth=!1,this.bearerToken=null,this.user=null,this.pass=null}c.prototype.basic=function(e,a,t){if(("string"!=typeof e||void 0!==a&&"string"!=typeof a)&&this.request.emit("error",new Error("auth() received invalid user or password")),this.user=e,this.pass=a,this.hasAuth=!0,t||void 0===t){var i="Basic "+s(e+":"+(a||""));return this.sentAuth=!0,i}},c.prototype.bearer=function(e,a){if(this.bearerToken=e,this.hasAuth=!0,a||void 0===a){"function"==typeof e&&(e=e());var t="Bearer "+(e||"");return this.sentAuth=!0,t}},c.prototype.digest=function(e,a,t){for(var i={},n=/([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi;;){var s=n.exec(t);if(!s)break;i[s[1]]=s[2]||s[3]}var c=/(^|,)\s*auth\s*($|,)/.test(i.qop)&&"auth",p=c&&"00000001",u=c&&o().replace(/-/g,""),l=function(e,a,t,i,o,n){var s=r(a+":"+t+":"+i);return e&&"md5-sess"===e.toLowerCase()?r(s+":"+o+":"+n):s}(i.algorithm,this.user,i.realm,this.pass,i.nonce,u),m=r(e+":"+a),d=r(c?l+":"+i.nonce+":"+p+":"+u+":"+c+":"+m:l+":"+i.nonce+":"+m),h={username:this.user,realm:i.realm,nonce:i.nonce,uri:a,qop:c,response:d,nc:p,cnonce:u,algorithm:i.algorithm,opaque:i.opaque};for(var f in t=[],h)h[f]&&("qop"===f||"nc"===f||"algorithm"===f?t.push(f+"="+h[f]):t.push(f+'="'+h[f]+'"'));return t="Digest "+t.join(", "),this.sentAuth=!0,t},c.prototype.onRequest=function(e,a,t,i){var o,n=this.request;void 0===i&&void 0===e?this.request.emit("error",new Error("no auth mechanism defined")):o=void 0!==i?this.bearer(i,t):this.basic(e,a,t),o&&n.setHeader("authorization",o)},c.prototype.onResponse=function(e){var a=this.request;if(!this.hasAuth||this.sentAuth)return null;var t=i(e.headers).get("www-authenticate"),o=t&&t.split(" ")[0].toLowerCase();switch(a.debug("reauth",o),o){case"basic":return this.basic(this.user,this.pass,!0);case"bearer":return this.bearer(this.bearerToken,!0);case"digest":return this.digest(a.method,a.path,t)}},a.Auth=c},function(e,a,t){var i=t(2);e.exports=function(){return i.randomBytes(16)}},function(e,a){for(var t=[],i=0;i<256;++i)t[i]=(i+256).toString(16).substr(1);e.exports=function(e,a){var i=a||0,o=t;return[o[e[i++]],o[e[i++]],o[e[i++]],o[e[i++]],"-",o[e[i++]],o[e[i++]],"-",o[e[i++]],o[e[i++]],"-",o[e[i++]],o[e[i++]],"-",o[e[i++]],o[e[i++]],o[e[i++]],o[e[i++]],o[e[i++]],o[e[i++]]].join("")}},function(e,a,t){"use strict";var i=t(9),o=t(76),n=t(47),r=t(51),s=t(220),c=t(2),p=t(22).Buffer;function u(e){this.request=e,this.params=null}u.prototype.buildParams=function(e,a,t,i,o,n){var c={};for(var p in e)c["oauth_"+p]=e[p];c.oauth_version||(c.oauth_version="1.0"),c.oauth_timestamp||(c.oauth_timestamp=Math.floor(Date.now()/1e3).toString()),c.oauth_nonce||(c.oauth_nonce=r().replace(/-/g,"")),c.oauth_signature_method||(c.oauth_signature_method="HMAC-SHA1");var u=c.oauth_consumer_secret||c.oauth_private_key;delete c.oauth_consumer_secret,delete c.oauth_private_key;var l=c.oauth_token_secret;delete c.oauth_token_secret;var m=c.oauth_realm;delete c.oauth_realm,delete c.oauth_transport_method;var d=a.protocol+"//"+a.host+a.pathname,h=n.parse([].concat(i,o,n.stringify(c)).join("&"));return c.oauth_signature=s.sign(c.oauth_signature_method,t,d,h,u,l),m&&(c.realm=m),c},u.prototype.buildBodyHash=function(e,a){["HMAC-SHA1","RSA-SHA1"].indexOf(e.signature_method||"HMAC-SHA1")<0&&this.request.emit("error",new Error("oauth: "+e.signature_method+" signature_method not supported with body_hash signing."));var t=c.createHash("sha1");t.update(a||"");var i=t.digest("hex");return p.from(i,"hex").toString("base64")},u.prototype.concatParams=function(e,a,t){t=t||"";var i=Object.keys(e).filter(function(e){return"realm"!==e&&"oauth_signature"!==e}).sort();return e.realm&&i.splice(0,0,"realm"),i.push("oauth_signature"),i.map(function(a){return a+"="+t+s.rfc3986(e[a])+t}).join(a)},u.prototype.onRequest=function(e){this.params=e;var a,t,r=this.request.uri||{},s=this.request.method||"",c=n(this.request.headers),p=this.request.body||"",u=this.request.qsLib||o,l=c.get("content-type")||"",m="application/x-www-form-urlencoded",d=e.transport_method||"header";l.slice(0,m.length)===m&&(l=m,a=p),r.query&&(t=r.query),"body"!==d||"POST"===s&&l===m||this.request.emit("error",new Error("oauth: transport_method of body requires POST and content-type "+m)),a||"boolean"!=typeof e.body_hash||(e.body_hash=this.buildBodyHash(e,this.request.body.toString()));var h=this.buildParams(e,r,s,t,a,u);switch(d){case"header":this.request.setHeader("Authorization","OAuth "+this.concatParams(h,",",'"'));break;case"query":var f=this.request.uri.href+=(t?"&":"?")+this.concatParams(h,"&");this.request.uri=i.parse(f),this.request.path=this.request.uri.path;break;case"body":this.request.body=(a?a+"&":"")+this.concatParams(h,"&");break;default:this.request.emit("error",new Error("oauth: transport_method invalid"))}},a.OAuth=u},function(e,a,t){var i=t(2);function o(e,a,t){return i.createHmac(t,e).update(a).digest("base64")}function n(e){return encodeURIComponent(e).replace(/!/g,"%21").replace(/\*/g,"%2A").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/'/g,"%27")}function r(e,a){return e>a?1:e<a?-1:0}function s(e,a,t){var i=function(e){var a,t,i=[];for(a in e)if(t=e[a],Array.isArray(t))for(var o=0;o<t.length;o++)i.push([a,t[o]]);else if("object"==typeof t)for(var n in t)i.push([a+"["+n+"]",t[n]]);else i.push([a,t]);return i}(t).map(function(e){return[n(e[0]),n(e[1]||"")]}).sort(function(e,a){return r(e[0],a[0])||r(e[1],a[1])}).map(function(e){return e.join("=")}).join("&");return[n(e?e.toUpperCase():"GET"),n(a),n(i)].join("&")}function c(e,a,t,i,r){var c=s(e,a,t);return o([i||"",r||""].map(n).join("&"),c,"sha1")}function p(e,a,t,i,r){var c=s(e,a,t);return o([i||"",r||""].map(n).join("&"),c,"sha256")}function u(e,a,t,o,n){return function(e,a){return i.createSign("RSA-SHA1").update(a).sign(e,"base64")}(o||"",s(e,a,t))}function l(e,a){return[e||"",a||""].map(n).join("&")}a.hmacsign=c,a.hmacsign256=p,a.rsasign=u,a.plaintext=l,a.sign=function(e,a,t,i,o,n){var r,s=1;switch(e){case"RSA-SHA1":r=u;break;case"HMAC-SHA1":r=c;break;case"HMAC-SHA256":r=p;break;case"PLAINTEXT":r=l,s=4;break;default:throw new Error("Signature method not supported: "+e)}return r.apply(null,[].slice.call(arguments,s))},a.rfc3986=n,a.generateBase=s},function(e,a,t){"use strict";var i=t(2);a.calculateMac=function(e,a){var t="hawk.1.header\n"+a.ts+"\n"+a.nonce+"\n"+(a.method||"").toUpperCase()+"\n"+a.resource+"\n"+a.host.toLowerCase()+"\n"+a.port+"\n"+(a.hash||"")+"\n";return a.ext&&(t+=a.ext.replace("\\","\\\\").replace("\n","\\n")),t+="\n",a.app&&(t=t+a.app+"\n"+(a.dlg||"")+"\n"),i.createHmac(e.algorithm,e.key).update(t).digest("base64")},a.header=function(e,t,o){var n=o.timestamp||Math.floor((Date.now()+(o.localtimeOffsetMsec||0))/1e3),r=o.credentials;if(!(r&&r.id&&r.key&&r.algorithm))return"";if(-1===["sha1","sha256"].indexOf(r.algorithm))return"";var s,c,p,u,l,m,d={ts:n,nonce:o.nonce||(s=6,c=6*(s+1),i.randomBytes(Math.ceil(c/8)).toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"").slice(0,s)),method:t,resource:e.pathname+(e.search||""),host:e.hostname,port:e.port||("http:"===e.protocol?80:443),hash:o.hash,ext:o.ext,app:o.app,dlg:o.dlg};d.hash||!o.payload&&""!==o.payload||(d.hash=(p=o.payload,u=r.algorithm,l=o.contentType,(m=i.createHash(u)).update("hawk.1.payload\n"),m.update((l?l.split(";")[0].trim().toLowerCase():"")+"\n"),m.update(p||""),m.update("\n"),m.digest("base64")));var h=a.calculateMac(r,d),f=null!==d.ext&&void 0!==d.ext&&""!==d.ext,v='Hawk id="'+r.id+'", ts="'+d.ts+'", nonce="'+d.nonce+(d.hash?'", hash="'+d.hash:"")+(f?'", ext="'+d.ext.replace(/\\/g,"\\\\").replace(/"/g,'\\"'):"")+'", mac="'+h+'"';return d.app&&(v=v+', app="'+d.app+(d.dlg?'", dlg="'+d.dlg:"")+'"'),v}},function(e,a,t){"use strict";var i=t(51),o=t(68),n=t(75),r=t(22).Buffer;function s(e){this.request=e,this.boundary=i(),this.chunked=!1,this.body=null}s.prototype.isChunked=function(e){var a=this,t=!1,i=e.data||e;return i.forEach||a.request.emit("error",new Error("Argument error, options.multipart.")),void 0!==e.chunked&&(t=e.chunked),"chunked"===a.request.getHeader("transfer-encoding")&&(t=!0),t||i.forEach(function(e){void 0===e.body&&a.request.emit("error",new Error("Body attribute missing in multipart.")),n(e.body)&&(t=!0)}),t},s.prototype.setHeaders=function(e){e&&!this.request.hasHeader("transfer-encoding")&&this.request.setHeader("transfer-encoding","chunked");var a=this.request.getHeader("content-type");a&&-1!==a.indexOf("multipart")?-1!==a.indexOf("boundary")?this.boundary=a.replace(/.*boundary=([^\s;]+).*/,"$1"):this.request.setHeader("content-type",a+"; boundary="+this.boundary):this.request.setHeader("content-type","multipart/related; boundary="+this.boundary)},s.prototype.build=function(e,a){var t=this,i=a?new o:[];function n(e){return"number"==typeof e&&(e=e.toString()),a?i.append(e):i.push(r.from(e))}return t.request.preambleCRLF&&n("\r\n"),e.forEach(function(e){var a="--"+t.boundary+"\r\n";Object.keys(e).forEach(function(t){"body"!==t&&(a+=t+": "+e[t]+"\r\n")}),n(a+="\r\n"),n(e.body),n("\r\n")}),n("--"+t.boundary+"--"),t.request.postambleCRLF&&n("\r\n"),i},s.prototype.onRequest=function(e){var a=this.isChunked(e),t=e.data||e;this.setHeaders(a),this.chunked=a,this.body=this.build(t,a)},a.Multipart=s},function(e,a,t){"use strict";var i=t(9),o=/^https?:/;function n(e){this.request=e,this.followRedirect=!0,this.followRedirects=!0,this.followAllRedirects=!1,this.followOriginalHttpMethod=!1,this.allowRedirect=function(){return!0},this.maxRedirects=10,this.redirects=[],this.redirectsFollowed=0,this.removeRefererHeader=!1}n.prototype.onRequest=function(e){void 0!==e.maxRedirects&&(this.maxRedirects=e.maxRedirects),"function"==typeof e.followRedirect&&(this.allowRedirect=e.followRedirect),void 0!==e.followRedirect&&(this.followRedirects=!!e.followRedirect),void 0!==e.followAllRedirects&&(this.followAllRedirects=e.followAllRedirects),(this.followRedirects||this.followAllRedirects)&&(this.redirects=this.redirects||[]),void 0!==e.removeRefererHeader&&(this.removeRefererHeader=e.removeRefererHeader),void 0!==e.followOriginalHttpMethod&&(this.followOriginalHttpMethod=e.followOriginalHttpMethod)},n.prototype.redirectTo=function(e){var a=this.request,t=null;if(e.statusCode>=300&&e.statusCode<400&&e.caseless.has("location")){var i=e.caseless.get("location");if(a.debug("redirect",i),this.followAllRedirects)t=i;else if(this.followRedirects)switch(a.method){case"PATCH":case"PUT":case"POST":case"DELETE":break;default:t=i}}else if(401===e.statusCode){var o=a._auth.onResponse(e);o&&(a.setHeader("authorization",o),t=a.uri)}return t},n.prototype.onResponse=function(e){var a=this.request,t=this.redirectTo(e);if(!t||!this.allowRedirect.call(a,e))return!1;if(a.debug("redirect to",t),e.resume&&e.resume(),this.redirectsFollowed>=this.maxRedirects)return a.emit("error",new Error("Exceeded maxRedirects. Probably stuck in a redirect loop "+a.uri.href)),!1;this.redirectsFollowed+=1,o.test(t)||(t=i.resolve(a.uri.href,t));var n=a.uri;return a.uri=i.parse(t),a.uri.protocol!==n.protocol&&delete a.agent,this.redirects.push({statusCode:e.statusCode,redirectUri:t}),this.followAllRedirects&&"HEAD"!==a.method&&401!==e.statusCode&&307!==e.statusCode&&(a.method=this.followOriginalHttpMethod?a.method:"GET"),delete a.src,delete a.req,delete a._started,401!==e.statusCode&&307!==e.statusCode&&(delete a.body,delete a._form,a.headers&&(a.removeHeader("host"),a.removeHeader("content-type"),a.removeHeader("content-length"),a.uri.hostname!==a.originalHost.split(":")[0]&&a.removeHeader("authorization"))),this.removeRefererHeader||a.setHeader("referer",n.href),a.emit("redirect"),a.init(),!0},a.Redirect=n},function(e,a,t){"use strict";var i=t(9),o=t(225),n=["accept","accept-charset","accept-encoding","accept-language","accept-ranges","cache-control","content-encoding","content-language","content-location","content-md5","content-range","content-type","connection","date","expect","max-forwards","pragma","referer","te","user-agent","via"],r=["proxy-authorization"];function s(e){this.request=e,this.proxyHeaderWhiteList=n,this.proxyHeaderExclusiveList=[],void 0!==e.tunnel&&(this.tunnelOverride=e.tunnel)}s.prototype.isEnabled=function(){var e=this.request;return void 0!==this.tunnelOverride?this.tunnelOverride:"https:"===e.uri.protocol},s.prototype.setup=function(e){var a=this.request;if(e=e||{},"string"==typeof a.proxy&&(a.proxy=i.parse(a.proxy)),!a.proxy||!a.tunnel)return!1;e.proxyHeaderWhiteList&&(this.proxyHeaderWhiteList=e.proxyHeaderWhiteList),e.proxyHeaderExclusiveList&&(this.proxyHeaderExclusiveList=e.proxyHeaderExclusiveList);var t,n,s,c,p=this.proxyHeaderExclusiveList.concat(r),u=this.proxyHeaderWhiteList.concat(p),l=function(e,a){var t=a.reduce(function(e,a){return e[a.toLowerCase()]=!0,e},{});return Object.keys(e).filter(function(e){return t[e.toLowerCase()]}).reduce(function(a,t){return a[t]=e[t],a},{})}(a.headers,u);l.host=(t=a.uri,n=t.port,s=t.protocol,c=t.hostname+":",c+=n||("https:"===s?"443":"80")),p.forEach(a.removeHeader,a);var m=function(e){var a=function(e,a){return["https:"===e.protocol?"https":"http","https:"===a.protocol?"Https":"Http"].join("Over")}(e.uri,e.proxy);return o[a]}(a),d=function(e,a){var t=e.proxy;return{proxy:{host:t.hostname,port:+t.port,proxyAuth:t.auth,headers:a},headers:e.headers,ca:e.ca,cert:e.cert,key:e.key,passphrase:e.passphrase,pfx:e.pfx,ciphers:e.ciphers,rejectUnauthorized:e.rejectUnauthorized,secureOptions:e.secureOptions,secureProtocol:e.secureProtocol}}(a,l);return a.agent=m(d),!0},s.defaultProxyHeaderWhiteList=n,s.defaultProxyHeaderExclusiveList=r,a.Tunnel=s},function(e,a,t){"use strict";t(39);var i,o=t(67),n=t(17),r=t(18),s=t(226),c=t(20),p=t(1),u=t(22).Buffer;function l(e){var a=this;a.options=e||{},a.proxyOptions=a.options.proxy||{},a.maxSockets=a.options.maxSockets||n.Agent.defaultMaxSockets,a.requests=[],a.sockets=[],a.on("free",function(e,t,i){for(var o=0,n=a.requests.length;o<n;++o){var r=a.requests[o];if(r.host===t&&r.port===i)return a.requests.splice(o,1),void r.request.onSocket(e)}e.destroy(),a.removeSocket(e)})}function m(e,a){var t=this;l.prototype.createSocket.call(t,e,function(i){var n=o.connect(0,d({},t.options,{servername:e.host,socket:i}));t.sockets[t.sockets.indexOf(i)]=n,a(n)})}function d(e){for(var a=1,t=arguments.length;a<t;++a){var i=arguments[a];if("object"==typeof i)for(var o=Object.keys(i),n=0,r=o.length;n<r;++n){var s=o[n];void 0!==i[s]&&(e[s]=i[s])}}return e}a.httpOverHttp=function(e){var a=new l(e);return a.request=n.request,a},a.httpsOverHttp=function(e){var a=new l(e);return a.request=n.request,a.createSocket=m,a.defaultPort=443,a},a.httpOverHttps=function(e){var a=new l(e);return a.request=r.request,a},a.httpsOverHttps=function(e){var a=new l(e);return a.request=r.request,a.createSocket=m,a.defaultPort=443,a},p.inherits(l,s.EventEmitter),l.prototype.addRequest=function(e,a){"string"==typeof a&&(a={host:a,port:arguments[2],path:arguments[3]}),this.sockets.length>=this.maxSockets?this.requests.push({host:a.host,port:a.port,request:e}):this.createConnection({host:a.host,port:a.port,request:e})},l.prototype.createConnection=function(e){var a=this;a.createSocket(e,function(t){function i(){a.emit("free",t,e.host,e.port)}function o(e){a.removeSocket(t),t.removeListener("free",i),t.removeListener("close",o),t.removeListener("agentRemove",o)}t.on("free",i),t.on("close",o),t.on("agentRemove",o),e.request.onSocket(t)})},l.prototype.createSocket=function(e,a){var t=this,o={};t.sockets.push(o);var n=d({},t.proxyOptions,{method:"CONNECT",path:e.host+":"+e.port,agent:!1});n.proxyAuth&&(n.headers=n.headers||{},n.headers["Proxy-Authorization"]="Basic "+u.from(n.proxyAuth).toString("base64")),i("making CONNECT request");var r=t.request(n);function s(n,s,p){if(r.removeAllListeners(),s.removeAllListeners(),200===n.statusCode)c.equal(p.length,0),i("tunneling connection has established"),t.sockets[t.sockets.indexOf(o)]=s,a(s);else{i("tunneling socket could not be established, statusCode=%d",n.statusCode);var u=new Error("tunneling socket could not be established, statusCode="+n.statusCode);u.code="ECONNRESET",e.request.emit("error",u),t.removeSocket(o)}}r.useChunkedEncodingByDefault=!1,r.once("response",function(e){e.upgrade=!0}),r.once("upgrade",function(e,a,t){process.nextTick(function(){s(e,a,t)})}),r.once("connect",s),r.once("error",function(a){r.removeAllListeners(),i("tunneling socket could not be established, cause=%s\n",a.message,a.stack);var n=new Error("tunneling socket could not be established, cause="+a.message);n.code="ECONNRESET",e.request.emit("error",n),t.removeSocket(o)}),r.end()},l.prototype.removeSocket=function(e){var a=this.sockets.indexOf(e);if(-1!==a){this.sockets.splice(a,1);var t=this.requests.shift();t&&this.createConnection(t)}},i=process.env.NODE_DEBUG&&/\btunnel\b/.test(process.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments);"string"==typeof e[0]?e[0]="TUNNEL: "+e[0]:e.unshift("TUNNEL:"),console.error.apply(console,e)}:function(){},a.debug=i},function(e,a){e.exports=require("events")},function(e,a){(function(){var a,t,i,o,n,r;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(e.exports=function(){return(a()-n)/1e6},t=process.hrtime,o=(a=function(){var e;return 1e9*(e=t())[0]+e[1]})(),r=1e9*process.uptime(),n=o-r):Date.now?(e.exports=function(){return Date.now()-i},i=Date.now()):(e.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getProperties=function(e,a){var t={};e&&(e.key&&(t.key=e.key),e.keyFilter&&(t.keyFilter=e.keyFilter),e.permissionLevel&&(t.keyFilter=e.permissionLevel));var i={uri:this.jiraClient.buildURL("/application-properties"),method:"GET",followAllRedirects:!0,qs:t};return this.jiraClient.makeRequest(i,a)},this.setProperty=function(e,a){var t={uri:this.jiraClient.buildURL("/application-properties"),method:"GET",followAllRedirects:!0,body:e.property};return this.jiraClient.makeRequest(t,a,"Property Updated")}}},function(e,a,t){"use strict";var i=t(11);e.exports=function(e){this.jiraClient=e,this.getAttachment=function(e,a){if(!e.attachmentId)throw new Error(i.NO_ATTACHMENT_ID_ERROR);var t={uri:this.jiraClient.buildURL("/attachment/"+e.attachmentId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.deleteAttachment=function(e,a){if(!e.attachmentId)throw new Error(i.NO_ATTACHMENT_ID_ERROR);var t={uri:this.jiraClient.buildURL("/attachment/"+e.attachmentId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a,"Attachment Deleted")},this.getGlobalAttachmentMetadata=function(e,a){var t={uri:this.jiraClient.buildURL("/attachment/meta"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";var i=t(11);e.exports=function(e){this.jiraClient=e,this.getAudits=function(e,a){var t={uri:this.jiraClient.buildURL("/auditing/record"),json:!0,followAllRedirects:!0,method:"GET",qs:{offset:e.offset,limit:e.limit,filter:e.filter,from:e.from,to:e.to}};return this.jiraClient.makeRequest(t,a)},this.createAudit=function(e,a){if(!e.audit)throw new Error(i.NO_AUDIT_ERROR);var t={uri:this.jiraClient.buildURL("/auditing/record"),json:!0,followAllRedirects:!0,method:"POST",body:e.audit};return this.jiraClient.makeRequest(t,a,"Audit Record Added")}}},function(e,a,t){"use strict";t(12),t(8);e.exports=function(e){this.jiraClient=e,this.logout=function(e){var a={uri:this.jiraClient.buildAuthURL("/session"),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,e,"User logged out.")},this.login=function(e,a){var t={uri:this.jiraClient.buildAuthURL("/session"),method:"POST",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(t,a,"User logged in.")},this.currentUser=function(e){var a={uri:this.jiraClient.buildAuthURL("/session"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,e)}}},function(e,a,t){"use strict";var i=t(12),o=t(8),n=t(11);e.exports=function(e){this.jiraClient=e,this.getAvatars=function(e,a){if(!e.avatarType)throw new Error(n.NO_AVATAR_TYPE_ERROR);var t={method:"GET",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/system")};return this.jiraClient.makeRequest(t,a)},this.createTemporaryAvatar=function(e,a){if(!e.avatarType)throw new Error(n.NO_AVATAR_TYPE_ERROR);var t=i.statSync(e.avatarFilePath).size,r=o.basename(e.avatarFilePath),s={method:"POST",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/temporary"),headers:{"X-Atlassian-Token":"no-check"},qs:{filename:r,size:t},formData:{file:i.createReadStream(e.avatarFilePath)}};return delete s.body,this.jiraClient.makeRequest(s,a)},this.cropTemporaryAvatar=function(e,a){if(!e.avatarType)throw new Error(n.NO_AVATAR_TYPE_ERROR);var t={method:"POST",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/temporaryCrop"),headers:{"X-Atlassian-Token":"no-check"},body:e.crop};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.moveIssuesToBacklog=function(e,a){e=e||{};var t={uri:this.jiraClient.buildAgileURL("/backlog/issue"),method:"POST",json:!0,followAllRedirects:!0,body:{issues:e.issues}};return this.jiraClient.makeRequest(t,a)},this.moveIssuesToBacklogForBoard=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/backlog/"+e.boardId+"/issue"),method:"POST",json:!0,followAllRedirects:!0,body:{issues:e.issues,rankBeforeIssue:e.rankBeforeIssue,rankAfterIssue:e.rankAfterIssue,rankCustomFieldId:e.rankCustomFieldId}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllBoards=function(e,a){e=e||{};var t={uri:this.jiraClient.buildAgileURL("/board"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,type:e.type,name:e.name,projectKeyOrId:e.projectKeyOrId,accountIdLocation:e.accountIdLocation,userkeyLocation:e.userkeyLocation,usernameLocation:e.usernameLocation,projectLocation:e.projectLocation,includePrivate:e.includePrivate,negateLocationFiltering:e.negateLocationFiltering,orderBy:e.orderBy,expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.createBoard=function(e,a,t,i,o){var n={uri:this.jiraClient.buildAgileURL("/board"),method:"POST",followAllRedirects:!0,json:!0,body:{name:e,type:a,filterId:t,location:i}};return this.jiraClient.makeRequest(n,o)},this.getBoardByFilterId=function(e,a){var t={uri:this.jiraClient.buildAgileURL("board/filter/"+e.filterId),method:"GET",followAllRedirects:!0,json:!0,qs:{startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)},this.getBoard=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.deleteBoard=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getIssuesForBacklog=function(e,a){let t;e.fields&&(t="string"==typeof e.fields?e.fields:e.fields.join(","));var i={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/backlog"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:t,expand:e.expand}};return this.jiraClient.makeRequest(i,a)},this.getConfiguration=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/configuration"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getEpics=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/epic"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,done:e.done}};return this.jiraClient.makeRequest(t,a)},this.getIssuesWithoutEpic=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/epic/none/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields?e.fields.join(","):void 0,expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.getIssuesForEpic=function(e,a){var t={uri:"board"+e.boardId+"/epic/"+e.epicId+"/issue",method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields?e.fields.join(","):void 0,expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.getFeaturesForBoard=function(e,a){var t={uri:"board"+e.boardId+"/features",method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.toggleFeatures=function(e,a){var t={uri:"board"+e.boardId+"/features",method:"PUT",json:!0,followAllRedirects:!0,body:{boardId:e.boardIdBody,feature:e.feature,enabling:e.enabling}};return this.jiraClient.makeRequest(t,a)},this.getIssuesForBoard=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields?e.fields.join(","):void 0,expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.moveIssuesToBoard=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/issue"),method:"POST",json:!0,followAllRedirects:!0,qs:{issues:e.issues?e.issues.join(","):void 0,rankBeforeIssue:e.rankBeforeIssue,rankAfterIssue:e.rankAfterIssue,rankCustomFieldId:e.rankCustomFieldId}};return this.jiraClient.makeRequest(t,a)},this.getProjects=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/project"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)},this.getProjectsFull=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/project/full"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getBoardPropertyKeys=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/properties"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getBoardProperty=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/properties/"+e.propertyKey),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.setBoardProperty=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/properties/"+e.propertyKey),method:"PUT",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.deleteBoardProperty=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/properties/"+e.propertyKey),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getAllQuickFilters=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/quickfilter"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)},this.getQuickFilter=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/quickfilter/"+e.quickFilterId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getSprintsForBoard=function(e,a){return this.getAllSprints(e,a)},this.getProjectsForBoard=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/project"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)},this.getReportsForBoard=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/reports"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getAllSprints=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/sprint"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,state:e.state}};return this.jiraClient.makeRequest(t,a)},this.getIssuesForSprint=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/sprint/"+e.sprintId+"/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields?e.fields.join(","):void 0,expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.getAllVersions=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/version"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,released:e.released}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";var i=t(11);e.exports=function(e){this.jiraClient=e,this.getCommentPropertyKeys=function(e,a){var t=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(t,a)},this.setCommentProperty=function(e,a){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(i.NO_COMMENT_PROPERTY_VALUE_ERROR);var t=this.buildRequestOptions(e,"/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(t,a,"Property Edited")},this.getCommentProperty=function(e,a){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);var t=this.buildRequestOptions(e,"/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(t,a)},this.deleteCommentProperty=function(e,a){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);var t=this.buildRequestOptions(e,"/"+e.propertyKey,"DELETE");return this.jiraClient.makeRequest(t,a,"Comment property deleted")},this.buildRequestOptions=function(e,a,t,o,n){if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var r="/comment/"+e.commentId+"/properties";return n||(n={}),o||(o={}),e.fields&&(n.fields="",e.fields.forEach(function(e){n.fields+=e+","})),e.expand&&(n.expand="",e.expand.forEach(function(e){n.expand+=e+","})),{uri:this.jiraClient.buildURL(r+a),method:t,body:o,qs:n,followAllRedirects:!0,json:!0}}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.createComponent=function(e,a){var t={uri:this.jiraClient.buildURL("/component"),method:"POST",json:!0,followAllRedirects:!0,body:e.component};return this.jiraClient.makeRequest(t,a)},this.editComponent=function(e,a){var t={uri:this.jiraClient.buildURL("/component/"+e.id),method:"PUT",json:!0,followAllRedirects:!0,body:e.component};return this.jiraClient.makeRequest(t,a)},this.getComponent=function(e,a){var t={uri:this.jiraClient.buildURL("/component/"+e.id),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.deleteComponent=function(e,a){var t={uri:this.jiraClient.buildURL("/component/"+e.id),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a,"Project Component Deleted")},this.getRelatedIssueCounts=function(e,a){var t={uri:this.jiraClient.buildURL("/component/"+e.id+"/relatedIssueCounts"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";var i=t(11);e.exports=function(e){this.jiraClient=e,this.getCustomFieldOption=function(e,a){if(!e.fieldOptionId)throw new Error(i.NO_FIELD_OPTION_ID_ERROR);var t={uri:this.jiraClient.buildURL("/customFieldOption/"+e.fieldOptionId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllDashboards=function(e,a){e=e||{};var t={uri:this.jiraClient.buildURL("/dashboard"),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)},this.getDashboard=function(e,a){var t={uri:this.jiraClient.buildURL("/dashboard/"+e.dashboardId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getIssuesWithoutEpic=function(e,a){var t=this.jiraClient.buildAgileURL("/epic/none/issue"),i={uri:t,method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:(e=e||{}).startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields?e.fields.join(","):void 0,expand:e.expand}};return this.jiraClient.makeRequest(i,a)},this.removeIssuesFromEpic=function(e,a){var t=this.jiraClient.buildAgileURL("/epic/none/issue"),i={uri:t,method:"POST",json:!0,followAllRedirects:!0,body:{issues:(e=e||{}).issues}};return this.jiraClient.makeRequest(i,a)},this.getEpic=function(e,a){var t=this.jiraClient.buildAgileURL("/epic/"+e.epicId),i={uri:t,method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(i,a)},this.partiallyUpdateEpic=function(e,a){var t=this.jiraClient.buildAgileURL("/epic/"+e.epicId),i={uri:t,method:"POST",json:!0,followAllRedirects:!0,body:{name:e.name,summary:e.summary,color:e.color,done:e.done}};return this.jiraClient.makeRequest(i,a)},this.getIssuesForEpic=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/epic/"+e.epicId+"/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields?e.fields.join(","):void 0,expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.moveIssuesToEpic=function(e,a){var t=this.jiraClient.buildAgileURL("/epic/"+e.epicId+"/issue"),i={uri:t,method:"POST",json:!0,followAllRedirects:!0,body:{issues:e.issues}};return this.jiraClient.makeRequest(i,a)},this.rankEpics=function(e,a){var t=this.jiraClient.buildAgileURL("/epic/"+e.epicId+"/rank"),i={uri:t,method:"PUT",json:!0,followAllRedirects:!0,body:{rankBeforeEpic:e.rankBeforeEpic,rankAfterEpic:e.rankAfterEpic,rankCustomFieldId:e.rankCustomFieldId}};return this.jiraClient.makeRequest(i,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllFields=function(e,a){var t={uri:this.jiraClient.buildURL("/field"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.createCustomField=function(e,a){var t={uri:this.jiraClient.buildURL("/field"),method:"POST",json:!0,followAllRedirects:!0,body:e.field};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.createFilter=function(e,a){var t={uri:this.jiraClient.buildURL("/filter"),method:"POST",json:!0,followAllRedirects:!0,qs:{},body:e.filter};return e.expand&&(t.qs.expand="",e.expand.forEach(function(e){t.qs.expand+=e+","})),this.jiraClient.makeRequest(t,a)},this.getFilter=function(e,a){var t=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(t,a)},this.getFilters=function(e,a){var t={uri:this.jiraClient.buildURL("/filter"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.updateFilter=function(e,a){var t=this.buildRequestOptions(e,"","PUT",e.filter);return this.jiraClient.makeRequest(t,a)},this.deleteFilter=function(e,a){var t=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(t,a,"Filter Deleted")},this.getFilterColumns=function(e,a){var t=this.buildRequestOptions(e,"/columns","GET");return this.jiraClient.makeRequest(t,a)},this.setFilterColumns=function(e,a){var t={columns:e.columns},i=this.buildRequestOptions(e,"/columns","PUT",t);return this.jiraClient.makeRequest(i,a,"Columns Updated")},this.resetFilterColumns=function(e,a){var t=this.buildRequestOptions(e,"/columns","DELETE");return this.jiraClient.makeRequest(t,a,"Columns Reset")},this.addSharePermission=function(e,a){var t=this.buildRequestOptions(e,"/permission","POST",e.permission);return this.jiraClient.makeRequest(t,a,"Share Permission Added")},this.getDefaultShareScore=function(e,a){var t={uri:this.jiraClient.buildURL("/filter/defaultShareScope"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.setDefaultShareScope=function(e,a){var t={uri:this.jiraClient.buildURL("/filter/defaultShareScope"),method:"PUT",json:!0,followAllRedirects:!0,body:{scope:e.scope}};return this.jiraClient.makeRequest(t,a)},this.getFavoriteFilters=function(e,a){var t={uri:this.jiraClient.buildURL("/filter/favourite"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.buildRequestOptions=function(e,a,t,i,o){var n="/filter/"+e.filterId;return o||(o={}),i||(i={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","}),o.fields=o.fields.slice(0,-1)),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","}),o.expand=o.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(n+a),method:t,body:i,qs:o,followAllRedirects:!0,json:!0}}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.createGroup=function(e,a){var t={uri:this.jiraClient.buildURL("/group"),method:"POST",json:!0,followAllRedirects:!0,body:e.group};return this.jiraClient.makeRequest(t,a)},this.getGroup=function(e,a){var t={groupname:e.groupName};e.expand&&(t.expand="",e.expand.forEach(function(e){t.expand+=e+","}));var i={uri:this.jiraClient.buildURL("/group"),method:"GET",json:!0,followAllRedirects:!0,qs:t};return this.jiraClient.makeRequest(i,a)},this.getMembers=function(e,a){var t={groupname:e.groupName,includeInactiveUsers:e.includeInactiveUsers,startAt:e.startAt,maxResults:e.maxResults},i={uri:this.jiraClient.buildURL("/group/member"),method:"GET",json:!0,followAllRedirects:!0,qs:t};return this.jiraClient.makeRequest(i,a)},this.addUserToGroup=function(e,a){var t={uri:this.jiraClient.buildURL("/group/user"),method:"POST",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName},body:{name:e.userName}};return this.jiraClient.makeRequest(t,a)},this.removeUserFromGroup=function(e,a){var t={uri:this.jiraClient.buildURL("/group/user"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName,username:e.userName}};return this.jiraClient.makeRequest(t,a,"User Removed from Group")},this.deleteGroup=function(e,a){var t={uri:this.jiraClient.buildURL("/group"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName,swapGroup:e.swapGroup}};return this.jiraClient.makeRequest(t,a,"Group Deleted")}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.findUsersAndGroups=function(e,a){var t={uri:this.jiraClient.buildURL("/groupuserpicker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,maxResults:e.maxResults,showAvatar:e.showAvatar,fieldId:e.fieldId,projectId:e.projectId,issueTypeId:e.issueTypeId}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.findGroups=function(e,a){var t={uri:this.jiraClient.buildURL("/groups/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,exclude:e.exclude,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";var i=t(12),o=t(246),n=t(11);e.exports=function(e){this.jiraClient=e,this.getIssueEstimation=function(e,a){var t="/issue/"+(e.issueId||e.issueKey)+"/estimation",i={uri:this.jiraClient.buildAgileURL(t),method:"GET",json:!0,followAllRedirects:!0,qs:{boardId:e.boardId,filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,a)},this.setIssueEstimation=function(e,a){var t="/issue/"+(e.issueId||e.issueKey)+"/estimation",i={uri:this.jiraClient.buildAgileURL(t),method:"PUT",json:!0,followAllRedirects:!0,body:{value:e.value,filter:e.filter,startAt:e.startAt,maxResults:e.maxResults},qs:{boardId:e.boardId}};return this.jiraClient.makeRequest(i,a)},this.setIssueRanks=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/issue/rank"),method:"PUT",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(t,a)},this.createIssue=function(e,a){var t={uri:this.jiraClient.buildURL("/issue"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(t,a)},this.getCreateMetadata=function(e,a){var t={uri:this.jiraClient.buildURL("/issue/createmeta"),method:"GET",followAllRedirects:!0,json:!0,qs:{projectIds:e.projectIds,projectKeys:e.projectKeys,issuetypeIds:e.issuetypeIds,issuetypeNames:e.issuetypeNames,expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.bulkCreate=function(e,a){var t={uri:this.jiraClient.buildURL("/issue/bulk"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(t,a)},this.getIssue=function(e,a){if(e.agile)var t="/issue/"+(e.issueId||e.issueKey),i={uri:this.jiraClient.buildAgileURL(t),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults,expand:e.expand}};else var i=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(i,a)},this.deleteIssue=function(e,a){var t=this.buildRequestOptions(e,"","DELETE",null,{deleteSubtasks:e.deleteSubtasks});return this.jiraClient.makeRequest(t,a,"Issue Deleted")},this.editIssue=function(e,a){if(!e.issue)throw new Error(n.NO_ISSUE_ERROR);var t=this.buildRequestOptions(e,"","PUT",e.issue,e.qs);return this.jiraClient.makeRequest(t,a,"Issue Updated")},this.assignIssue=function(e,a){var t=e.accountId||e.assignee;if(!("string"==typeof t&&t.length||null===t))throw new Error(n.NO_ASSIGNEE_ERROR);var i=e.accountId?{accountId:e.accountId}:{name:e.assignee},o=this.buildRequestOptions(e,"/assignee","PUT",i);return this.jiraClient.makeRequest(o,a,"Issue Assigned")},this.getComments=function(e,a){var t=this.buildRequestOptions(e,"/comment","GET");return this.jiraClient.makeRequest(t,a)},this.addComment=function(e,a){var t;return t=e.comment.body?this.buildRequestOptions(e,"/comment","POST",e.comment):this.buildRequestOptions(e,"/comment","POST",{body:e.comment}),this.jiraClient.makeRequest(t,a)},this.getComment=function(e,a){if(!e.commentId)throw new Error(n.NO_COMMENT_ID);var t=this.buildRequestOptions(e,"/comment/"+e.commentId,"GET");return this.jiraClient.makeRequest(t,a)},this.editComment=function(e,a){if(!e.comment)throw new Error(n.NO_COMMENT_ERROR);if(!e.commentId)throw new Error(n.NO_COMMENT_ID);var t=this.buildRequestOptions(e,"/comment/"+e.commentId,"PUT",e.comment);return this.jiraClient.makeRequest(t,a)},this.deleteComment=function(e,a){if(!e.commentId)throw new Error(n.NO_COMMENT_ID);var t=this.buildRequestOptions(e,"/comment/"+e.commentId,"DELETE");return this.jiraClient.makeRequest(t,a,"Comment Deleted")},this.getEditMetadata=function(e,a){var t=this.buildRequestOptions(e,"/editmeta","GET");return this.jiraClient.makeRequest(t,a)},this.sendEmailNotification=function(e,a){if(!e.notification)throw new Error(n.NO_NOTIFICATION_ERROR);var t=this.buildRequestOptions(e,"/notify","POST",e.notification);return this.jiraClient.makeRequest(t,a,"Notifications Sent")},this.getRemoteLinks=function(e,a){var t=this.buildRequestOptions(e,"/remotelink","GET",null,{globalId:e.globalId});return this.jiraClient.makeRequest(t,a)},this.createRemoteLink=function(e,a){var t=this.buildRequestOptions(e,"/remotelink","POST",e.remoteLink);return this.jiraClient.makeRequest(t,a)},this.updateRemoteLink=function(e,a){this.createRemoteLink(e,a)},this.deleteRemoteLink=function(e,a){if(!e.globalId)throw new Error(n.NO_GLOBAL_ID_ERROR);var t=this.buildRequestOptions(e,"/remotelink","DELETE",null,{globalId:e.globalId});return this.jiraClient.makeRequest(t,a,"RemoteLink Deleted")},this.getRemoteLinkById=function(e,a){if(!e.linkId)throw new Error(n.NO_LINK_ID_ERROR);var t=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"GET");return this.jiraClient.makeRequest(t,a)},this.updateRemoteLinkById=function(e,a){if(!e.linkId)throw new Error(n.NO_LINK_ID_ERROR);var t=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"PUT",e.remoteLink);return this.jiraClient.makeRequest(t,a,"RemoteLink Updated")},this.deleteRemoteLinkById=function(e,a){if(!e.linkId)throw new Error(n.NO_LINK_ID_ERROR);var t=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"DELETE");return this.jiraClient.makeRequest(t,a,"RemoteLink Deleted")},this.getTransitions=function(e,a){var t=this.buildRequestOptions(e,"/transitions","GET",null,{transitionId:e.transitionId});return this.jiraClient.makeRequest(t,a)},this.transitionIssue=function(e,a){var t;return t=e.transition.transition?this.buildRequestOptions(e,"/transitions","POST",e.transition):this.buildRequestOptions(e,"/transitions","POST",e),this.jiraClient.makeRequest(t,a,"Issue Transitioned")},this.unvote=function(e,a){var t=this.buildRequestOptions(e,"/votes","DELETE");return this.jiraClient.makeRequest(t,a,"Vote Removed")},this.vote=function(e,a){var t=this.buildRequestOptions(e,"/votes","POST");return this.jiraClient.makeRequest(t,a,"Vote Added")},this.getVotes=function(e,a){var t=this.buildRequestOptions(e,"/votes","GET");return this.jiraClient.makeRequest(t,a)},this.getWatchers=function(e,a){var t=this.buildRequestOptions(e,"/watchers","GET");return this.jiraClient.makeRequest(t,a)},this.addWatcher=function(e,a){if(!e.watcher)throw new Error(n.NO_WATCHER_ERROR);var t=this.buildRequestOptions(e,"/watchers","POST",e.watcher);return this.jiraClient.makeRequest(t,a,"Watcher Added")},this.removeWatcher=function(e,a){if(!e.watcher)throw new Error(n.NO_WATCHER_ERROR);var t=this.buildRequestOptions(e,"/watchers","DELETE",null,{username:e.watcher});return this.jiraClient.makeRequest(t,a,"Watcher Removed")},this.getWorkLogs=function(e,a){var t=this.buildRequestOptions(e,"/worklog","GET");return this.jiraClient.makeRequest(t,a)},this.addWorkLog=function(e,a){var t={uri:this.jiraClient.buildURL("/issue/"+(e.issueId||e.issueKey)+"/worklog"),method:"POST",json:!0,followAllRedirects:!0,qs:{notifyUsers:e.notifyUsers,adjustEstimate:e.adjustEstimate,newEstimate:e.newEstimate,reduceBy:e.reduceBy,expand:e.expand,overrideEditableFlag:e.overrideEditableFlag},body:e.worklog||Object.assign(e,{issueId:void 0,issueKey:void 0,notifyUsers:void 0,adjustEstimate:void 0,newEstimate:void 0,reduceBy:void 0,expand:void 0,overrideEditableFlag:void 0})};return this.jiraClient.makeRequest(t,a,"Worklog Added")},this.getWorkLog=function(e,a){var t={uri:this.jiraClient.buildURL("/issue/"+(e.issueId||e.issueKey)+"/worklog/"+(e.id||e.worklogId)),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.updateWorkLog=function(e,a){var t={uri:this.jiraClient.buildURL("/issue/"+(e.issueId||e.issueKey)+"/worklog/"+(e.id||e.worklogId)),method:"PUT",json:!0,followAllRedirects:!0,qs:{notifyUsers:e.notifyUsers,adjustEstimate:e.adjustEstimate,newEstimate:e.newEstimate,expand:e.expand,overrideEditableFlag:e.overrideEditableFlag},body:Object.assign(e,{issueId:void 0,issueKey:void 0,notifyUsers:void 0,adjustEstimate:void 0,newEstimate:void 0,expand:void 0,overrideEditableFlag:void 0})};return this.jiraClient.makeRequest(t,a)},this.deleteWorkLog=function(e,a){var t={uri:this.jiraClient.buildURL("/issue/"+(e.issueId||e.issueKey)+"/worklog/"+(e.id||e.worklogId)),method:"DELETE",json:!0,followAllRedirects:!0,qs:{notifyUsers:e.notifyUsers,adjustEstimate:e.adjustEstimate,newEstimate:e.newEstimate,increaseBy:e.increaseBy,overrideEditableFlag:e.overrideEditableFlag}};return this.jiraClient.makeRequest(t,a,"Work Log Deleted")},this.addAttachment=function(e,a){var t=Array.isArray(e.filename)?e.filename:[e.filename],n=t.map(function(e){var a=e.split("/").reverse()[0],t=o.lookup(a);return{value:i.createReadStream(e),options:{filename:a,contentType:t}}}),r={uri:this.jiraClient.buildURL("/issue/"+(e.issueId||e.issueKey)+"/attachments"),method:"POST",json:!0,followAllRedirects:!0,headers:Object.assign({charset:"utf-8","X-Atlassian-Token":"nocheck"},e.headers||{}),formData:{file:n}};return this.jiraClient.makeRequest(r,a)},this.getProperties=function(e,a){var t=this.buildRequestOptions(e,"/properties","GET");return this.jiraClient.makeRequest(t,a)},this.setProperty=function(e,a){if(!e.propertyKey)throw new Error(n.NO_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(n.NO_PROPERTY_VALUE_ERROR);var t=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(t,a,"Property Set")},this.getProperty=function(e,a){if(!e.propertyKey)throw new Error(n.NO_PROPERTY_KEY_ERROR);var t=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(t,a)},this.deleteProperty=function(e,a){if(!e.propertyKey)throw new Error(n.NO_PROPERTY_KEY_ERROR);var t=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"DELETE");return this.jiraClient.makeRequest(t,a,"Property Deleted")},this.setWorklogProperty=function(e,a){if(!e.propertyKey)throw new Error(n.NO_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(n.NO_PROPERTY_VALUE_ERROR);var t=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(t,a,"Property Set")},this.getWorkLogProperties=function(e,a){var t=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/","GET");return this.jiraClient.makeRequest(t,a)},this.getWorkLogProperty=function(e,a){if(!e.propertyKey)throw new Error(n.NO_PROPERTY_KEY_ERROR);var t=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(t,a)},this.buildRequestOptions=function(e,a,t,i,o){if(!e.issueId&&!e.issueKey)throw new Error(n.NO_ISSUE_IDENTIFIER);var r=e.issueId||e.issueKey,s="/issue/"+r;return o||(o={}),i||(i={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","})),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","})),e.properties&&(o.properties="",e.properties.forEach(function(e){o.properties+=e+","})),{uri:this.jiraClient.buildURL(s+a),method:t,body:i,qs:o,followAllRedirects:!0,json:!0}},this.getIssuePicker=function(e,a){var t={uri:this.jiraClient.buildURL("/issue/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,currentJQL:e.currentJQL,currentIssueKey:e.currentIssueKey,currentProjectId:e.currentProjectId,showSubTasks:e.showSubTasks,showSubTaskParent:e.showSubTaskParent}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i,o,n,r=t(247),s=t(8).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function u(e){if(!e||"string"!=typeof e)return!1;var a=c.exec(e),t=a&&r[a[1].toLowerCase()];return t&&t.charset?t.charset:!(!a||!p.test(a[1]))&&"UTF-8"}a.charset=u,a.charsets={lookup:u},a.contentType=function(e){if(!e||"string"!=typeof e)return!1;var t=-1===e.indexOf("/")?a.lookup(e):e;if(!t)return!1;if(-1===t.indexOf("charset")){var i=a.charset(t);i&&(t+="; charset="+i.toLowerCase())}return t},a.extension=function(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),i=t&&a.extensions[t[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},a.extensions=Object.create(null),a.lookup=function(e){if(!e||"string"!=typeof e)return!1;var t=s("x."+e).toLowerCase().substr(1);if(!t)return!1;return a.types[t]||!1},a.types=Object.create(null),i=a.extensions,o=a.types,n=["nginx","apache",void 0,"iana"],Object.keys(r).forEach(function(e){var a=r[e],t=a.extensions;if(t&&t.length){i[e]=t;for(var s=0;s<t.length;s++){var c=t[s];if(o[c]){var p=n.indexOf(r[o[c]].source),u=n.indexOf(a.source);if("application/octet-stream"!==o[c]&&(p>u||p===u&&"application/"===o[c].substr(0,12)))continue}o[c]=e}}})},function(e,a,t){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=t(248)},function(e){e.exports={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0},"application/atsc-held+xml":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/cbor":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["ecma","es"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0},"application/fhir+json":{source:"iana",compressible:!0},"application/fhir+xml":{source:"iana",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0},"application/mmt-usd+xml":{source:"iana",compressible:!0},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",compressible:!0},"application/msc-mixer+xml":{source:"iana",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana"},"application/news-groupinfo":{source:"iana"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana"},"application/nss":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p2p-overlay+xml":{source:"iana",compressible:!0},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana"},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",compressible:!0},"application/pidf-diff+xml":{source:"iana",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0},"application/route-s-tsid+xml":{source:"iana",compressible:!0},"application/route-usd+xml":{source:"iana",compressible:!0},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana"},"application/ttml+xml":{source:"iana",compressible:!0},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0},"application/urc-targetdesc+xml":{source:"iana",compressible:!0},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["keynote"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana"},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana"},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",compressible:!0},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"apache",extensions:["der","crt","pem"]},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0},"application/xcap-caps+xml":{source:"iana",compressible:!0},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana"},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana"},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tone":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana"},"image/avcs":{source:"iana"},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana",compressible:!1},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fwdred":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shex":{extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana"},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vp8":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}},function(e,a,t){"use strict";var i=t(11);e.exports=function(e){this.jiraClient=e,this.createIssueLink=function(e,a){if(!e.issueLink)throw new Error(i.NO_ISSUE_LINK_ERROR);var t={method:"POST",uri:this.jiraClient.buildURL("/issueLink"),json:!0,followAllRedirects:!0,body:e.issueLink};return this.jiraClient.makeRequest(t,a,"Issue Link Created")},this.getIssueLink=function(e,a){if(!e.linkId)throw new Error(i.NO_ISSUE_LINK_ID_ERROR);var t={method:"GET",uri:this.jiraClient.buildURL("/issueLink/"+e.linkId),json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.deleteIssueLink=function(e,a){if(!e.linkId)throw new Error(i.NO_ISSUE_LINK_ID_ERROR);var t={method:"DELETE",uri:this.jiraClient.buildURL("/issueLink/"+e.linkId),json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a,"Issue Link Deleted")}}},function(e,a,t){"use strict";var i=t(11);e.exports=function(e){this.jiraClient=e,this.getAvailableTypes=function(e,a){var t={uri:this.jiraClient.buildURL("/issueLinkType"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.createIssueLinkType=function(e,a){var t={uri:this.jiraClient.buildURL("/issueLinkType"),method:"POST",json:!0,followAllRedirects:!0,body:e.linkType};return this.jiraClient.makeRequest(t,a)},this.getIssueLinkType=function(e,a){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var t={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.deleteIssueLinkType=function(e,a){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var t={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a,"IssueLink type deleted.")},this.editIssueLinkType=function(e,a){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var t={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.issueLinkType};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllIssueTypes=function(e,a){var t={uri:this.jiraClient.buildURL("/issuetype"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.createIssueType=function(e,a){var t={uri:this.jiraClient.buildURL("/issuetype"),method:"POST",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(t,a)},this.getIssueType=function(e,a){var t={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.deleteIssueType=function(e,a){var t={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{alternativeIssueTypeId:e.alternativeIssueTypeId}};return this.jiraClient.makeRequest(t,a)},this.updateIssueType=function(e,a){var t={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.issueType};return this.jiraClient.makeRequest(t,a)},this.getAlternativeIssueTypes=function(e,a){var t={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId+"/alternatives"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAutoCompleteData=function(e,a){var t={uri:this.jiraClient.buildURL("/jql/autocompletedata"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getLabels=function(e,a){var t={uri:this.jiraClient.buildURL("/labels/suggest?query="+e.query,"1.0"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllLicenseRoles=function(e,a){var t={uri:this.jiraClient.buildURL("/licenserole"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getLicenseRole=function(e,a){var t={uri:this.jiraClient.buildURL("/licenserole/"+e.roleId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.editLicenseRole=function(e,a){var t={uri:this.jiraClient.buildURL("/licenserole/"+e.roleId),method:"PUT",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.validateLicense=function(e,a){var t={uri:this.jiraClient.buildURL("/licenseValidator"),method:"POST",json:!0,followAllRedirects:!0,body:e.license};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getMyPermissions=function(e,a){var t={uri:this.jiraClient.buildURL("/mypermissions"),method:"GET",json:!0,followAllRedirects:!0,qs:{issueId:e.issueId,issueKey:e.issueKey,projectId:e.projectId,projectKey:e.projectKey}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getPreference=function(e,a){var t={uri:this.jiraClient.buildURL("/mypreferences"),method:"GET",json:!0,followAllRedirects:!0,qs:{key:e.key}};return this.jiraClient.makeRequest(t,a)},this.editPreference=function(e,a){var t={uri:this.jiraClient.buildURL("/mypreferences"),method:"PUT",json:!0,followAllRedirects:!0,qs:{key:e.key},body:e.value};return this.jiraClient.makeRequest(t,a)},this.deletePreference=function(e,a){var t={uri:this.jiraClient.buildURL("/mypreferences"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{key:e.key}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getMyself=function(e,a){var t={uri:this.jiraClient.buildURL("/myself"),method:"GET",json:!0,followAllRedirects:!0,debug:e};return this.jiraClient.makeRequest(t,a)},this.editMyself=function(e,a){var t={uri:this.jiraClient.buildURL("/myself"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newData};return this.jiraClient.makeRequest(t,a)},this.changePassword=function(e,a){var t={uri:this.jiraClient.buildURL("/myself/password"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newData};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){a.OAuth=t(87).OAuth,a.OAuthEcho=t(87).OAuthEcho,a.OAuth2=t(261).OAuth2},function(e,a){var t="=";function i(e,a){var t=r(e);t.length>16&&(t=c(t,8*e.length));for(var i=Array(16),o=Array(16),n=0;n<16;n++)i[n]=909522486^t[n],o[n]=1549556828^t[n];var p=c(i.concat(r(a)),512+8*a.length);return s(c(o.concat(p),672))}function o(e){for(var a="",i=e.length,o=0;o<i;o+=3)for(var n=e.charCodeAt(o)<<16|(o+1<i?e.charCodeAt(o+1)<<8:0)|(o+2<i?e.charCodeAt(o+2):0),r=0;r<4;r++)8*o+6*r>8*e.length?a+=t:a+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(n>>>6*(3-r)&63);return a}function n(e){for(var a,t,i="",o=-1;++o<e.length;)a=e.charCodeAt(o),t=o+1<e.length?e.charCodeAt(o+1):0,55296<=a&&a<=56319&&56320<=t&&t<=57343&&(a=65536+((1023&a)<<10)+(1023&t),o++),a<=127?i+=String.fromCharCode(a):a<=2047?i+=String.fromCharCode(192|a>>>6&31,128|63&a):a<=65535?i+=String.fromCharCode(224|a>>>12&15,128|a>>>6&63,128|63&a):a<=2097151&&(i+=String.fromCharCode(240|a>>>18&7,128|a>>>12&63,128|a>>>6&63,128|63&a));return i}function r(e){for(var a=Array(e.length>>2),t=0;t<a.length;t++)a[t]=0;for(t=0;t<8*e.length;t+=8)a[t>>5]|=(255&e.charCodeAt(t/8))<<24-t%32;return a}function s(e){for(var a="",t=0;t<32*e.length;t+=8)a+=String.fromCharCode(e[t>>5]>>>24-t%32&255);return a}function c(e,a){e[a>>5]|=128<<24-a%32,e[15+(a+64>>9<<4)]=a;for(var t=Array(80),i=1732584193,o=-271733879,n=-1732584194,r=271733878,s=-1009589776,c=0;c<e.length;c+=16){for(var d=i,h=o,f=n,v=r,g=s,b=0;b<80;b++){t[b]=b<16?e[c+b]:m(t[b-3]^t[b-8]^t[b-14]^t[b-16],1);var y=l(l(m(i,5),p(b,o,n,r)),l(l(s,t[b]),u(b)));s=r,r=n,n=m(o,30),o=i,i=y}i=l(i,d),o=l(o,h),n=l(n,f),r=l(r,v),s=l(s,g)}return Array(i,o,n,r,s)}function p(e,a,t,i){return e<20?a&t|~a&i:e<40?a^t^i:e<60?a&t|a&i|t&i:a^t^i}function u(e){return e<20?1518500249:e<40?1859775393:e<60?-1894007588:-899497514}function l(e,a){var t=(65535&e)+(65535&a);return(e>>16)+(a>>16)+(t>>16)<<16|65535&t}function m(e,a){return e<<a|e>>>32-a}a.HMACSHA1=function(e,a){return t=a,o(i(n(e),n(t)));var t}},function(e,a,t){var i=t(23),o=(t(2),t(18)),n=t(17),r=t(9),s=t(88);a.OAuth2=function(e,a,t,i,o,n){this._clientId=e,this._clientSecret=a,this._baseSite=t,this._authorizeUrl=i||"/oauth/authorize",this._accessTokenUrl=o||"/oauth/access_token",this._accessTokenName="access_token",this._authMethod="Bearer",this._customHeaders=n||{},this._useAuthorizationHeaderForGET=!1,this._agent=void 0},a.OAuth2.prototype.setAgent=function(e){this._agent=e},a.OAuth2.prototype.setAccessTokenName=function(e){this._accessTokenName=e},a.OAuth2.prototype.setAuthMethod=function(e){this._authMethod=e},a.OAuth2.prototype.useAuthorizationHeaderforGET=function(e){this._useAuthorizationHeaderForGET=e},a.OAuth2.prototype._getAccessTokenUrl=function(){return this._baseSite+this._accessTokenUrl},a.OAuth2.prototype.buildAuthHeader=function(e){return this._authMethod+" "+e},a.OAuth2.prototype._chooseHttpLibrary=function(e){var a=o;return"https:"!=e.protocol&&(a=n),a},a.OAuth2.prototype._request=function(e,a,t,o,n,s){var c=r.parse(a,!0);"https:"!=c.protocol||c.port||(c.port=443);var p=this._chooseHttpLibrary(c),u={};for(var l in this._customHeaders)u[l]=this._customHeaders[l];if(t)for(var l in t)u[l]=t[l];u.Host=c.host,u["User-Agent"]||(u["User-Agent"]="Node-oauth"),o?Buffer.isBuffer(o)?u["Content-Length"]=o.length:u["Content-Length"]=Buffer.byteLength(o):u["Content-length"]=0,!n||"Authorization"in u||(c.query||(c.query={}),c.query[this._accessTokenName]=n);var m=i.stringify(c.query);m&&(m="?"+m);var d={host:c.hostname,port:c.port,path:c.pathname+m,method:e,headers:u};this._executeRequest(p,d,o,s)},a.OAuth2.prototype._executeRequest=function(e,a,t,i){var o=s.isAnEarlyCloseHost(a.host),n=!1;function r(e,a){n||(n=!0,e.statusCode>=200&&e.statusCode<=299||301==e.statusCode||302==e.statusCode?i(null,a,e):i({statusCode:e.statusCode,data:a}))}var c="";this._agent&&(a.agent=this._agent);var p=e.request(a);p.on("response",function(e){e.on("data",function(e){c+=e}),e.on("close",function(a){o&&r(e,c)}),e.addListener("end",function(){r(e,c)})}),p.on("error",function(e){n=!0,i(e)}),"POST"!=a.method&&"PUT"!=a.method||!t||p.write(t),p.end()},a.OAuth2.prototype.getAuthorizeUrl=function(e){return(e=e||{}).client_id=this._clientId,this._baseSite+this._authorizeUrl+"?"+i.stringify(e)},a.OAuth2.prototype.getOAuthAccessToken=function(e,a,t){(a=a||{}).client_id=this._clientId,a.client_secret=this._clientSecret,a["refresh_token"===a.grant_type?"refresh_token":"code"]=e;var o=i.stringify(a);this._request("POST",this._getAccessTokenUrl(),{"Content-Type":"application/x-www-form-urlencoded"},o,null,function(e,a,o){if(e)t(e);else{var n;try{n=JSON.parse(a)}catch(e){n=i.parse(a)}var r=n.access_token,s=n.refresh_token;delete n.refresh_token,t(null,r,s,n)}})},a.OAuth2.prototype.getProtectedResource=function(e,a,t){this._request("GET",e,{},"",a,t)},a.OAuth2.prototype.get=function(e,a,t){if(this._useAuthorizationHeaderForGET){var i={Authorization:this.buildAuthHeader(a)};a=null}else i={};this._request("GET",e,i,"",a,t)}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getPasswordPolicy=function(e,a){var t={uri:this.jiraClient.buildURL("/password/policy"),method:"GET",json:!0,followAllRedirects:!0,qs:{hasOldPassword:e.hasOldPassword}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPermissions=function(e,a){var t={uri:this.jiraClient.buildURL("/permissions"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPermissionSchemes=function(e,a){var t=e.expand;e.expand&&e.expand instanceof Array&&(t=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme"),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:t}};return this.jiraClient.makeRequest(i,a)},this.createPermissionScheme=function(e,a){var t={uri:this.jiraClient.buildURL("/permissionscheme"),method:"POST",json:!0,followAllRedirects:!0,body:e.scheme};return this.jiraClient.makeRequest(t,a)},this.getPermissionScheme=function(e,a){var t=e.expand;e.expand&&e.expand instanceof Array&&(t=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:t}};return this.jiraClient.makeRequest(i,a)},this.editPermissionScheme=function(e,a){var t={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.scheme};return this.jiraClient.makeRequest(t,a)},this.deletePermissionScheme=function(e,a){var t={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a,"Permission Scheme removed.")},this.getPermissionSchemeGrants=function(e,a){var t=e.expand;e.expand&&e.expand instanceof Array&&(t=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission"),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:t}};return this.jiraClient.makeRequest(i,a)},this.createPermissionGrantInScheme=function(e,a){var t={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission"),method:"POST",json:!0,followAllRedirects:!0,body:e.grant};return this.jiraClient.makeRequest(t,a)},this.deletePermissionGrantFromScheme=function(e,a){var t={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission/"+e.permissionId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a,"Permission removed from scheme.")},this.getPermissionSchemeGrantById=function(e,a){var t=e.expand;e.expand&&e.expand instanceof Array&&(t=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission/"+e.permissionId),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:t}};return this.jiraClient.makeRequest(i,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPriorities=function(e,a){var t={uri:this.jiraClient.buildURL("/priority"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getPriority=function(e,a){var t={uri:this.jiraClient.buildURL("/priority/"+e.priorityId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllProjects=function(e,a){e=e||{};var t=this.buildRequestOptions(e,"","GET");return Object.keys(t.body).length||delete t.body,Object.keys(t.qs).length||delete t.qs,this.jiraClient.makeRequest(t,a)},this.updateProject=function(e,a){var t={uri:this.jiraClient.buildURL("/project/"+e.projectIdOrKey),method:"PUT",followAllRedirects:!0,json:!0,qs:{expand:e.expand},body:{key:e.key,name:e.name,projectTypeKey:e.projectTypeKey,projectTemplateKey:e.projectTemplateKey,description:e.description,lead:e.lead,leadAccountId:e.leadAccountId,url:e.url,assigneeType:e.assigneeType,avatarId:e.avatarId,issueSecurityScheme:e.issueSecurityScheme,permissionScheme:e.permissionScheme,notificationScheme:e.notificationScheme,categoryId:e.categoryId}};return this.jiraClient.makeRequest(t,a)},this.deleteProject=function(e,a){var t=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(t,a,"Project Deleted")},this.createProject=function(e,a){opts=opts||{};var t={uri:this.jiraClient.buildURL("/project"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(t,a)},this.getProjectProperties=function(e,a){var t=this.buildRequestOptions(e,"/properties","GET");return this.jiraClient.makeRequest(t,a)},this.getProject=function(e,a){var t=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(t,a)},this.getComponents=function(e,a){var t=this.buildRequestOptions(e,"/components","GET");return this.jiraClient.makeRequest(t,a)},this.getStatuses=function(e,a){var t=this.buildRequestOptions(e,"/statuses","GET");return this.jiraClient.makeRequest(t,a)},this.getVersions=function(e,a){var t=this.buildRequestOptions(e,"/versions","GET");return this.jiraClient.makeRequest(t,a)},this.getRoles=function(e,a){var t=this.buildRequestOptions(e,"/role","GET");return this.jiraClient.makeRequest(t,a)},this.getRole=function(e,a){var t=this.buildRequestOptions(e,"/role/"+e.roleId,"GET");return this.jiraClient.makeRequest(t,a)},this.updateRole=function(e,a){var t=this.buildRequestOptions(e,"/role/"+e.roleId,"PUT",e.newRole);return this.jiraClient.makeRequest(t,a)},this.addToRole=function(e,a){var t=this.buildRequestOptions(e,"/role/"+e.roleId,"POST",e.newRole);return this.jiraClient.makeRequest(t,a)},this.buildRequestOptions=function(e,a,t,i,o){var n=(e=e||{}).projectIdOrKey?"/project/"+e.projectIdOrKey:"/project";return o||(o={}),i||(i={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","}),o.fields=o.fields.slice(0,-1)),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","}),o.expand=o.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(n+a),method:t,body:i,qs:o,followAllRedirects:!0,json:!0}}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllProjectCategories=function(e,a){var t={uri:this.jiraClient.buildURL("/projectCategory"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getProjectCategory=function(e,a){var t={uri:this.jiraClient.buildURL("/projectCategory/"+e.projectCategoryId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.validateProjectKey=function(e,a){var t={uri:this.jiraClient.buildURL("/projectvalidate/key"),method:"GET",json:!0,followAllRedirects:!0,qs:{key:e.projectKey}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.doReindex=function(e,a){var t={uri:this.jiraClient.buildURL("/reindex"),method:"POST",json:!0,followAllRedirects:!0,qs:{type:e.type,indexComments:e.indexComments,indexChangeHistory:e.indexChangeHistory}};return this.jiraClient.makeRequest(t,a)},this.getReindex=function(e,a){var t={uri:this.jiraClient.buildURL("/reindex"),method:"GET",json:!0,followAllRedirects:!0,qs:{taskId:e.taskId}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllResolutions=function(e,a){var t={uri:this.jiraClient.buildURL("/resolution"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getResolution=function(e,a){var t={uri:this.jiraClient.buildURL("/resolution/"+e.resolutionId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAll=function(e,a){var t={uri:this.jiraClient.buildURL("/role"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.createRole=function(e,a){var t={uri:this.jiraClient.buildURL("/role"),method:"POST",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(t,a)},this.getRoleById=function(e,a){var t={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.updateRole=function(e,a){var t={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"PUT",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(t,a)},this.deleteRole=function(e,a){var t={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{swap:e.swap}};return this.jiraClient.makeRequest(t,a)},this.getActors=function(e,a){var t={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.addActors=function(e,a){var t={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"POST",json:!0,followAllRedirects:!0,body:{user:e.user,group:e.group}};return this.jiraClient.makeRequest(t,a)},this.removeActor=function(e,a){var t={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{user:e.user,group:e.group}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAvailableFields=function(e,a){var t=this.buildRequestOptions(e,"/availableFields","GET");return this.jiraClient.makeRequest(t,a)},this.getTabs=function(e,a){var t=this.buildRequestOptions(e,"/tabs","GET");return this.jiraClient.makeRequest(t,a)},this.createTab=function(e,a){var t=this.buildRequestOptions(e,"/tabs","POST",{name:e.name});return this.jiraClient.makeRequest(t,a)},this.renameTab=function(e,a){var t=this.buildRequestOptions(e,"/tabs/"+e.tabId,"PUT",{name:e.name});return this.jiraClient.makeRequest(t,a)},this.deleteTab=function(e,a){var t=this.buildRequestOptions(e,"/tabs/"+e.tabId,"DELETE");return this.jiraClient.makeRequest(t,a,"Tab Deleted")},this.addFieldToTab=function(e,a){var t=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields","POST",e.fieldId);return this.jiraClient.makeRequest(t,a)},this.getFieldsInTab=function(e,a){var t=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields","GET");return this.jiraClient.makeRequest(t,a)},this.removeFieldFromTab=function(e,a){var t=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields/"+e.fieldId,"DELETE");return this.jiraClient.makeRequest(t,a,"Field Removed From Tab")},this.moveFieldOnTab=function(e,a){var t=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields/"+e.fieldId+"/move","POST",{position:e.newPosition});return this.jiraClient.makeRequest(t,a,"Field Moved")},this.moveTabPosition=function(e,a){var t=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/move/"+e.newPosition,"POST");return this.jiraClient.makeRequest(t,a,"Tab Moved")},this.addFieldToDefaultTab=function(e,a){var t={uri:this.jiraClient.buildURL("/screens/addToDefault/"+e.fieldId),method:"POST",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.buildRequestOptions=function(e,a,t,i,o){var n="/screens/"+e.screenId;return o||(o={}),i||(i={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","}),o.fields=o.fields.slice(0,-1)),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","}),o.expand=o.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(n+a),method:t,body:i,qs:o,followAllRedirects:!0,json:!0}}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.search=function(e,a){(e=e||{}).method=e.method||"POST";var t={uri:this.jiraClient.buildURL("/search"),method:e.method,json:!0,headers:{"Content-Type":"application/json"},followAllRedirects:!0,timeout:e.timeout||1e4},i={jql:e.jql,startAt:e.startAt,maxResults:e.maxResults,validateQuery:e.validateQuery,fields:"POST"===e.method?e.fields:e.fields.join(","),expand:e.expand,properties:e.properties};return"POST"===e.method?t.body=i:t.qs=i,this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getSecurityLevel=function(e,a){var t={uri:this.jiraClient.buildURL("/securitylevel/"+e.securityLevelId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getServerInfo=function(e,a){var t={uri:this.jiraClient.buildURL("/serverInfo"),method:"GET",json:!0,followAllRedirects:!0,qs:{doHealthCheck:e.doHealthCheck}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.setBaseUrl=function(e,a){var t={uri:this.jiraClient.buildURL("/settings/baseUrl"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newUrl};return this.jiraClient.makeRequest(t,a)},this.getIssueNavColumns=function(e,a){var t={uri:this.jiraClient.buildURL("/settings/columns"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.createSprint=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/sprint"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(t,a)},this.getSprint=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)},this.updateSprint=function(e,a){var t=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+t),method:"PUT",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,a)},this.partiallyUpdateSprint=function(e,a){var t=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+t),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,a)},this.deleteSprint=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)},this.getSprintIssues=function(e,a){var t={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId+"/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields,expand:e.expand}};return this.jiraClient.makeRequest(t,a)},this.moveSprintIssues=function(e,a){var t=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+t+"/issue"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,a)},this.swapSprint=function(e,a){var t=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+t+"/swap"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllStatuses=function(e,a){var t={uri:this.jiraClient.buildURL("/status"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getStatus=function(e,a){var t={uri:this.jiraClient.buildURL("/status/"+e.statusId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllStatusCategories=function(e,a){var t={uri:this.jiraClient.buildURL("/statuscategory"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getStatusCategory=function(e,a){var t={uri:this.jiraClient.buildURL("/statuscategory/"+e.statusCategoryIdOrKey),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";var i=t(12),o=t(8);e.exports=function(e){this.jiraClient=e,this.getUser=function(e,a){var t={uri:this.jiraClient.buildURL("/user"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey,expand:e.expand}};return e.expand&&(t.qs.expand="",e.expand.forEach(function(e){t.qs.expand+=e+","})),this.jiraClient.makeRequest(t,a)},this.deleteUser=function(e,a){var t={uri:this.jiraClient.buildURL("/user"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey}};return this.jiraClient.makeRequest(t,a,"User removed.")},this.createUser=function(e,a){var t={uri:this.jiraClient.buildURL("/user"),method:"POST",json:!0,followAllRedirects:!0,body:e.user};return this.jiraClient.makeRequest(t,a)},this.editUser=function(e,a){var t={uri:this.jiraClient.buildURL("/user"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey},body:e.user};return this.jiraClient.makeRequest(t,a)},this.multiProjectSearchAssignable=function(e,a){var t="";e.projectKeys&&(e.projectKeys.forEach(function(e){t+=e+","}),t=t.slice(0,-1));var i={uri:this.jiraClient.buildURL("/user/assignable/multiProjectSearch"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,projectKeys:t,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,a)},this.searchAssignable=function(e,a){var t={uri:this.jiraClient.buildURL("/user/assignable/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,project:e.project,issueKey:e.issueKey,startAt:e.startAt,maxResults:e.maxResults,actionDescriptorId:e.actionDescriptorId}};return this.jiraClient.makeRequest(t,a)},this.createTemporaryAvatar=function(e,a){var t=o.extname(e.filepath).slice(1),n=o.basename(e.filepath),r=i.statSync(e.filepath).size;t="jpg"==t?"jpeg":t;var s={uri:this.jiraClient.buildURL("/user/avatar/temporary"),method:"POST",followAllRedirects:!0,qs:{username:e.username,filename:n,size:r},body:i.readFileSync(e.filepath),headers:{"X-Atlassian-Token":"no-check","Content-Type":"image/"+t}};return this.jiraClient.makeRequest(s,a)},this.convertTemporaryAvatar=function(e,a){var t={uri:this.jiraClient.buildURL("/user/avatar/"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username},body:{id:e.avatarId},headers:{"X-Atlassian-Token":"no-check"}};return this.jiraClient.makeRequest(t,a,"Avatar Converted")},this.deleteAvatar=function(e,a){var t={uri:this.jiraClient.buildURL("/user/avatar/"+e.avatarId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(t,a,"Avatar Deleted")},this.getAvatars=function(e,a){var t={uri:this.jiraClient.buildURL("/user/avatars"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(t,a)},this.getDefaultColumns=function(e,a){var t={uri:this.jiraClient.buildURL("/user/columns"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(t,a)},this.setDefaultColumns=function(e,a){var t={uri:this.jiraClient.buildURL("/user/columns"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username},body:{columns:e.columns}};return this.jiraClient.makeRequest(t,a,"Default Columns Set")},this.resetDefaultColumns=function(e,a){var t={uri:this.jiraClient.buildURL("/user/columns"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(t,a,"Default Columns Reset")},this.changePassword=function(e,a){var t={uri:this.jiraClient.buildURL("/user/password"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey},body:{password:e.password}};return this.jiraClient.makeRequest(t,a,"Password Changed")},this.searchPermissions=function(e,a){var t="";e.permissions&&(e.permissions.forEach(function(e){t+=e+","}),t=t.slice(0,-1));var i={uri:this.jiraClient.buildURL("/user/permission/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,permissions:t,issueKey:e.issueKey,projectKey:e.projectKey,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,a)},this.searchPicker=function(e,a){var t={uri:this.jiraClient.buildURL("/user/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,maxResults:e.maxResults,showAvatar:e.showAvatar,exclude:e.exclude}};return this.jiraClient.makeRequest(t,a)},this.search=function(e,a){var t={uri:this.jiraClient.buildURL("/user/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,maxResults:e.maxResults,startAt:e.startAt,includeActive:e.includeActive,includeInactive:e.includeInactive}};return this.jiraClient.makeRequest(t,a)},this.viewIssueSearch=function(e,a){var t={uri:this.jiraClient.buildURL("/user/viewissue/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,issueKey:e.issueKey,projectKey:e.projectKey,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.createVersion=function(e,a){var t={uri:this.jiraClient.buildURL("/version"),method:"POST",json:!0,followAllRedirects:!0,body:e.version};return this.jiraClient.makeRequest(t,a)},this.moveVersion=function(e,a){var t=this.buildRequestOptions(e,"/move","POST",{position:e.position,after:e.after});return this.jiraClient.makeRequest(t,a)},this.getAllVersions=function(e,a){var t={uri:this.jiraClient.buildAgileURL(`/board/${e.boardId}/version`),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(t,a)},this.getVersion=function(e,a){var t=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(t,a)},this.editVersion=function(e,a){var t=this.buildRequestOptions(e,"","PUT",e.version);return this.jiraClient.makeRequest(t,a)},this.getRelatedIssueCounts=function(e,a){var t=this.buildRequestOptions(e,"/relatedIssueCounts","GET");return this.jiraClient.makeRequest(t,a)},this.getUnresolvedIssueCount=function(e,a){var t=this.buildRequestOptions(e,"/unresolvedIssueCount","GET");return this.jiraClient.makeRequest(t,a)},this.getRemoteLinks=function(e,a){var t=this.buildRequestOptions(e,"/remotelink","GET");return this.jiraClient.makeRequest(t,a)},this.createRemoteLink=function(e,a){var t=this.buildRequestOptions(e,"/remotelink","POST",e.remoteLink);return this.jiraClient.makeRequest(t,a,"Remotelink Created")},this.getRemoteLink=function(e,a){var t=this.buildRequestOptions(e,"/remotelink/"+e.remoteLinkId,"GET");return this.jiraClient.makeRequest(t,a)},this.deleteRemoteLink=function(e,a){var t=this.buildRequestOptions(e,"/remotelink/"+e.remoteLinkId,"DELETE");return this.jiraClient.makeRequest(t,a,"Remote Link Deleted")},this.deleteVersion=function(e,a){var t=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(t,a,"Version Deleted")},this.deleteAllRemoteLinks=function(e,a){var t=this.buildRequestOptions(e,"/remotelink","DELETE");return this.jiraClient.makeRequest(t,a,"Remote Links Deleted")},this.getGlobalRemoteLink=function(e,a){var t={uri:this.jiraClient.buildURL("/version/remotelink"),method:"GET",json:!0,followAllRedirects:!0,qs:{globalId:e.globalId}};return this.jiraClient.makeRequest(t,a)},this.buildRequestOptions=function(e,a,t,i,o){var n="/version/"+e.versionId;return o||(o={}),i||(i={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","}),o.fields=o.fields.slice(0,-1)),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","}),o.expand=o.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(n+a),method:t,body:i,qs:o,followAllRedirects:!0,json:!0}}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllWebhooks=function(e,a){var t={uri:this.jiraClient.buildWebhookURL("/webhook"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.getWebhook=function(e,a){var t={uri:this.jiraClient.buildWebhookURL("/webhook/"+e.webhookId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.createWebhook=function(e,a){var t={uri:this.jiraClient.buildWebhookURL("/webhook"),method:"POST",json:!0,body:e,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)},this.deleteWebhook=function(e,a){var t={uri:this.jiraClient.buildWebhookURL("/webhook/"+e.webhookId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getWorkflows=function(e,a){var t={};e&&"object"==typeof e&&e.hasOwnProperty("workflowName")&&(t.workflowName=e.workflowName);var i={uri:this.jiraClient.buildURL("/workflow"),method:"GET",json:!0,followAllRedirects:!0,qs:t};return this.jiraClient.makeRequest(i,a)}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.createWorkflowScheme=function(e,a){var t={uri:this.jiraClient.buildURL("/workflowscheme"),method:"POST",json:!0,followAllRedirects:!0,body:e.workflowScheme};return this.jiraClient.makeRequest(t,a)},this.editWorkflowScheme=function(e,a){var t=this.buildRequestOptions(e,"","PUT",e.workflowScheme);return this.jiraClient.makeRequest(t,a)},this.getWorkflowScheme=function(e,a){var t=this.buildRequestOptions(e,"","GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(t,a)},this.deleteWorkflowScheme=function(e,a){var t=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(t,a,"Workflow Scheme Deleted")},this.createDraft=function(e,a){var t=this.buildRequestOptions(e,"/createdraft","POST");return this.jiraClient.makeRequest(t,a)},this.getDefaultWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/default","GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(t,a)},this.removeDefaultWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/default","DELETE",null,{updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(t,a)},this.setDefaultWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/default","PUT",{workflow:e.workflowName,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(t,a)},this.getDraft=function(e,a){var t=this.buildRequestOptions(e,"/draft","GET");return this.jiraClient.makeRequest(t,a)},this.editDraft=function(e,a){var t=this.buildRequestOptions(e,"/draft","PUT",e.draft);return this.jiraClient.makeRequest(t,a)},this.deleteDraft=function(e,a){var t=this.buildRequestOptions(e,"/draft","DELETE");return this.jiraClient.makeRequest(t,a)},this.getDraftDefaultWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/draft/default","GET");return this.jiraClient.makeRequest(t,a)},this.setDraftDefaultWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/draft/default","PUT",{workflow:e.workflowName,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(t,a)},this.removeDraftDefaultWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/draft/default","DELETE");return this.jiraClient.makeRequest(t,a)},this.getIssueType=function(e,a){var t=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(t,a)},this.editIssueType=function(e,a){var t=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"PUT",{workflow:e.workflow,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(t,a)},this.removeIssueType=function(e,a){var t=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"DELETE",null,{updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(t,a)},this.getDraftIssueType=function(e,a){var t=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"GET");return this.jiraClient.makeRequest(t,a)},this.editDraftIssueType=function(e,a){var t=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"PUT",{workflow:e.workflow});return this.jiraClient.makeRequest(t,a)},this.removeDraftIssueType=function(e,a){var t=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"DELETE");return this.jiraClient.makeRequest(t,a)},this.getWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/workflow","GET",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(t,a)},this.getDraftWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/draft/workflow","GET",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(t,a)},this.editWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/workflow","PUT",{workflow:e.workflowName,issueTypes:e.issueTypes},{workflowName:e.workflowName});return this.jiraClient.makeRequest(t,a)},this.editDraftWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/draft/workflow","PUT",{workflow:e.workflowName,issueTypes:e.issueTypes},{workflowName:e.workflowName});return this.jiraClient.makeRequest(t,a)},this.deleteWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/workflow","DELETE",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(t,a)},this.deleteDraftWorkflow=function(e,a){var t=this.buildRequestOptions(e,"/draft/workflow","DELETE",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(t,a)},this.buildRequestOptions=function(e,a,t,i,o){var n="/workflowscheme/"+e.workflowSchemeId;return o||(o={}),i||(i={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","}),o.fields=o.fields.slice(0,-1)),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","}),o.expand=o.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(n+a),method:t,body:i,qs:o,followAllRedirects:!0,json:!0}}}},function(e,a,t){"use strict";e.exports=function(e){this.jiraClient=e,this.getWorklogDeleted=function(e,a){var t={uri:this.jiraClient.buildURL("/worklog/deleted"),method:"GET",json:!0,followAllRedirects:!0,qs:{since:e.since}};return this.jiraClient.makeRequest(t,a)},this.worklogList=function(e,a){var t={uri:this.jiraClient.buildURL("/worklog/list"),method:"POST",json:!0,followAllRedirects:!0,body:{ids:e.ids}};return this.jiraClient.makeRequest(t,a)},this.getWorklogUpdated=function(e,a){var t={uri:this.jiraClient.buildURL("/worklog/updated"),method:"GET",json:!0,followAllRedirects:!0,qs:{since:e.since}};return this.jiraClient.makeRequest(t,a)}}},function(e,a,t){"use strict";t.r(a);var i=t(89),o=t.n(i);function n(e){return function(e){if(Array.isArray(e)){for(var a=0,t=new Array(e.length);a<e.length;a++)t[a]=e[a];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var r={'"':'"',"'":"'","`":"`","“":"”","‘":"’"},s=[" ","\n","\t"],c=/ |\n|\t/,p=function(e){return e.map(function(e){return e.match(c)?'`"'.concat(e,'"`'):"`".concat(e,"`")}).join(" ")},u=(new RegExp(/(?:!jira)\s+(\S+)(?:\s+(\S+))?(?:\s+(.*))?/),{alias:{project:["p"]},string:["project","status","assignee"]}),l=function(e,a){if((i=a)&&i.content&&"reaction"===i.content.type){var t=a.content;return{from:a.sender.username,type:"reacji",reactToID:t.reaction.m,emoji:t.reaction.b}}var i;if(!function(e){return e&&e.content&&"text"===e.content.type&&"string"==typeof e.content.text.body}(a))return null;var c=a.content,l=e.aliases.expand(c.text.body);if(!l.startsWith("!jira"))return null;var m,d,h,f=o()((m=l.split("").reduce(function(e,a){var t=e.list,i=e.current,o=e.quote;return o?a===o?{list:[].concat(n(t),[i]),current:"",quote:""}:{list:t,current:i+a,quote:o}:r[a]?{list:t,current:"",quote:r[a]}:s.includes(a)?i?{list:[].concat(n(t),[i]),current:"",quote:""}:{list:t,current:i,quote:""}:{list:t,current:i+a,quote:""}},{list:[],current:"",quote:""}),d=m.list,(h=m.current)?[].concat(n(d),[h]):d),u),v=function(e,a){var t=a.project?a.project.toLowerCase():"",i=a.status?a.status.toLowerCase():"",o=a.assignee?a.assignee.toLowerCase():"";return t&&!e.config.jira.projects.includes(t)?{project:"",status:"",assignee:"",error:"invalid project: ".concat(t," is not one of ").concat(p(e.config.jira.projects))}:i&&!e.config.jira.status.includes(i)?{project:"",status:"",assignee:"",error:"invalid status: ".concat(i," is not one of ").concat(p(e.config.jira.status))}:o&&!e.config.jira.usernameMapper[o]?{project:"",status:"",assignee:"",error:"invalid assignee: ".concat(o," is not one of ").concat(p(Object.keys(e.config.jira.usernameMapper)))}:{project:t,status:i,assignee:o}}(e,f),g=v.project,b=v.status,y=v.assignee,x=v.error;if(x)return{type:"unknown",error:x};switch(f._[1]){case"help":return{type:"help"};case"search":return f._.length<3?{type:"unknown",error:"search need at least 1 arg"}:{from:a.sender.username,type:"search",query:f._.slice(2).join(" "),project:g,assignee:y,status:b};case"comment":return f._.length<4?{type:"unknown",error:"comment need at least 2 args"}:{from:a.sender.username,type:"comment",query:f._[2],project:g,assignee:y,status:b,comment:f._.slice(3).join(" ")};case"create":return f._.length<4?{type:"unknown",error:"create need at least 2 args"}:g?{from:a.sender.username,type:"create",name:f._[2],project:g,assignee:y,description:f._.slice(3).join(" ")}:{type:"unknown",error:"create requires --project"};default:return{type:"unknown"}}},m=function(e){switch(e){case 0:return":zero:";case 1:return":one:";case 2:return":two:";case 3:return":three:";case 4:return":four:";case 5:return":five:";case 6:return":six:";case 7:return":seven:";case 8:return":eight:";case 9:return":nine:";case 10:return":keycap_ten:";default:return":question:"}},d=function(e,a){return"".concat(m(a)," *").concat(e.key,"* ").concat(function(e){switch(e){case"Done":return":white_check_mark:";case"To Do":return":statue_of_liberty:";default:return":building_construction:"}}(e.status)," ").concat(e.summary," - ").concat(e.url)},h=function(e,a,t,i){var o="```\n"+a+"\n```";if(!t.length)return o+"I got nothing from Jira.";var n=t.slice(0,11);return o+("@".concat(e.from," I got ").concat(t.length," tickets from Jira")+(t.length>11?". Here are the first 11:\n\n":":\n\n"))+n.map(d).join("\n")+(i?"\n\n"+i:"")},f=function(e,a,t,i){return e.jira.getOrSearch({query:t.query,project:t.project,status:t.status,assigneeJira:e.config.jira.usernameMapper[t.assignee]||""}).then(function(o){var n=o.jql,r=o.issues;return e.bot.chat.send(a,{body:h(t,n,r,i)}).then(function(e){var a=e.id;return{count:r.length>11?11:r.length,id:a,issues:r}})})},v=function(e,a,t){return f(e,a,t,"To confirm commenting, click on emojis below in the next 2 minutes:").then(function(i){var o=i.count,n=i.id,r=i.issues;e.comment.add(n,t,r),function e(a,t,i,o,n){o<n&&a.bot.chat.react(t,i,m(o)).then(function(){return e(a,t,i,o+1,n)})}(e,a,n,0,o)})},g=function(e,a){return e.config.jira.usernameMapper[a]?"[~".concat(e.config.jira.usernameMapper[a],"]"):a},b=function(e,a,t){return e.bot.chat.react(a,t,":eyes:")},y=function(e,a){try{var t=l(e,a);if(console.debug({msg:"got message",parsedMessage:t}),!t)return;switch(t.type){case"unknown":return void function(e,a,t){e.bot.chat.send(a,{body:("unknown"===t.type?"Invalid command: ".concat(t.error):"Unknown command")+"\nNeed help? Try `!jira help`"})}(e,a.channel,t);case"help":return void function(e,a){e.bot.chat.send(a,{body:'*Usage*: \n    `!jira search <query>`\n    `!jira comment <query|"multi word query"> <your comment>`\n    `!jira create --project=<PROJECT> [--assignee=<kb username>] <summary|"multi word summary"> <description>`\n\n*Options*: \n    `-p`, `--project`: only search for specific project '+"".concat(p(e.config.jira.projects),"\n")+"    `--status`: only search for tickets in specific status "+"".concat(p(e.config.jira.status),"\n")+"    `--assignee`: only search for tickets assigned to specified person (keybase username) "+"".concat(p(Object.keys(e.config.jira.usernameMapper)),"\n\n")+'*Examples*:\n    `!jira search Rekey` -- single word keyword search\n    `!jira search black bar` -- multiple word works too\n    `!jira search --project desktop black bar` -- search in only DESKTOP\n    `!jira search --assignee songgao black bar` -- search for only ones assigned to Song\n    `!jira comment "TestBlahBlah" another flake: https://example.com` -- comment on ticket(s). I\'ll ask for confirmation before posting.\n    `!jira comment KBFS-1234 test comment` -- issue key works too\n    `!jira comment "TestBlahBlah flake" another flake: https://example.com` -- if non-last-argument is multi-word, just quote it\n    `!jira comment --project kbfs --assignee songgao "TestBlahBlah" another flake: https://example.com` -- same args for search work here too\n    `!jira create --project kbfs "ignore me this is a test" this is ticket descriptiong` -- create an unassigned ticket\n    `!jira create --project kbfs --assignee songgao "ignore me this is a test" this is ticket description` -- create a ticket and assign to Song\n*Aliases*: 🆕\n'+e.aliases.getMappings().map(function(e){var a=e.from,t=e.to;return"    `".concat(a,"` => `").concat(t,"`")}).join("\n")+"\n"})}(e,a.channel);case"search":return b(e,a.channel,a.id),void function(e,a,t){f(e,a,t)}(e,a.channel,t);case"comment":return b(e,a.channel,a.id),void v(e,a.channel,t);case"reacji":return void function(e,a,t){var i=e.comment.get(t.reactToID);if(i&&t.from!==e.config.keybase.username){var o=function(e){switch(e){case":zero:":return 0;case":one:":return 1;case":two:":return 2;case":three:":return 3;case":four:":return 4;case":five:":return 5;case":six:":return 6;case":seven:":return 7;case":eight:":return 8;case":nine:":return 9;case":keycap_ten:":return 10;default:return null}}(t.emoji);if("number"==typeof o&&!(o>=i.issues.length)){var n=i.issues[o].key,r="Comment by ".concat(g(e,i.message.from))+(i.message.from===t.from?": ":" (confirmed by ".concat(g(e,t.from),"): "))+i.message.comment;e.jira.addComment(n,r).then(function(i){return e.bot.chat.send(a,{body:"@".concat(t.from," Done! ").concat(i)})})}}}(e,a.channel,t);case"create":return b(e,a.channel,a.id),void function(e,a,t){e.jira.createIssue({assigneeJira:e.config.jira.usernameMapper[t.assignee]||"",project:t.project,name:t.name,description:"Reported by [~".concat(e.config.jira.usernameMapper[t.from],"]: \n")+t.description}).then(function(i){return e.bot.chat.send(a,{body:"Ticket created"+(t.assignee?" for @".concat(t.assignee):"")+": ".concat(i)})})}(e,a.channel,t);default:return void console.error({error:"how could this happen"})}}catch(e){console.error(e)}},x=t(90),k=t.n(x),w=t(1),j=t.n(w),E=t(91),S=t.n(E);function _(e){return function(e){if(Array.isArray(e)){for(var a=0,t=new Array(e.length);a<e.length;a++)t[a]=e[a];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function R(e,a){return function(e){if(Array.isArray(e))return e}(e)||function(e,a){var t=[],i=!0,o=!1,n=void 0;try{for(var r,s=e[Symbol.iterator]();!(i=(r=s.next()).done)&&(t.push(r.value),!a||t.length!==a);i=!0);}catch(e){o=!0,n=e}finally{try{i||null==s.return||s.return()}finally{if(o)throw n}}return t}(e,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function A(e,a){for(var t=0;t<a.length;t++){var i=a[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function C(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}var q=function(){function e(a){var t=this;!function(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}(this,e),C(this,"_config",void 0),C(this,"_jira",void 0),C(this,"jiraRespMapper",function(e){return{key:e.key,summary:e.fields.summary,status:e.fields.status.statusCategory.name,url:"https://".concat(t._config.jira.host,"/browse/").concat(e.key)}}),this._config=a,this._jira=new S.a({host:a.jira.host,basic_auth:{email:a.jira.email,api_token:a.jira.apiToken}})}var a,t,i;return a=e,(t=[{key:"getOrSearch",value:function(e){var a,t=this,i=e.query,o=e.project,n=e.status,r=e.assigneeJira,s=(o?'project = "'.concat(o,'" AND '):"")+(n?'status = "'.concat(n,'" AND '):"")+(r?'assignee = "'.concat(r,'" AND '):"")+'text ~ "'.concat(i,'"');return console.debug({msg:"getOrSearch",jql:s}),Promise.all([(a=i,a.match(/[A-Za-z]+-[0-9]+/)?this._jira.issue.getIssue({issueKey:i}):new Promise(function(e){return e()})),this._jira.search.search({jql:s,fields:"key,summary,status",method:"GET",maxResults:11})]).then(function(e){var a=R(e,2),i=a[0],o=a[1];return{jql:s,issues:[].concat(_(i?[i]:[]),_(o?o.issues:[])).map(t.jiraRespMapper)}})}},{key:"addComment",value:function(e,a){var t=this;return this._jira.issue.addComment({issueKey:e,comment:{body:a}}).then(function(a){var i=a.id;return"https://".concat(t._config.jira.host,"/browse/").concat(e,"?focusedCommentId=").concat(i)})}},{key:"createIssue",value:function(e){var a=this,t=e.assigneeJira,i=e.project,o=e.name,n=e.description;return console.log({msg:"createIssue",assigneeJira:t,project:i,name:o,description:n}),this._jira.issue.createIssue({fields:{assignee:t?{name:t}:void 0,project:{key:i.toUpperCase()},issuetype:{name:"Story"},summary:o,description:n}}).then(function(e){var t=e.key;return"https://".concat(a._config.jira.host,"/browse/").concat(t)})}}])&&A(a.prototype,t),i&&A(a,i),e}();function O(e,a){return function(e){if(Array.isArray(e))return e}(e)||function(e,a){var t=[],i=!0,o=!1,n=void 0;try{for(var r,s=e[Symbol.iterator]();!(i=(r=s.next()).done)&&(t.push(r.value),!a||t.length!==a);i=!0);}catch(e){o=!0,n=e}finally{try{i||null==s.return||s.return()}finally{if(o)throw n}}return t}(e,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function z(e,a){for(var t=0;t<a.length;t++){var i=a[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var P=function(){function e(a){var t,i,o;!function(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}(this,e),o=void 0,(i="mappings")in(t=this)?Object.defineProperty(t,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[i]=o,this.mappings=new Map(Object.entries(a).map(function(e){var a=O(e,2),t=a[0],i=a[1];return[t.toLowerCase(),i]}))}var a,t,i;return a=e,(t=[{key:"_expand",value:function(e){var a=e.indexOf(" "),t=e.slice(0,a).toLowerCase(),i=this.mappings.get(t);return i?i+e.slice(a):e}},{key:"expand",value:function(e){for(var a=e,t=0;t<10;++t){if(a===this._expand(e))return a}return a}},{key:"getMappings",value:function(){return Array.from(this.mappings.entries()).map(function(e){var a=O(e,2);return{from:a[0],to:a[1]}})}}])&&z(a.prototype,t),i&&z(a,i),e}();function F(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}var T=j.a.promisify(setTimeout),I=function e(){var a=this;!function(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}(this,e),F(this,"_respMsgIDToCommentMessage",new Map),F(this,"add",function(e,t,i){a._respMsgIDToCommentMessage.set(e,{message:t,issues:i}),T(12e4).then(function(){return a._respMsgIDToCommentMessage.delete(e)})}),F(this,"get",function(e){return a._respMsgIDToCommentMessage.get(e)})};function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var B,L,U=function(e){try{return function(e){if("object"!==D(e))return null;if("object"!==D(e.keybase))return null;if("string"!=typeof e.keybase.username)return null;if("string"!=typeof e.keybase.paperkey)return null;if(!Array.isArray(e.keybase.channels))return null;var a=!0,t=!1,i=void 0;try{for(var o,n=e.keybase.channels[Symbol.iterator]();!(a=(o=n.next()).done);a=!0)if("object"!==D(o.value))return null}catch(e){t=!0,i=e}finally{try{a||null==n.return||n.return()}finally{if(t)throw i}}return"object"!==D(e.jira)?null:"string"!=typeof e.jira.host?null:"string"!=typeof e.jira.email?null:"string"!=typeof e.jira.apiToken?null:Array.isArray(e.jira.projects)&&Array.isArray(e.jira.status)?(e.jira.projects=e.jira.projects.map(function(e){return e.toLowerCase()}),e.jira.status=e.jira.status.map(function(e){return e.toLowerCase()}),e):null}(JSON.parse(Buffer.from(e,"base64").toString()))}catch(e){return console.error(e),null}}(process.env.KIRA_CONFIG||"");U?(B=U,L={aliases:new P(B.aliases),bot:new k.a,config:B,comment:new I,jira:new q(B)},L.bot.init(L.config.keybase.username,L.config.keybase.paperkey,{verbose:!0}).then(function(){return console.debug({msg:"init done"}),L})).then(function(e){return e.config.keybase.channels.forEach(function(a){return e.bot.chat.watchChannelForNewMessages(a,function(a){return y(e,a)})})}):(console.error("invalid config"),console.error(process.env.KIRA_CONFIG),process.exit(1))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,